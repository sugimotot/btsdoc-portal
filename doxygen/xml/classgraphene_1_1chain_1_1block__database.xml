<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classgraphene_1_1chain_1_1block__database" kind="class" language="C++" prot="public">
    <compoundname>graphene::chain::block_database</compoundname>
    <includes refid="block__database_8hpp" local="no">block_database.hpp</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classgraphene_1_1chain_1_1block__database_1a124fbd1a9b9cf397cc5876ef92c0aac4" prot="private" static="no" mutable="yes">
        <type>std::fstream</type>
        <definition>std::fstream graphene::chain::block_database::_blocks</definition>
        <argsstring></argsstring>
        <name>_blocks</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/block_database.hpp" line="47" column="1" bodyfile="libraries/chain/include/graphene/chain/block_database.hpp" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1chain_1_1block__database_1ade0175210ec50ec08ae26ce37e29d2dc" prot="private" static="no" mutable="yes">
        <type>std::fstream</type>
        <definition>std::fstream graphene::chain::block_database::_block_num_to_pos</definition>
        <argsstring></argsstring>
        <name>_block_num_to_pos</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/block_database.hpp" line="48" column="1" bodyfile="libraries/chain/include/graphene/chain/block_database.hpp" bodystart="48" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classgraphene_1_1chain_1_1block__database_1aed048c18ca30b52e49a4af776f02fa75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::chain::block_database::open</definition>
        <argsstring>(const fc::path &amp;dbdir)</argsstring>
        <name>open</name>
        <param>
          <type>const fc::path &amp;</type>
          <declname>dbdir</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/block_database.hpp" line="32" column="1" bodyfile="libraries/chain/block_database.cpp" bodystart="42" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1block__database_1ab57c55a6865b85876083aed79705a643" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::chain::block_database::is_open</definition>
        <argsstring>() const</argsstring>
        <name>is_open</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/block_database.hpp" line="33" column="1" bodyfile="libraries/chain/block_database.cpp" bodystart="60" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1block__database_1ae0e519fadc9ef4ddc156e23fa8bc97ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::chain::block_database::flush</definition>
        <argsstring>()</argsstring>
        <name>flush</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/block_database.hpp" line="34" column="1" bodyfile="libraries/chain/block_database.cpp" bodystart="71" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1block__database_1a0d5a09ed71172b6ac21dc94171293371" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::chain::block_database::close</definition>
        <argsstring>()</argsstring>
        <name>close</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/block_database.hpp" line="35" column="1" bodyfile="libraries/chain/block_database.cpp" bodystart="65" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1block__database_1a5fa9a2b7800f9feb4e3793810d63d1ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::chain::block_database::store</definition>
        <argsstring>(const block_id_type &amp;id, const signed_block &amp;b)</argsstring>
        <name>store</name>
        <param>
          <type>const <ref refid="namespacegraphene_1_1chain_1a314b030d7a6107c5641fd9945da7f568" kindref="member">block_id_type</ref> &amp;</type>
          <declname>id</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1chain_1_1signed__block" kindref="compound">signed_block</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/block_database.hpp" line="37" column="1" bodyfile="libraries/chain/block_database.cpp" bodystart="77" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1block__database_1ab2a62854a2c2634575fc91ce9092ebba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::chain::block_database::remove</definition>
        <argsstring>(const block_id_type &amp;id)</argsstring>
        <name>remove</name>
        <param>
          <type>const <ref refid="namespacegraphene_1_1chain_1a314b030d7a6107c5641fd9945da7f568" kindref="member">block_id_type</ref> &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/block_database.hpp" line="38" column="1" bodyfile="libraries/chain/block_database.cpp" bodystart="97" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1block__database_1a9f0b40e642eb9acd7513bd52e6df79bf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::chain::block_database::contains</definition>
        <argsstring>(const block_id_type &amp;id) const</argsstring>
        <name>contains</name>
        <param>
          <type>const <ref refid="namespacegraphene_1_1chain_1a314b030d7a6107c5641fd9945da7f568" kindref="member">block_id_type</ref> &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/block_database.hpp" line="40" column="1" bodyfile="libraries/chain/block_database.cpp" bodystart="116" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1block__database_1a0e44eb64af0d026bb471f62517e214dc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacegraphene_1_1chain_1a314b030d7a6107c5641fd9945da7f568" kindref="member">block_id_type</ref></type>
        <definition>block_id_type graphene::chain::block_database::fetch_block_id</definition>
        <argsstring>(uint32_t block_num) const</argsstring>
        <name>fetch_block_id</name>
        <param>
          <type>uint32_t</type>
          <declname>block_num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/block_database.hpp" line="41" column="1" bodyfile="libraries/chain/block_database.cpp" bodystart="132" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1block__database_1a6d71ce89d5682c7aaa10697babe296b9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>optional&lt; <ref refid="structgraphene_1_1chain_1_1signed__block" kindref="compound">signed_block</ref> &gt;</type>
        <definition>optional&lt; signed_block &gt; graphene::chain::block_database::fetch_optional</definition>
        <argsstring>(const block_id_type &amp;id) const</argsstring>
        <name>fetch_optional</name>
        <param>
          <type>const <ref refid="namespacegraphene_1_1chain_1a314b030d7a6107c5641fd9945da7f568" kindref="member">block_id_type</ref> &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/block_database.hpp" line="42" column="1" bodyfile="libraries/chain/block_database.cpp" bodystart="148" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1block__database_1a7a60b7798156566811552ca0d129e4dd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>optional&lt; <ref refid="structgraphene_1_1chain_1_1signed__block" kindref="compound">signed_block</ref> &gt;</type>
        <definition>optional&lt; signed_block &gt; graphene::chain::block_database::fetch_by_number</definition>
        <argsstring>(uint32_t block_num) const</argsstring>
        <name>fetch_by_number</name>
        <param>
          <type>uint32_t</type>
          <declname>block_num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/block_database.hpp" line="43" column="1" bodyfile="libraries/chain/block_database.cpp" bodystart="180" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1block__database_1a69229800eb557d63158cdca9f2273650" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>optional&lt; <ref refid="structgraphene_1_1chain_1_1signed__block" kindref="compound">signed_block</ref> &gt;</type>
        <definition>optional&lt; signed_block &gt; graphene::chain::block_database::last</definition>
        <argsstring>() const</argsstring>
        <name>last</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/block_database.hpp" line="44" column="1" bodyfile="libraries/chain/block_database.cpp" bodystart="209" bodyend="245"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1chain_1_1block__database_1acf2fb2e00621883c45b85d9142071319" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>optional&lt; <ref refid="namespacegraphene_1_1chain_1a314b030d7a6107c5641fd9945da7f568" kindref="member">block_id_type</ref> &gt;</type>
        <definition>optional&lt; block_id_type &gt; graphene::chain::block_database::last_id</definition>
        <argsstring>() const</argsstring>
        <name>last_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/block_database.hpp" line="45" column="1" bodyfile="libraries/chain/block_database.cpp" bodystart="247" bodyend="279"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="libraries/chain/include/graphene/chain/block_database.hpp" line="30" column="1" bodyfile="libraries/chain/include/graphene/chain/block_database.hpp" bodystart="29" bodyend="49"/>
    <listofallmembers>
      <member refid="classgraphene_1_1chain_1_1block__database_1ade0175210ec50ec08ae26ce37e29d2dc" prot="private" virt="non-virtual"><scope>graphene::chain::block_database</scope><name>_block_num_to_pos</name></member>
      <member refid="classgraphene_1_1chain_1_1block__database_1a124fbd1a9b9cf397cc5876ef92c0aac4" prot="private" virt="non-virtual"><scope>graphene::chain::block_database</scope><name>_blocks</name></member>
      <member refid="classgraphene_1_1chain_1_1block__database_1a0d5a09ed71172b6ac21dc94171293371" prot="public" virt="non-virtual"><scope>graphene::chain::block_database</scope><name>close</name></member>
      <member refid="classgraphene_1_1chain_1_1block__database_1a9f0b40e642eb9acd7513bd52e6df79bf" prot="public" virt="non-virtual"><scope>graphene::chain::block_database</scope><name>contains</name></member>
      <member refid="classgraphene_1_1chain_1_1block__database_1a0e44eb64af0d026bb471f62517e214dc" prot="public" virt="non-virtual"><scope>graphene::chain::block_database</scope><name>fetch_block_id</name></member>
      <member refid="classgraphene_1_1chain_1_1block__database_1a7a60b7798156566811552ca0d129e4dd" prot="public" virt="non-virtual"><scope>graphene::chain::block_database</scope><name>fetch_by_number</name></member>
      <member refid="classgraphene_1_1chain_1_1block__database_1a6d71ce89d5682c7aaa10697babe296b9" prot="public" virt="non-virtual"><scope>graphene::chain::block_database</scope><name>fetch_optional</name></member>
      <member refid="classgraphene_1_1chain_1_1block__database_1ae0e519fadc9ef4ddc156e23fa8bc97ff" prot="public" virt="non-virtual"><scope>graphene::chain::block_database</scope><name>flush</name></member>
      <member refid="classgraphene_1_1chain_1_1block__database_1ab57c55a6865b85876083aed79705a643" prot="public" virt="non-virtual"><scope>graphene::chain::block_database</scope><name>is_open</name></member>
      <member refid="classgraphene_1_1chain_1_1block__database_1a69229800eb557d63158cdca9f2273650" prot="public" virt="non-virtual"><scope>graphene::chain::block_database</scope><name>last</name></member>
      <member refid="classgraphene_1_1chain_1_1block__database_1acf2fb2e00621883c45b85d9142071319" prot="public" virt="non-virtual"><scope>graphene::chain::block_database</scope><name>last_id</name></member>
      <member refid="classgraphene_1_1chain_1_1block__database_1aed048c18ca30b52e49a4af776f02fa75" prot="public" virt="non-virtual"><scope>graphene::chain::block_database</scope><name>open</name></member>
      <member refid="classgraphene_1_1chain_1_1block__database_1ab2a62854a2c2634575fc91ce9092ebba" prot="public" virt="non-virtual"><scope>graphene::chain::block_database</scope><name>remove</name></member>
      <member refid="classgraphene_1_1chain_1_1block__database_1a5fa9a2b7800f9feb4e3793810d63d1ed" prot="public" virt="non-virtual"><scope>graphene::chain::block_database</scope><name>store</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
