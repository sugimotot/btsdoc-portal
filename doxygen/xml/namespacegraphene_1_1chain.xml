<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="namespacegraphene_1_1chain" kind="namespace" language="C++">
    <compoundname>graphene::chain</compoundname>
    <innerclass refid="classgraphene_1_1chain_1_1account__balance__object" prot="public">graphene::chain::account_balance_object</innerclass>
    <innerclass refid="classgraphene_1_1chain_1_1account__create__evaluator" prot="public">graphene::chain::account_create_evaluator</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1account__create__operation" prot="public">graphene::chain::account_create_operation</innerclass>
    <innerclass refid="classgraphene_1_1chain_1_1account__member__index" prot="public">graphene::chain::account_member_index</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1account__name__eq__lit__predicate" prot="public">graphene::chain::account_name_eq_lit_predicate</innerclass>
    <innerclass refid="classgraphene_1_1chain_1_1account__object" prot="public">graphene::chain::account_object</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1account__options" prot="public">graphene::chain::account_options</innerclass>
    <innerclass refid="classgraphene_1_1chain_1_1account__referrer__index" prot="public">graphene::chain::account_referrer_index</innerclass>
    <innerclass refid="classgraphene_1_1chain_1_1account__statistics__object" prot="public">graphene::chain::account_statistics_object</innerclass>
    <innerclass refid="classgraphene_1_1chain_1_1account__transaction__history__object" prot="public">graphene::chain::account_transaction_history_object</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1account__transfer__operation" prot="public">graphene::chain::account_transfer_operation</innerclass>
    <innerclass refid="classgraphene_1_1chain_1_1account__update__evaluator" prot="public">graphene::chain::account_update_evaluator</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1account__update__operation" prot="public">graphene::chain::account_update_operation</innerclass>
    <innerclass refid="classgraphene_1_1chain_1_1account__upgrade__evaluator" prot="public">graphene::chain::account_upgrade_evaluator</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1account__upgrade__operation" prot="public">graphene::chain::account_upgrade_operation</innerclass>
    <innerclass refid="classgraphene_1_1chain_1_1account__whitelist__evaluator" prot="public">graphene::chain::account_whitelist_evaluator</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1account__whitelist__operation" prot="public">graphene::chain::account_whitelist_operation</innerclass>
    <innerclass refid="classgraphene_1_1chain_1_1address" prot="public">graphene::chain::address</innerclass>
    <innerclass refid="classgraphene_1_1chain_1_1assert__evaluator" prot="public">graphene::chain::assert_evaluator</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1assert__operation" prot="public">graphene::chain::assert_operation</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1asset" prot="public">graphene::chain::asset</innerclass>
    <innerclass refid="classgraphene_1_1chain_1_1asset__bitasset__data__object" prot="public">graphene::chain::asset_bitasset_data_object</innerclass>
    <innerclass refid="classgraphene_1_1chain_1_1asset__claim__fees__evaluator" prot="public">graphene::chain::asset_claim_fees_evaluator</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1asset__claim__fees__operation" prot="public">graphene::chain::asset_claim_fees_operation</innerclass>
    <innerclass refid="classgraphene_1_1chain_1_1asset__create__evaluator" prot="public">graphene::chain::asset_create_evaluator</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1asset__create__operation" prot="public">graphene::chain::asset_create_operation</innerclass>
    <innerclass refid="classgraphene_1_1chain_1_1asset__dynamic__data__object" prot="public">graphene::chain::asset_dynamic_data_object</innerclass>
    <innerclass refid="classgraphene_1_1chain_1_1asset__fund__fee__pool__evaluator" prot="public">graphene::chain::asset_fund_fee_pool_evaluator</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1asset__fund__fee__pool__operation" prot="public">graphene::chain::asset_fund_fee_pool_operation</innerclass>
    <innerclass refid="classgraphene_1_1chain_1_1asset__global__settle__evaluator" prot="public">graphene::chain::asset_global_settle_evaluator</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1asset__global__settle__operation" prot="public">graphene::chain::asset_global_settle_operation</innerclass>
    <innerclass refid="classgraphene_1_1chain_1_1asset__issue__evaluator" prot="public">graphene::chain::asset_issue_evaluator</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1asset__issue__operation" prot="public">graphene::chain::asset_issue_operation</innerclass>
    <innerclass refid="classgraphene_1_1chain_1_1asset__object" prot="public">graphene::chain::asset_object</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1asset__options" prot="public">graphene::chain::asset_options</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1asset__publish__feed__operation" prot="public">graphene::chain::asset_publish_feed_operation</innerclass>
    <innerclass refid="classgraphene_1_1chain_1_1asset__publish__feeds__evaluator" prot="public">graphene::chain::asset_publish_feeds_evaluator</innerclass>
    <innerclass refid="classgraphene_1_1chain_1_1asset__reserve__evaluator" prot="public">graphene::chain::asset_reserve_evaluator</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1asset__reserve__operation" prot="public">graphene::chain::asset_reserve_operation</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1asset__settle__cancel__operation" prot="public">graphene::chain::asset_settle_cancel_operation</innerclass>
    <innerclass refid="classgraphene_1_1chain_1_1asset__settle__evaluator" prot="public">graphene::chain::asset_settle_evaluator</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1asset__settle__operation" prot="public">graphene::chain::asset_settle_operation</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1asset__symbol__eq__lit__predicate" prot="public">graphene::chain::asset_symbol_eq_lit_predicate</innerclass>
    <innerclass refid="classgraphene_1_1chain_1_1asset__update__bitasset__evaluator" prot="public">graphene::chain::asset_update_bitasset_evaluator</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1asset__update__bitasset__operation" prot="public">graphene::chain::asset_update_bitasset_operation</innerclass>
    <innerclass refid="classgraphene_1_1chain_1_1asset__update__evaluator" prot="public">graphene::chain::asset_update_evaluator</innerclass>
    <innerclass refid="classgraphene_1_1chain_1_1asset__update__feed__producers__evaluator" prot="public">graphene::chain::asset_update_feed_producers_evaluator</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1asset__update__feed__producers__operation" prot="public">graphene::chain::asset_update_feed_producers_operation</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1asset__update__operation" prot="public">graphene::chain::asset_update_operation</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1authority" prot="public">graphene::chain::authority</innerclass>
    <innerclass refid="classgraphene_1_1chain_1_1balance__claim__evaluator" prot="public">graphene::chain::balance_claim_evaluator</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1balance__claim__operation" prot="public">graphene::chain::balance_claim_operation</innerclass>
    <innerclass refid="classgraphene_1_1chain_1_1balance__object" prot="public">graphene::chain::balance_object</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1base__operation" prot="public">graphene::chain::base_operation</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1bitasset__options" prot="public">graphene::chain::bitasset_options</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1blind__input" prot="public">graphene::chain::blind_input</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1blind__memo" prot="public">graphene::chain::blind_memo</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1blind__output" prot="public">graphene::chain::blind_output</innerclass>
    <innerclass refid="classgraphene_1_1chain_1_1blind__transfer__evaluator" prot="public">graphene::chain::blind_transfer_evaluator</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1blind__transfer__operation" prot="public">graphene::chain::blind_transfer_operation</innerclass>
    <innerclass refid="classgraphene_1_1chain_1_1blinded__balance__object" prot="public">graphene::chain::blinded_balance_object</innerclass>
    <innerclass refid="classgraphene_1_1chain_1_1block__database" prot="public">graphene::chain::block_database</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1block__header" prot="public">graphene::chain::block_header</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1block__id__predicate" prot="public">graphene::chain::block_id_predicate</innerclass>
    <innerclass refid="classgraphene_1_1chain_1_1block__summary__object" prot="public">graphene::chain::block_summary_object</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1budget__record" prot="public">graphene::chain::budget_record</innerclass>
    <innerclass refid="classgraphene_1_1chain_1_1budget__record__object" prot="public">graphene::chain::budget_record_object</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1burn__worker__initializer" prot="public">graphene::chain::burn_worker_initializer</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1burn__worker__type" prot="public">graphene::chain::burn_worker_type</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1buyback__account__options" prot="public">graphene::chain::buyback_account_options</innerclass>
    <innerclass refid="classgraphene_1_1chain_1_1buyback__object" prot="public">graphene::chain::buyback_object</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1by__expiration" prot="public">graphene::chain::by_expiration</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1by__name" prot="public">graphene::chain::by_name</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1calc__fee__visitor" prot="public">graphene::chain::calc_fee_visitor</innerclass>
    <innerclass refid="classgraphene_1_1chain_1_1call__order__object" prot="public">graphene::chain::call_order_object</innerclass>
    <innerclass refid="classgraphene_1_1chain_1_1call__order__update__evaluator" prot="public">graphene::chain::call_order_update_evaluator</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1call__order__update__operation" prot="public">graphene::chain::call_order_update_operation</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1cdd__vesting__policy" prot="public">graphene::chain::cdd_vesting_policy</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1cdd__vesting__policy__initializer" prot="public">graphene::chain::cdd_vesting_policy_initializer</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1chain__parameters" prot="public">graphene::chain::chain_parameters</innerclass>
    <innerclass refid="classgraphene_1_1chain_1_1chain__property__object" prot="public">graphene::chain::chain_property_object</innerclass>
    <innerclass refid="classgraphene_1_1chain_1_1committee__member__create__evaluator" prot="public">graphene::chain::committee_member_create_evaluator</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1committee__member__create__operation" prot="public">graphene::chain::committee_member_create_operation</innerclass>
    <innerclass refid="classgraphene_1_1chain_1_1committee__member__object" prot="public">graphene::chain::committee_member_object</innerclass>
    <innerclass refid="classgraphene_1_1chain_1_1committee__member__update__evaluator" prot="public">graphene::chain::committee_member_update_evaluator</innerclass>
    <innerclass refid="classgraphene_1_1chain_1_1committee__member__update__global__parameters__evaluator" prot="public">graphene::chain::committee_member_update_global_parameters_evaluator</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1committee__member__update__global__parameters__operation" prot="public">graphene::chain::committee_member_update_global_parameters_operation</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1committee__member__update__operation" prot="public">graphene::chain::committee_member_update_operation</innerclass>
    <innerclass refid="classgraphene_1_1chain_1_1custom__evaluator" prot="public">graphene::chain::custom_evaluator</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1custom__operation" prot="public">graphene::chain::custom_operation</innerclass>
    <innerclass refid="classgraphene_1_1chain_1_1database" prot="public">graphene::chain::database</innerclass>
    <innerclass refid="classgraphene_1_1chain_1_1dynamic__global__property__object" prot="public">graphene::chain::dynamic_global_property_object</innerclass>
    <innerclass refid="classgraphene_1_1chain_1_1evaluator" prot="public">graphene::chain::evaluator</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1extended__private__key__type" prot="public">graphene::chain::extended_private_key_type</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1extended__public__key__type" prot="public">graphene::chain::extended_public_key_type</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1extension" prot="public">graphene::chain::extension</innerclass>
    <innerclass refid="classgraphene_1_1chain_1_1fba__accumulator__object" prot="public">graphene::chain::fba_accumulator_object</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1fba__distribute__operation" prot="public">graphene::chain::fba_distribute_operation</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1fee__schedule" prot="public">graphene::chain::fee_schedule</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1fee__schedule__validate__visitor" prot="public">graphene::chain::fee_schedule_validate_visitor</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1fill__order__operation" prot="public">graphene::chain::fill_order_operation</innerclass>
    <innerclass refid="classgraphene_1_1chain_1_1force__settlement__object" prot="public">graphene::chain::force_settlement_object</innerclass>
    <innerclass refid="classgraphene_1_1chain_1_1fork__database" prot="public">graphene::chain::fork_database</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1fork__item" prot="public">graphene::chain::fork_item</innerclass>
    <innerclass refid="classgraphene_1_1chain_1_1generic__evaluator" prot="public">graphene::chain::generic_evaluator</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1genesis__state__type" prot="public">graphene::chain::genesis_state_type</innerclass>
    <innerclass refid="classgraphene_1_1chain_1_1global__property__object" prot="public">graphene::chain::global_property_object</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1graphene__extension__pack__count__visitor" prot="public">graphene::chain::graphene_extension_pack_count_visitor</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1graphene__extension__pack__read__visitor" prot="public">graphene::chain::graphene_extension_pack_read_visitor</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1graphene__extension__unpack__visitor" prot="public">graphene::chain::graphene_extension_unpack_visitor</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1immutable__chain__parameters" prot="public">graphene::chain::immutable_chain_parameters</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1index__entry" prot="public">graphene::chain::index_entry</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1init__policy__visitor" prot="public">graphene::chain::init_policy_visitor</innerclass>
    <innerclass refid="classgraphene_1_1chain_1_1limit__order__cancel__evaluator" prot="public">graphene::chain::limit_order_cancel_evaluator</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1limit__order__cancel__operation" prot="public">graphene::chain::limit_order_cancel_operation</innerclass>
    <innerclass refid="classgraphene_1_1chain_1_1limit__order__create__evaluator" prot="public">graphene::chain::limit_order_create_evaluator</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1limit__order__create__operation" prot="public">graphene::chain::limit_order_create_operation</innerclass>
    <innerclass refid="classgraphene_1_1chain_1_1limit__order__object" prot="public">graphene::chain::limit_order_object</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1linear__vesting__policy" prot="public">graphene::chain::linear_vesting_policy</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1linear__vesting__policy__initializer" prot="public">graphene::chain::linear_vesting_policy_initializer</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1memo__data" prot="public">graphene::chain::memo_data</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1memo__message" prot="public">graphene::chain::memo_message</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1no__special__authority" prot="public">graphene::chain::no_special_authority</innerclass>
    <innerclass refid="classgraphene_1_1chain_1_1node__property__object" prot="public">graphene::chain::node_property_object</innerclass>
    <innerclass refid="classgraphene_1_1chain_1_1op__evaluator" prot="public">graphene::chain::op_evaluator</innerclass>
    <innerclass refid="classgraphene_1_1chain_1_1op__evaluator__impl" prot="public">graphene::chain::op_evaluator_impl</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1op__wrapper" prot="public">graphene::chain::op_wrapper</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1operation__get__required__auth" prot="public">graphene::chain::operation_get_required_auth</innerclass>
    <innerclass refid="classgraphene_1_1chain_1_1operation__history__object" prot="public">graphene::chain::operation_history_object</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1operation__validator" prot="public">graphene::chain::operation_validator</innerclass>
    <innerclass refid="classgraphene_1_1chain_1_1override__transfer__evaluator" prot="public">graphene::chain::override_transfer_evaluator</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1override__transfer__operation" prot="public">graphene::chain::override_transfer_operation</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1p10" prot="public">graphene::chain::p10</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1p10_3_010_01_4" prot="public">graphene::chain::p10&lt; 0 &gt;</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1predicate__evaluator" prot="public">graphene::chain::predicate_evaluator</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1predicate__validator" prot="public">graphene::chain::predicate_validator</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1price" prot="public">graphene::chain::price</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1price__feed" prot="public">graphene::chain::price_feed</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1processed__transaction" prot="public">graphene::chain::processed_transaction</innerclass>
    <innerclass refid="classgraphene_1_1chain_1_1proposal__create__evaluator" prot="public">graphene::chain::proposal_create_evaluator</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1proposal__create__operation" prot="public">graphene::chain::proposal_create_operation</innerclass>
    <innerclass refid="classgraphene_1_1chain_1_1proposal__delete__evaluator" prot="public">graphene::chain::proposal_delete_evaluator</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1proposal__delete__operation" prot="public">graphene::chain::proposal_delete_operation</innerclass>
    <innerclass refid="classgraphene_1_1chain_1_1proposal__object" prot="public">graphene::chain::proposal_object</innerclass>
    <innerclass refid="classgraphene_1_1chain_1_1proposal__update__evaluator" prot="public">graphene::chain::proposal_update_evaluator</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1proposal__update__operation" prot="public">graphene::chain::proposal_update_operation</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1pts__address" prot="public">graphene::chain::pts_address</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1public__key__type" prot="public">graphene::chain::public_key_type</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1refund__worker__initializer" prot="public">graphene::chain::refund_worker_initializer</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1refund__worker__type" prot="public">graphene::chain::refund_worker_type</innerclass>
    <innerclass refid="classgraphene_1_1chain_1_1required__approval__index" prot="public">graphene::chain::required_approval_index</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1set__fee__visitor" prot="public">graphene::chain::set_fee_visitor</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1sign__state" prot="public">graphene::chain::sign_state</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1signed__block" prot="public">graphene::chain::signed_block</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1signed__block__header" prot="public">graphene::chain::signed_block_header</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1signed__transaction" prot="public">graphene::chain::signed_transaction</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1special__authority__evaluate__visitor" prot="public">graphene::chain::special_authority_evaluate_visitor</innerclass>
    <innerclass refid="classgraphene_1_1chain_1_1special__authority__object" prot="public">graphene::chain::special_authority_object</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1special__authority__validate__visitor" prot="public">graphene::chain::special_authority_validate_visitor</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1stealth__confirmation" prot="public">graphene::chain::stealth_confirmation</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1top__holders__special__authority" prot="public">graphene::chain::top_holders_special_authority</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1transaction" prot="public">graphene::chain::transaction</innerclass>
    <innerclass refid="classgraphene_1_1chain_1_1transaction__evaluation__state" prot="public">graphene::chain::transaction_evaluation_state</innerclass>
    <innerclass refid="classgraphene_1_1chain_1_1transaction__object" prot="public">graphene::chain::transaction_object</innerclass>
    <innerclass refid="classgraphene_1_1chain_1_1transfer__evaluator" prot="public">graphene::chain::transfer_evaluator</innerclass>
    <innerclass refid="classgraphene_1_1chain_1_1transfer__from__blind__evaluator" prot="public">graphene::chain::transfer_from_blind_evaluator</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1transfer__from__blind__operation" prot="public">graphene::chain::transfer_from_blind_operation</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1transfer__operation" prot="public">graphene::chain::transfer_operation</innerclass>
    <innerclass refid="classgraphene_1_1chain_1_1transfer__to__blind__evaluator" prot="public">graphene::chain::transfer_to_blind_evaluator</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1transfer__to__blind__operation" prot="public">graphene::chain::transfer_to_blind_operation</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1transform__to__fee__parameters" prot="public">graphene::chain::transform_to_fee_parameters</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1transform__to__fee__parameters_3_01fc_1_1static__variant_3_01_t_8_8_8_01_4_01_4" prot="public">graphene::chain::transform_to_fee_parameters&lt; fc::static_variant&lt; T... &gt; &gt;</innerclass>
    <innerclass refid="classgraphene_1_1chain_1_1vesting__balance__create__evaluator" prot="public">graphene::chain::vesting_balance_create_evaluator</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1vesting__balance__create__operation" prot="public">graphene::chain::vesting_balance_create_operation</innerclass>
    <innerclass refid="classgraphene_1_1chain_1_1vesting__balance__object" prot="public">graphene::chain::vesting_balance_object</innerclass>
    <innerclass refid="classgraphene_1_1chain_1_1vesting__balance__withdraw__evaluator" prot="public">graphene::chain::vesting_balance_withdraw_evaluator</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1vesting__balance__withdraw__operation" prot="public">graphene::chain::vesting_balance_withdraw_operation</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1vesting__balance__worker__initializer" prot="public">graphene::chain::vesting_balance_worker_initializer</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1vesting__balance__worker__type" prot="public">graphene::chain::vesting_balance_worker_type</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1vesting__policy__context" prot="public">graphene::chain::vesting_policy_context</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1void__result" prot="public">graphene::chain::void_result</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1void__t" prot="public">graphene::chain::void_t</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1vote__counter" prot="public">graphene::chain::vote_counter</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1vote__id__type" prot="public">graphene::chain::vote_id_type</innerclass>
    <innerclass refid="classgraphene_1_1chain_1_1withdraw__permission__claim__evaluator" prot="public">graphene::chain::withdraw_permission_claim_evaluator</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1withdraw__permission__claim__operation" prot="public">graphene::chain::withdraw_permission_claim_operation</innerclass>
    <innerclass refid="classgraphene_1_1chain_1_1withdraw__permission__create__evaluator" prot="public">graphene::chain::withdraw_permission_create_evaluator</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1withdraw__permission__create__operation" prot="public">graphene::chain::withdraw_permission_create_operation</innerclass>
    <innerclass refid="classgraphene_1_1chain_1_1withdraw__permission__delete__evaluator" prot="public">graphene::chain::withdraw_permission_delete_evaluator</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1withdraw__permission__delete__operation" prot="public">graphene::chain::withdraw_permission_delete_operation</innerclass>
    <innerclass refid="classgraphene_1_1chain_1_1withdraw__permission__object" prot="public">graphene::chain::withdraw_permission_object</innerclass>
    <innerclass refid="classgraphene_1_1chain_1_1withdraw__permission__update__evaluator" prot="public">graphene::chain::withdraw_permission_update_evaluator</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1withdraw__permission__update__operation" prot="public">graphene::chain::withdraw_permission_update_operation</innerclass>
    <innerclass refid="classgraphene_1_1chain_1_1witness__create__evaluator" prot="public">graphene::chain::witness_create_evaluator</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1witness__create__operation" prot="public">graphene::chain::witness_create_operation</innerclass>
    <innerclass refid="classgraphene_1_1chain_1_1witness__object" prot="public">graphene::chain::witness_object</innerclass>
    <innerclass refid="classgraphene_1_1chain_1_1witness__schedule__object" prot="public">graphene::chain::witness_schedule_object</innerclass>
    <innerclass refid="classgraphene_1_1chain_1_1witness__update__evaluator" prot="public">graphene::chain::witness_update_evaluator</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1witness__update__operation" prot="public">graphene::chain::witness_update_operation</innerclass>
    <innerclass refid="classgraphene_1_1chain_1_1worker__create__evaluator" prot="public">graphene::chain::worker_create_evaluator</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1worker__create__operation" prot="public">graphene::chain::worker_create_operation</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1worker__init__visitor" prot="public">graphene::chain::worker_init_visitor</innerclass>
    <innerclass refid="classgraphene_1_1chain_1_1worker__object" prot="public">graphene::chain::worker_object</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1worker__pay__visitor" prot="public">graphene::chain::worker_pay_visitor</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1zero__fee__visitor" prot="public">graphene::chain::zero_fee_visitor</innerclass>
    <innernamespace refid="namespacegraphene_1_1chain_1_1detail">graphene::chain::detail</innernamespace>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="namespacegraphene_1_1chain_1acdb82d2f8c178aa11ccb3df23ca32ccd" prot="public" static="no">
        <name>graphene_fba_accumulator_id_enum</name>
        <enumvalue id="namespacegraphene_1_1chain_1acdb82d2f8c178aa11ccb3df23ca32ccdae90b1c4cdb81c92695797f50d1243025" prot="public">
          <name>fba_accumulator_id_transfer_to_blind</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacegraphene_1_1chain_1acdb82d2f8c178aa11ccb3df23ca32ccdabf42751f9a6dda7ad64f46694ad4c249" prot="public">
          <name>fba_accumulator_id_blind_transfer</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacegraphene_1_1chain_1acdb82d2f8c178aa11ccb3df23ca32ccdaad142486291cf46325fed49a43dadeaa" prot="public">
          <name>fba_accumulator_id_transfer_from_blind</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacegraphene_1_1chain_1acdb82d2f8c178aa11ccb3df23ca32ccdaadd2b1128df626e02420beb23efe7aaa" prot="public">
          <name>fba_accumulator_id_count</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>An object will be created at genesis for each of these FBA accumulators. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/fba_accumulator_id.hpp" line="34" column="1" bodyfile="libraries/chain/include/graphene/chain/fba_accumulator_id.hpp" bodystart="33" bodyend="39"/>
      </memberdef>
      <memberdef kind="enum" id="namespacegraphene_1_1chain_1a6a12bfc3745c709e79e6bbcd1fa6c3d2" prot="public" static="no">
        <name>asset_issuer_permission_flags</name>
        <enumvalue id="namespacegraphene_1_1chain_1a6a12bfc3745c709e79e6bbcd1fa6c3d2ab08a02732dce7c06fc45c35683957909" prot="public">
          <name>charge_market_fee</name>
          <initializer>= 0x01</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>an issuer-specified percentage of all market trades in this asset is paid to the issuer </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacegraphene_1_1chain_1a6a12bfc3745c709e79e6bbcd1fa6c3d2a8cbbfe4de4c5ceb2b2274f92aa164209" prot="public">
          <name>white_list</name>
          <initializer>= 0x02</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>accounts must be whitelisted in order to hold this asset </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacegraphene_1_1chain_1a6a12bfc3745c709e79e6bbcd1fa6c3d2af00fdf25c2ccc64f702d990d2c3d34b1" prot="public">
          <name>override_authority</name>
          <initializer>= 0x04</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>issuer may transfer asset back to himself </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacegraphene_1_1chain_1a6a12bfc3745c709e79e6bbcd1fa6c3d2a7f10195ef256169dc13d1bfd4dbca118" prot="public">
          <name>transfer_restricted</name>
          <initializer>= 0x08</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>require the issuer to be one party to every transfer </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacegraphene_1_1chain_1a6a12bfc3745c709e79e6bbcd1fa6c3d2a58326f264a443528bb9c8a7dd05d9ef5" prot="public">
          <name>disable_force_settle</name>
          <initializer>= 0x10</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>disable force settling </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacegraphene_1_1chain_1a6a12bfc3745c709e79e6bbcd1fa6c3d2a58c0aa104472d6de38db9eb6ea4dd2d4" prot="public">
          <name>global_settle</name>
          <initializer>= 0x20</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>allow the bitasset issuer to force a global settling <ndash/> this may be set in permissions, but not flags </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacegraphene_1_1chain_1a6a12bfc3745c709e79e6bbcd1fa6c3d2a106133e99fff12fb46c8bd8248c83661" prot="public">
          <name>disable_confidential</name>
          <initializer>= 0x40</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>allow the asset to be used with confidential transactions </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacegraphene_1_1chain_1a6a12bfc3745c709e79e6bbcd1fa6c3d2a2568c32be39df623e59af33b2c9e696b" prot="public">
          <name>witness_fed_asset</name>
          <initializer>= 0x80</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>allow the asset to be fed by witnesses </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacegraphene_1_1chain_1a6a12bfc3745c709e79e6bbcd1fa6c3d2af027c659d4b7da8672e8ed3e21c1f4db" prot="public">
          <name>committee_fed_asset</name>
          <initializer>= 0x100</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>allow the asset to be fed by the committee </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/types.hpp" line="88" column="1" bodyfile="libraries/chain/include/graphene/chain/protocol/types.hpp" bodystart="87" bodyend="98"/>
      </memberdef>
      <memberdef kind="enum" id="namespacegraphene_1_1chain_1a92e55d4242187696c5e2c5eaafbd9400" prot="public" static="no">
        <name>reserved_spaces</name>
        <enumvalue id="namespacegraphene_1_1chain_1a92e55d4242187696c5e2c5eaafbd9400a627b2f0935d68a6ad4c64f48b5ca2f2b" prot="public">
          <name>relative_protocol_ids</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacegraphene_1_1chain_1a92e55d4242187696c5e2c5eaafbd9400a9dadbbe526b5096091138116c13d612d" prot="public">
          <name>protocol_ids</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacegraphene_1_1chain_1a92e55d4242187696c5e2c5eaafbd9400a81f35c04f1d3f3109dacaa6f2bef33c7" prot="public">
          <name>implementation_ids</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/types.hpp" line="104" column="1" bodyfile="libraries/chain/include/graphene/chain/protocol/types.hpp" bodystart="103" bodyend="108"/>
      </memberdef>
      <memberdef kind="enum" id="namespacegraphene_1_1chain_1aa6e32c79e2b22c998deddedcb696633d" prot="public" static="no">
        <name>object_type</name>
        <enumvalue id="namespacegraphene_1_1chain_1aa6e32c79e2b22c998deddedcb696633da6cf1a67aee814a4f80eeb903cbddeec1" prot="public">
          <name>null_object_type</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacegraphene_1_1chain_1aa6e32c79e2b22c998deddedcb696633da218bdd07cd77f2b0715276fa6af58e49" prot="public">
          <name>base_object_type</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacegraphene_1_1chain_1aa6e32c79e2b22c998deddedcb696633da9a9e8ad687ba16618f0c4cd89fd3e3de" prot="public">
          <name>account_object_type</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacegraphene_1_1chain_1aa6e32c79e2b22c998deddedcb696633daa3ebbda158af342607bd72ee57e81788" prot="public">
          <name>asset_object_type</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacegraphene_1_1chain_1aa6e32c79e2b22c998deddedcb696633da7a6833972e5e0e7ef4607a5d31b58c47" prot="public">
          <name>force_settlement_object_type</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacegraphene_1_1chain_1aa6e32c79e2b22c998deddedcb696633da98d1de42a5d75aecbbad0b4af247da0c" prot="public">
          <name>committee_member_object_type</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacegraphene_1_1chain_1aa6e32c79e2b22c998deddedcb696633da890c9fa15df9768e291236294ade6862" prot="public">
          <name>witness_object_type</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacegraphene_1_1chain_1aa6e32c79e2b22c998deddedcb696633da3e9e54544b9f7e7b5343f6a7d95ea593" prot="public">
          <name>limit_order_object_type</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacegraphene_1_1chain_1aa6e32c79e2b22c998deddedcb696633da57ab9805df6108570f8928ea9b366a28" prot="public">
          <name>call_order_object_type</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacegraphene_1_1chain_1aa6e32c79e2b22c998deddedcb696633da99446062de32f7157a2dddcac9bca654" prot="public">
          <name>custom_object_type</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacegraphene_1_1chain_1aa6e32c79e2b22c998deddedcb696633da73d5f9d5fe8289ffcf39020fe2eb60b1" prot="public">
          <name>proposal_object_type</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacegraphene_1_1chain_1aa6e32c79e2b22c998deddedcb696633da43893adce4b622dcc95bcd89485c5600" prot="public">
          <name>operation_history_object_type</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacegraphene_1_1chain_1aa6e32c79e2b22c998deddedcb696633da3016c2ee306ae07ba695f2ba94c23a1d" prot="public">
          <name>withdraw_permission_object_type</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacegraphene_1_1chain_1aa6e32c79e2b22c998deddedcb696633da910ef1b8a52e0047fb3692cdaee9f9ee" prot="public">
          <name>vesting_balance_object_type</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacegraphene_1_1chain_1aa6e32c79e2b22c998deddedcb696633da139435e4b7046de50fa6d55bc73676d6" prot="public">
          <name>worker_object_type</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacegraphene_1_1chain_1aa6e32c79e2b22c998deddedcb696633da87cfe643d795d2b468fbc0bbf7b5d4ec" prot="public">
          <name>balance_object_type</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacegraphene_1_1chain_1aa6e32c79e2b22c998deddedcb696633da53c3457bf181b82f4ce82b2cffe2a192" prot="public">
          <name>OBJECT_TYPE_COUNT</name>
          <briefdescription>
<para>Sentry value which contains the number of different object types. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>List all object types from all namespaces here so they can be easily reflected and displayed in debug output. If a 3rd party wants to extend the core code then they will have to change the packed_object::type field from enum_type to uint16 to avoid warnings when converting packed_objects to/from json. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/types.hpp" line="120" column="1" bodyfile="libraries/chain/include/graphene/chain/protocol/types.hpp" bodystart="119" bodyend="138"/>
      </memberdef>
      <memberdef kind="enum" id="namespacegraphene_1_1chain_1ad3bef2f100b722a6c30fada38f6dcd73" prot="public" static="no">
        <name>impl_object_type</name>
        <enumvalue id="namespacegraphene_1_1chain_1ad3bef2f100b722a6c30fada38f6dcd73aa45da32677590afcdc9bb25ba6d6e51b" prot="public">
          <name>impl_global_property_object_type</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacegraphene_1_1chain_1ad3bef2f100b722a6c30fada38f6dcd73a837a7ebbc012e3b81e667171e7c9b5a8" prot="public">
          <name>impl_dynamic_global_property_object_type</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacegraphene_1_1chain_1ad3bef2f100b722a6c30fada38f6dcd73acbc380eaf3696f2d4b0808d12b8e4cb1" prot="public">
          <name>impl_reserved0_object_type</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacegraphene_1_1chain_1ad3bef2f100b722a6c30fada38f6dcd73aad5e8a5f2ecdd9e3efe626fa48c549fb" prot="public">
          <name>impl_asset_dynamic_data_type</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacegraphene_1_1chain_1ad3bef2f100b722a6c30fada38f6dcd73ac0f8ddafa1862266e201e2fb7e6759d1" prot="public">
          <name>impl_asset_bitasset_data_type</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacegraphene_1_1chain_1ad3bef2f100b722a6c30fada38f6dcd73a2bc50158441fc95b231f9d1d2f9b6c89" prot="public">
          <name>impl_account_balance_object_type</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacegraphene_1_1chain_1ad3bef2f100b722a6c30fada38f6dcd73aac0cb1b1784f0ee58ae34a1c2b3f3df1" prot="public">
          <name>impl_account_statistics_object_type</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacegraphene_1_1chain_1ad3bef2f100b722a6c30fada38f6dcd73a368561f04146a9649902faa8b016b5aa" prot="public">
          <name>impl_transaction_object_type</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacegraphene_1_1chain_1ad3bef2f100b722a6c30fada38f6dcd73a650137ba77eb1c6a7bd45de1f8d34bc1" prot="public">
          <name>impl_block_summary_object_type</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacegraphene_1_1chain_1ad3bef2f100b722a6c30fada38f6dcd73a273d6d1dd112904e2a6a24e4a8772b12" prot="public">
          <name>impl_account_transaction_history_object_type</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacegraphene_1_1chain_1ad3bef2f100b722a6c30fada38f6dcd73a2277aa0cdb0fda1e3f2c7e6d1cafb7c0" prot="public">
          <name>impl_blinded_balance_object_type</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacegraphene_1_1chain_1ad3bef2f100b722a6c30fada38f6dcd73a06c5be035f391ce73d06d976c6881027" prot="public">
          <name>impl_chain_property_object_type</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacegraphene_1_1chain_1ad3bef2f100b722a6c30fada38f6dcd73a344ace874a02d31a31651328e080e91a" prot="public">
          <name>impl_witness_schedule_object_type</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacegraphene_1_1chain_1ad3bef2f100b722a6c30fada38f6dcd73a8b4ffc45235b1f894dd7cb703cfde831" prot="public">
          <name>impl_budget_record_object_type</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacegraphene_1_1chain_1ad3bef2f100b722a6c30fada38f6dcd73a9d63a3647a2db0610d19742509c51e32" prot="public">
          <name>impl_special_authority_object_type</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacegraphene_1_1chain_1ad3bef2f100b722a6c30fada38f6dcd73a7a94b2d29fe39e6d30d5b3c5eb7ec42b" prot="public">
          <name>impl_buyback_object_type</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacegraphene_1_1chain_1ad3bef2f100b722a6c30fada38f6dcd73a7734519967f0d47d3613ccfccb4ab0d7" prot="public">
          <name>impl_fba_accumulator_object_type</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/types.hpp" line="141" column="1" bodyfile="libraries/chain/include/graphene/chain/protocol/types.hpp" bodystart="140" bodyend="159"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespacegraphene_1_1chain_1a8fb042e07faa3c60ae66f2cd5d17387b" prot="public" static="no">
        <type>multi_index_container&lt; <ref refid="classgraphene_1_1chain_1_1account__balance__object" kindref="compound">account_balance_object</ref>, indexed_by&lt; ordered_unique&lt; tag&lt; by_id &gt;, member&lt; object, object_id_type, &amp;object::id &gt; &gt;, ordered_unique&lt; tag&lt; by_account_asset &gt;, composite_key&lt; <ref refid="classgraphene_1_1chain_1_1account__balance__object" kindref="compound">account_balance_object</ref>, member&lt; <ref refid="classgraphene_1_1chain_1_1account__balance__object" kindref="compound">account_balance_object</ref>, <ref refid="namespacegraphene_1_1chain_1a11927fb343f953514ab6235d6e7233ee" kindref="member">account_id_type</ref>, &amp;<ref refid="classgraphene_1_1chain_1_1account__balance__object_1a924cc4b7671eaca7c3318284d3ea2fa0" kindref="member">account_balance_object::owner</ref> &gt;, member&lt; <ref refid="classgraphene_1_1chain_1_1account__balance__object" kindref="compound">account_balance_object</ref>, <ref refid="namespacegraphene_1_1chain_1a8719a403aa47e9d369890c01d60d0bb2" kindref="member">asset_id_type</ref>, &amp;<ref refid="classgraphene_1_1chain_1_1account__balance__object_1a088eddd05089d6e86ffdfbca30618ffa" kindref="member">account_balance_object::asset_type</ref> &gt; &gt; &gt;, ordered_unique&lt; tag&lt; by_asset_balance &gt;, composite_key&lt; <ref refid="classgraphene_1_1chain_1_1account__balance__object" kindref="compound">account_balance_object</ref>, member&lt; <ref refid="classgraphene_1_1chain_1_1account__balance__object" kindref="compound">account_balance_object</ref>, <ref refid="namespacegraphene_1_1chain_1a8719a403aa47e9d369890c01d60d0bb2" kindref="member">asset_id_type</ref>, &amp;<ref refid="classgraphene_1_1chain_1_1account__balance__object_1a088eddd05089d6e86ffdfbca30618ffa" kindref="member">account_balance_object::asset_type</ref> &gt;, member&lt; <ref refid="classgraphene_1_1chain_1_1account__balance__object" kindref="compound">account_balance_object</ref>, <ref refid="namespacegraphene_1_1chain_1ab4bea4aef5fe40c66b42537da931bffe" kindref="member">share_type</ref>, &amp;<ref refid="classgraphene_1_1chain_1_1account__balance__object_1aa3541b73c253bcd3d8c85a638846db8f" kindref="member">account_balance_object::balance</ref> &gt;, member&lt; <ref refid="classgraphene_1_1chain_1_1account__balance__object" kindref="compound">account_balance_object</ref>, <ref refid="namespacegraphene_1_1chain_1a11927fb343f953514ab6235d6e7233ee" kindref="member">account_id_type</ref>, &amp;<ref refid="classgraphene_1_1chain_1_1account__balance__object_1a924cc4b7671eaca7c3318284d3ea2fa0" kindref="member">account_balance_object::owner</ref> &gt; &gt;, composite_key_compare&lt; std::less&lt; <ref refid="namespacegraphene_1_1chain_1a8719a403aa47e9d369890c01d60d0bb2" kindref="member">asset_id_type</ref> &gt;, std::greater&lt; <ref refid="namespacegraphene_1_1chain_1ab4bea4aef5fe40c66b42537da931bffe" kindref="member">share_type</ref> &gt;, std::less&lt; <ref refid="namespacegraphene_1_1chain_1a11927fb343f953514ab6235d6e7233ee" kindref="member">account_id_type</ref> &gt; &gt; &gt; &gt; &gt;</type>
        <definition>typedef multi_index_container&lt; account_balance_object, indexed_by&lt; ordered_unique&lt; tag&lt;by_id&gt;, member&lt; object, object_id_type, &amp;object::id &gt; &gt;, ordered_unique&lt; tag&lt;by_account_asset&gt;, composite_key&lt; account_balance_object, member&lt;account_balance_object, account_id_type, &amp;account_balance_object::owner&gt;, member&lt;account_balance_object, asset_id_type, &amp;account_balance_object::asset_type&gt; &gt; &gt;, ordered_unique&lt; tag&lt;by_asset_balance&gt;, composite_key&lt; account_balance_object, member&lt;account_balance_object, asset_id_type, &amp;account_balance_object::asset_type&gt;, member&lt;account_balance_object, share_type, &amp;account_balance_object::balance&gt;, member&lt;account_balance_object, account_id_type, &amp;account_balance_object::owner&gt; &gt;, composite_key_compare&lt; std::less&lt; asset_id_type &gt;, std::greater&lt; share_type &gt;, std::less&lt; account_id_type &gt; &gt; &gt; &gt; &gt; graphene::chain::account_balance_object_multi_index_type</definition>
        <argsstring></argsstring>
        <name>account_balance_object_multi_index_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/account_object.hpp" line="345" column="1" bodyfile="libraries/chain/include/graphene/chain/account_object.hpp" bodystart="316" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1chain_1a4c78c201450b21a1df4539d4fc3165c7" prot="public" static="no">
        <type>generic_index&lt; <ref refid="classgraphene_1_1chain_1_1account__balance__object" kindref="compound">account_balance_object</ref>, <ref refid="namespacegraphene_1_1chain_1a8fb042e07faa3c60ae66f2cd5d17387b" kindref="member">account_balance_object_multi_index_type</ref> &gt;</type>
        <definition>typedef generic_index&lt;account_balance_object, account_balance_object_multi_index_type&gt; graphene::chain::account_balance_index</definition>
        <argsstring></argsstring>
        <name>account_balance_index</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/account_object.hpp" line="350" column="1" bodyfile="libraries/chain/include/graphene/chain/account_object.hpp" bodystart="350" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1chain_1a2cb69664c48f3d41eb5ac8b6bc4847cc" prot="public" static="no">
        <type>multi_index_container&lt; <ref refid="classgraphene_1_1chain_1_1account__object" kindref="compound">account_object</ref>, indexed_by&lt; ordered_unique&lt; tag&lt; by_id &gt;, member&lt; object, object_id_type, &amp;object::id &gt; &gt;, ordered_unique&lt; tag&lt; <ref refid="structgraphene_1_1chain_1_1by__name" kindref="compound">by_name</ref> &gt;, member&lt; <ref refid="classgraphene_1_1chain_1_1account__object" kindref="compound">account_object</ref>, string, &amp;<ref refid="classgraphene_1_1chain_1_1account__object_1a9eeeba87995190284d93bd3d7fabc639" kindref="member">account_object::name</ref> &gt; &gt; &gt; &gt;</type>
        <definition>typedef multi_index_container&lt; account_object, indexed_by&lt; ordered_unique&lt; tag&lt;by_id&gt;, member&lt; object, object_id_type, &amp;object::id &gt; &gt;, ordered_unique&lt; tag&lt;by_name&gt;, member&lt;account_object, string, &amp;account_object::name&gt; &gt; &gt; &gt; graphene::chain::account_multi_index_type</definition>
        <argsstring></argsstring>
        <name>account_multi_index_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/account_object.hpp" line="363" column="1" bodyfile="libraries/chain/include/graphene/chain/account_object.hpp" bodystart="363" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1chain_1ad4a4b0840d255da34979146e37fcc15c" prot="public" static="no">
        <type>generic_index&lt; <ref refid="classgraphene_1_1chain_1_1account__object" kindref="compound">account_object</ref>, <ref refid="namespacegraphene_1_1chain_1a2cb69664c48f3d41eb5ac8b6bc4847cc" kindref="member">account_multi_index_type</ref> &gt;</type>
        <definition>typedef generic_index&lt;account_object, account_multi_index_type&gt; graphene::chain::account_index</definition>
        <argsstring></argsstring>
        <name>account_index</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/account_object.hpp" line="368" column="1" bodyfile="libraries/chain/include/graphene/chain/account_object.hpp" bodystart="368" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1chain_1a55df91a7de14b8d04b6d8789e4e355f0" prot="public" static="no">
        <type>multi_index_container&lt; <ref refid="classgraphene_1_1chain_1_1asset__bitasset__data__object" kindref="compound">asset_bitasset_data_object</ref>, indexed_by&lt; ordered_unique&lt; tag&lt; by_id &gt;, member&lt; object, object_id_type, &amp;object::id &gt; &gt;, ordered_non_unique&lt; tag&lt; by_feed_expiration &gt;, const_mem_fun&lt; <ref refid="classgraphene_1_1chain_1_1asset__bitasset__data__object" kindref="compound">asset_bitasset_data_object</ref>, time_point_sec, &amp;<ref refid="classgraphene_1_1chain_1_1asset__bitasset__data__object_1a376e0082aaf4e3fd5c5dff81b806bd10" kindref="member">asset_bitasset_data_object::feed_expiration_time</ref> &gt; &gt; &gt; &gt;</type>
        <definition>typedef multi_index_container&lt; asset_bitasset_data_object, indexed_by&lt; ordered_unique&lt; tag&lt;by_id&gt;, member&lt; object, object_id_type, &amp;object::id &gt; &gt;, ordered_non_unique&lt; tag&lt;by_feed_expiration&gt;, const_mem_fun&lt; asset_bitasset_data_object, time_point_sec, &amp;asset_bitasset_data_object::feed_expiration_time &gt; &gt; &gt; &gt; graphene::chain::asset_bitasset_data_object_multi_index_type</definition>
        <argsstring></argsstring>
        <name>asset_bitasset_data_object_multi_index_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/asset_object.hpp" line="229" column="1" bodyfile="libraries/chain/include/graphene/chain/asset_object.hpp" bodystart="220" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1chain_1a237c018a120acefc4a75f7473a413379" prot="public" static="no">
        <type>generic_index&lt; <ref refid="classgraphene_1_1chain_1_1asset__bitasset__data__object" kindref="compound">asset_bitasset_data_object</ref>, <ref refid="namespacegraphene_1_1chain_1a55df91a7de14b8d04b6d8789e4e355f0" kindref="member">asset_bitasset_data_object_multi_index_type</ref> &gt;</type>
        <definition>typedef generic_index&lt;asset_bitasset_data_object, asset_bitasset_data_object_multi_index_type&gt; graphene::chain::asset_bitasset_data_index</definition>
        <argsstring></argsstring>
        <name>asset_bitasset_data_index</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/asset_object.hpp" line="230" column="1" bodyfile="libraries/chain/include/graphene/chain/asset_object.hpp" bodystart="230" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1chain_1aec8f0400e76e0ae791bd38ccfee250fd" prot="public" static="no">
        <type>multi_index_container&lt; <ref refid="classgraphene_1_1chain_1_1asset__object" kindref="compound">asset_object</ref>, indexed_by&lt; ordered_unique&lt; tag&lt; by_id &gt;, member&lt; object, object_id_type, &amp;object::id &gt; &gt;, ordered_unique&lt; tag&lt; by_symbol &gt;, member&lt; <ref refid="classgraphene_1_1chain_1_1asset__object" kindref="compound">asset_object</ref>, string, &amp;<ref refid="classgraphene_1_1chain_1_1asset__object_1a089165870abab6b77345acea240937b6" kindref="member">asset_object::symbol</ref> &gt; &gt;, ordered_non_unique&lt; tag&lt; by_issuer &gt;, member&lt; <ref refid="classgraphene_1_1chain_1_1asset__object" kindref="compound">asset_object</ref>, <ref refid="namespacegraphene_1_1chain_1a11927fb343f953514ab6235d6e7233ee" kindref="member">account_id_type</ref>, &amp;<ref refid="classgraphene_1_1chain_1_1asset__object_1ad5274b71ad420b57da53c3ef80b95577" kindref="member">asset_object::issuer</ref> &gt; &gt;, ordered_unique&lt; tag&lt; by_type &gt;, composite_key&lt; <ref refid="classgraphene_1_1chain_1_1asset__object" kindref="compound">asset_object</ref>, const_mem_fun&lt; <ref refid="classgraphene_1_1chain_1_1asset__object" kindref="compound">asset_object</ref>, bool, &amp;<ref refid="classgraphene_1_1chain_1_1asset__object_1a5cd681e6cc216f87d99f60c1de63eba8" kindref="member">asset_object::is_market_issued</ref> &gt;, member&lt; object, object_id_type, &amp;object::id &gt; &gt; &gt; &gt; &gt;</type>
        <definition>typedef multi_index_container&lt; asset_object, indexed_by&lt; ordered_unique&lt; tag&lt;by_id&gt;, member&lt; object, object_id_type, &amp;object::id &gt; &gt;, ordered_unique&lt; tag&lt;by_symbol&gt;, member&lt;asset_object, string, &amp;asset_object::symbol&gt; &gt;, ordered_non_unique&lt; tag&lt;by_issuer&gt;, member&lt;asset_object, account_id_type, &amp;asset_object::issuer &gt; &gt;, ordered_unique&lt; tag&lt;by_type&gt;, composite_key&lt; asset_object, const_mem_fun&lt;asset_object, bool, &amp;asset_object::is_market_issued&gt;, member&lt; object, object_id_type, &amp;object::id &gt; &gt; &gt; &gt; &gt; graphene::chain::asset_object_multi_index_type</definition>
        <argsstring></argsstring>
        <name>asset_object_multi_index_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/asset_object.hpp" line="248" column="1" bodyfile="libraries/chain/include/graphene/chain/asset_object.hpp" bodystart="234" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1chain_1ac16131eb5f1afc10c20a6df72098ddf0" prot="public" static="no">
        <type>generic_index&lt; <ref refid="classgraphene_1_1chain_1_1asset__object" kindref="compound">asset_object</ref>, <ref refid="namespacegraphene_1_1chain_1aec8f0400e76e0ae791bd38ccfee250fd" kindref="member">asset_object_multi_index_type</ref> &gt;</type>
        <definition>typedef generic_index&lt;asset_object, asset_object_multi_index_type&gt; graphene::chain::asset_index</definition>
        <argsstring></argsstring>
        <name>asset_index</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/asset_object.hpp" line="249" column="1" bodyfile="libraries/chain/include/graphene/chain/asset_object.hpp" bodystart="249" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1chain_1a895071149391d0c169b33ae686f0ab3b" prot="public" static="no">
        <type>multi_index_container&lt; <ref refid="classgraphene_1_1chain_1_1balance__object" kindref="compound">balance_object</ref>, indexed_by&lt; ordered_unique&lt; tag&lt; by_id &gt;, member&lt; object, object_id_type, &amp;object::id &gt; &gt;, ordered_non_unique&lt; tag&lt; by_owner &gt;, composite_key&lt; <ref refid="classgraphene_1_1chain_1_1balance__object" kindref="compound">balance_object</ref>, member&lt; <ref refid="classgraphene_1_1chain_1_1balance__object" kindref="compound">balance_object</ref>, <ref refid="classgraphene_1_1chain_1_1address" kindref="compound">address</ref>, &amp;<ref refid="classgraphene_1_1chain_1_1balance__object_1ab59c8def92ab5290ebfcfcbe2e1e763f" kindref="member">balance_object::owner</ref> &gt;, const_mem_fun&lt; <ref refid="classgraphene_1_1chain_1_1balance__object" kindref="compound">balance_object</ref>, <ref refid="namespacegraphene_1_1chain_1a8719a403aa47e9d369890c01d60d0bb2" kindref="member">asset_id_type</ref>, &amp;<ref refid="classgraphene_1_1chain_1_1balance__object_1acf4f4e7977c8d4176fb02b108d4af9ac" kindref="member">balance_object::asset_type</ref> &gt; &gt; &gt; &gt; &gt;</type>
        <definition>using graphene::chain::balance_multi_index_type = typedef multi_index_container&lt; balance_object, indexed_by&lt; ordered_unique&lt; tag&lt;by_id&gt;, member&lt; object, object_id_type, &amp;object::id &gt; &gt;, ordered_non_unique&lt; tag&lt;by_owner&gt;, composite_key&lt; balance_object, member&lt;balance_object, address, &amp;balance_object::owner&gt;, const_mem_fun&lt;balance_object, asset_id_type, &amp;balance_object::asset_type&gt; &gt; &gt; &gt; &gt;</definition>
        <argsstring></argsstring>
        <name>balance_multi_index_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/balance_object.hpp" line="56" column="1" bodyfile="libraries/chain/include/graphene/chain/balance_object.hpp" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1chain_1a6c51205bf5f46c94f5f3f4dd689001a0" prot="public" static="no">
        <type>generic_index&lt; <ref refid="classgraphene_1_1chain_1_1balance__object" kindref="compound">balance_object</ref>, <ref refid="namespacegraphene_1_1chain_1a895071149391d0c169b33ae686f0ab3b" kindref="member">balance_multi_index_type</ref> &gt;</type>
        <definition>using graphene::chain::balance_index = typedef generic_index&lt;balance_object, balance_multi_index_type&gt;</definition>
        <argsstring></argsstring>
        <name>balance_index</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/balance_object.hpp" line="71" column="1" bodyfile="libraries/chain/include/graphene/chain/balance_object.hpp" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1chain_1a932a9aa2b03888d94ef585a1d2104367" prot="public" static="no">
        <type>multi_index_container&lt; <ref refid="classgraphene_1_1chain_1_1buyback__object" kindref="compound">buyback_object</ref>, indexed_by&lt; ordered_unique&lt; tag&lt; by_id &gt;, member&lt; object, object_id_type, &amp;object::id &gt; &gt;, ordered_unique&lt; tag&lt; by_asset &gt;, member&lt; <ref refid="classgraphene_1_1chain_1_1buyback__object" kindref="compound">buyback_object</ref>, <ref refid="namespacegraphene_1_1chain_1a8719a403aa47e9d369890c01d60d0bb2" kindref="member">asset_id_type</ref>, &amp;<ref refid="classgraphene_1_1chain_1_1buyback__object_1a972380515965598a66e2e479a7249aa6" kindref="member">buyback_object::asset_to_buy</ref> &gt; &gt; &gt;&gt;</type>
        <definition>typedef multi_index_container&lt; buyback_object, indexed_by&lt; ordered_unique&lt; tag&lt;by_id&gt;, member&lt; object, object_id_type, &amp;object::id &gt; &gt;, ordered_unique&lt; tag&lt;by_asset&gt;, member&lt; buyback_object, asset_id_type, &amp;buyback_object::asset_to_buy&gt; &gt; &gt;&gt; graphene::chain::buyback_multi_index_type</definition>
        <argsstring></argsstring>
        <name>buyback_multi_index_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/buyback_object.hpp" line="61" column="1" bodyfile="libraries/chain/include/graphene/chain/buyback_object.hpp" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1chain_1a7b63693dcd3b636ec4eee6e5c3578437" prot="public" static="no">
        <type>generic_index&lt; <ref refid="classgraphene_1_1chain_1_1buyback__object" kindref="compound">buyback_object</ref>, <ref refid="namespacegraphene_1_1chain_1a932a9aa2b03888d94ef585a1d2104367" kindref="member">buyback_multi_index_type</ref> &gt;</type>
        <definition>typedef generic_index&lt; buyback_object, buyback_multi_index_type &gt; graphene::chain::buyback_index</definition>
        <argsstring></argsstring>
        <name>buyback_index</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/buyback_object.hpp" line="63" column="1" bodyfile="libraries/chain/include/graphene/chain/buyback_object.hpp" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1chain_1aeff1c4b0789e9b25b942d2e22525d14b" prot="public" static="no">
        <type>multi_index_container&lt; <ref refid="classgraphene_1_1chain_1_1committee__member__object" kindref="compound">committee_member_object</ref>, indexed_by&lt; ordered_unique&lt; tag&lt; by_id &gt;, member&lt; object, object_id_type, &amp;object::id &gt; &gt;, ordered_unique&lt; tag&lt; by_account &gt;, member&lt; <ref refid="classgraphene_1_1chain_1_1committee__member__object" kindref="compound">committee_member_object</ref>, <ref refid="namespacegraphene_1_1chain_1a11927fb343f953514ab6235d6e7233ee" kindref="member">account_id_type</ref>, &amp;<ref refid="classgraphene_1_1chain_1_1committee__member__object_1a002acc4bcf8032c69c2e064fc29b4427" kindref="member">committee_member_object::committee_member_account</ref> &gt; &gt;, ordered_unique&lt; tag&lt; by_vote_id &gt;, member&lt; <ref refid="classgraphene_1_1chain_1_1committee__member__object" kindref="compound">committee_member_object</ref>, <ref refid="structgraphene_1_1chain_1_1vote__id__type" kindref="compound">vote_id_type</ref>, &amp;<ref refid="classgraphene_1_1chain_1_1committee__member__object_1a7628533b7d5fd6eacc2a95e1ad77d15c" kindref="member">committee_member_object::vote_id</ref> &gt; &gt; &gt; &gt;</type>
        <definition>using graphene::chain::committee_member_multi_index_type = typedef multi_index_container&lt; committee_member_object, indexed_by&lt; ordered_unique&lt; tag&lt;by_id&gt;, member&lt;object, object_id_type, &amp;object::id&gt; &gt;, ordered_unique&lt; tag&lt;by_account&gt;, member&lt;committee_member_object, account_id_type, &amp;committee_member_object::committee_member_account&gt; &gt;, ordered_unique&lt; tag&lt;by_vote_id&gt;, member&lt;committee_member_object, vote_id_type, &amp;committee_member_object::vote_id&gt; &gt; &gt; &gt;</definition>
        <argsstring></argsstring>
        <name>committee_member_multi_index_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/committee_member_object.hpp" line="59" column="1" bodyfile="libraries/chain/include/graphene/chain/committee_member_object.hpp" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1chain_1a981fd6f22492a40a81b1732b1aec531a" prot="public" static="no">
        <type>generic_index&lt; <ref refid="classgraphene_1_1chain_1_1committee__member__object" kindref="compound">committee_member_object</ref>, <ref refid="namespacegraphene_1_1chain_1aeff1c4b0789e9b25b942d2e22525d14b" kindref="member">committee_member_multi_index_type</ref> &gt;</type>
        <definition>using graphene::chain::committee_member_index = typedef generic_index&lt;committee_member_object, committee_member_multi_index_type&gt;</definition>
        <argsstring></argsstring>
        <name>committee_member_index</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/committee_member_object.hpp" line="73" column="1" bodyfile="libraries/chain/include/graphene/chain/committee_member_object.hpp" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1chain_1af564a9ee0c75cc4c0a21e6f1634a533e" prot="public" static="no">
        <type>multi_index_container&lt; <ref refid="classgraphene_1_1chain_1_1blinded__balance__object" kindref="compound">blinded_balance_object</ref>, indexed_by&lt; ordered_unique&lt; tag&lt; by_id &gt;, member&lt; object, object_id_type, &amp;object::id &gt; &gt;, ordered_unique&lt; tag&lt; by_commitment &gt;, member&lt; <ref refid="classgraphene_1_1chain_1_1blinded__balance__object" kindref="compound">blinded_balance_object</ref>, commitment_type, &amp;<ref refid="classgraphene_1_1chain_1_1blinded__balance__object_1a000a2dcb5f41d96a919333be5bef02cb" kindref="member">blinded_balance_object::commitment</ref> &gt; &gt; &gt;&gt;</type>
        <definition>typedef multi_index_container&lt; blinded_balance_object, indexed_by&lt; ordered_unique&lt; tag&lt;by_id&gt;, member&lt; object, object_id_type, &amp;object::id &gt; &gt;, ordered_unique&lt; tag&lt;by_commitment&gt;, member&lt;blinded_balance_object, commitment_type, &amp;blinded_balance_object::commitment&gt; &gt; &gt;&gt; graphene::chain::blinded_balance_object_multi_index_type</definition>
        <argsstring></argsstring>
        <name>blinded_balance_object_multi_index_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/confidential_object.hpp" line="66" column="1" bodyfile="libraries/chain/include/graphene/chain/confidential_object.hpp" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1chain_1a29c06e4b4630a41527d81af4a967fbda" prot="public" static="no">
        <type>generic_index&lt; <ref refid="classgraphene_1_1chain_1_1blinded__balance__object" kindref="compound">blinded_balance_object</ref>, <ref refid="namespacegraphene_1_1chain_1af564a9ee0c75cc4c0a21e6f1634a533e" kindref="member">blinded_balance_object_multi_index_type</ref> &gt;</type>
        <definition>typedef generic_index&lt;blinded_balance_object, blinded_balance_object_multi_index_type&gt; graphene::chain::blinded_balance_index</definition>
        <argsstring></argsstring>
        <name>blinded_balance_index</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/confidential_object.hpp" line="67" column="1" bodyfile="libraries/chain/include/graphene/chain/confidential_object.hpp" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1chain_1a455f7a42385453236a3252fa8ba97654" prot="public" static="no">
        <type>shared_ptr&lt; <ref refid="structgraphene_1_1chain_1_1fork__item" kindref="compound">fork_item</ref> &gt;</type>
        <definition>typedef shared_ptr&lt;fork_item&gt; graphene::chain::item_ptr</definition>
        <argsstring></argsstring>
        <name>item_ptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/fork_database.hpp" line="55" column="1" bodyfile="libraries/chain/include/graphene/chain/fork_database.hpp" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1chain_1a275df13929af5fe5f5ce8060d2f79974" prot="public" static="no">
        <type>multi_index_container&lt; <ref refid="classgraphene_1_1chain_1_1limit__order__object" kindref="compound">limit_order_object</ref>, indexed_by&lt; ordered_unique&lt; tag&lt; by_id &gt;, member&lt; object, object_id_type, &amp;object::id &gt; &gt;, ordered_unique&lt; tag&lt; <ref refid="structgraphene_1_1chain_1_1by__expiration" kindref="compound">by_expiration</ref> &gt;, composite_key&lt; <ref refid="classgraphene_1_1chain_1_1limit__order__object" kindref="compound">limit_order_object</ref>, member&lt; <ref refid="classgraphene_1_1chain_1_1limit__order__object" kindref="compound">limit_order_object</ref>, time_point_sec, &amp;<ref refid="classgraphene_1_1chain_1_1limit__order__object_1a5ba529f677c8917605db7f28dac8a05d" kindref="member">limit_order_object::expiration</ref> &gt;, member&lt; object, object_id_type, &amp;object::id &gt; &gt; &gt;, ordered_unique&lt; tag&lt; by_price &gt;, composite_key&lt; <ref refid="classgraphene_1_1chain_1_1limit__order__object" kindref="compound">limit_order_object</ref>, member&lt; <ref refid="classgraphene_1_1chain_1_1limit__order__object" kindref="compound">limit_order_object</ref>, <ref refid="structgraphene_1_1chain_1_1price" kindref="compound">price</ref>, &amp;<ref refid="classgraphene_1_1chain_1_1limit__order__object_1ae0546fce0941e19f3128cbb31fb49199" kindref="member">limit_order_object::sell_price</ref> &gt;, member&lt; object, object_id_type, &amp;object::id &gt; &gt;, composite_key_compare&lt; std::greater&lt; <ref refid="structgraphene_1_1chain_1_1price" kindref="compound">price</ref> &gt;, std::less&lt; object_id_type &gt; &gt; &gt;, ordered_unique&lt; tag&lt; by_account &gt;, composite_key&lt; <ref refid="classgraphene_1_1chain_1_1limit__order__object" kindref="compound">limit_order_object</ref>, member&lt; <ref refid="classgraphene_1_1chain_1_1limit__order__object" kindref="compound">limit_order_object</ref>, <ref refid="namespacegraphene_1_1chain_1a11927fb343f953514ab6235d6e7233ee" kindref="member">account_id_type</ref>, &amp;<ref refid="classgraphene_1_1chain_1_1limit__order__object_1a409d8c97cfaef8aaa60286afd0ae9c26" kindref="member">limit_order_object::seller</ref> &gt;, member&lt; object, object_id_type, &amp;object::id &gt; &gt; &gt; &gt;&gt;</type>
        <definition>typedef multi_index_container&lt; limit_order_object, indexed_by&lt; ordered_unique&lt; tag&lt;by_id&gt;, member&lt; object, object_id_type, &amp;object::id &gt; &gt;, ordered_unique&lt; tag&lt;by_expiration&gt;, composite_key&lt; limit_order_object, member&lt; limit_order_object, time_point_sec, &amp;limit_order_object::expiration&gt;, member&lt; object, object_id_type, &amp;object::id&gt; &gt; &gt;, ordered_unique&lt; tag&lt;by_price&gt;, composite_key&lt; limit_order_object, member&lt; limit_order_object, price, &amp;limit_order_object::sell_price&gt;, member&lt; object, object_id_type, &amp;object::id&gt; &gt;, composite_key_compare&lt; std::greater&lt;price&gt;, std::less&lt;object_id_type&gt; &gt; &gt;, ordered_unique&lt; tag&lt;by_account&gt;, composite_key&lt; limit_order_object, member&lt;limit_order_object, account_id_type, &amp;limit_order_object::seller&gt;, member&lt;object, object_id_type, &amp;object::id&gt; &gt; &gt; &gt;&gt; graphene::chain::limit_order_multi_index_type</definition>
        <argsstring></argsstring>
        <name>limit_order_multi_index_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/market_object.hpp" line="96" column="1" bodyfile="libraries/chain/include/graphene/chain/market_object.hpp" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1chain_1aaf4dd0d1046a013faacd7915c57a2576" prot="public" static="no">
        <type>generic_index&lt; <ref refid="classgraphene_1_1chain_1_1limit__order__object" kindref="compound">limit_order_object</ref>, <ref refid="namespacegraphene_1_1chain_1a275df13929af5fe5f5ce8060d2f79974" kindref="member">limit_order_multi_index_type</ref> &gt;</type>
        <definition>typedef generic_index&lt;limit_order_object, limit_order_multi_index_type&gt; graphene::chain::limit_order_index</definition>
        <argsstring></argsstring>
        <name>limit_order_index</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/market_object.hpp" line="98" column="1" bodyfile="libraries/chain/include/graphene/chain/market_object.hpp" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1chain_1a2e1685c221ee0974adf63bdb92ee0dd6" prot="public" static="no">
        <type>multi_index_container&lt; <ref refid="classgraphene_1_1chain_1_1call__order__object" kindref="compound">call_order_object</ref>, indexed_by&lt; ordered_unique&lt; tag&lt; by_id &gt;, member&lt; object, object_id_type, &amp;object::id &gt; &gt;, ordered_unique&lt; tag&lt; by_price &gt;, composite_key&lt; <ref refid="classgraphene_1_1chain_1_1call__order__object" kindref="compound">call_order_object</ref>, member&lt; <ref refid="classgraphene_1_1chain_1_1call__order__object" kindref="compound">call_order_object</ref>, <ref refid="structgraphene_1_1chain_1_1price" kindref="compound">price</ref>, &amp;<ref refid="classgraphene_1_1chain_1_1call__order__object_1adfd7a641c2761e4a3366db5862d95fcc" kindref="member">call_order_object::call_price</ref> &gt;, member&lt; object, object_id_type, &amp;object::id &gt; &gt;, composite_key_compare&lt; std::less&lt; <ref refid="structgraphene_1_1chain_1_1price" kindref="compound">price</ref> &gt;, std::less&lt; object_id_type &gt; &gt; &gt;, ordered_unique&lt; tag&lt; by_account &gt;, composite_key&lt; <ref refid="classgraphene_1_1chain_1_1call__order__object" kindref="compound">call_order_object</ref>, member&lt; <ref refid="classgraphene_1_1chain_1_1call__order__object" kindref="compound">call_order_object</ref>, <ref refid="namespacegraphene_1_1chain_1a11927fb343f953514ab6235d6e7233ee" kindref="member">account_id_type</ref>, &amp;<ref refid="classgraphene_1_1chain_1_1call__order__object_1ac4996a67c8cf9be42bb9275240d6bcd0" kindref="member">call_order_object::borrower</ref> &gt;, const_mem_fun&lt; <ref refid="classgraphene_1_1chain_1_1call__order__object" kindref="compound">call_order_object</ref>, <ref refid="namespacegraphene_1_1chain_1a8719a403aa47e9d369890c01d60d0bb2" kindref="member">asset_id_type</ref>, &amp;<ref refid="classgraphene_1_1chain_1_1call__order__object_1a9813f0b057877885697c133c67fa29a7" kindref="member">call_order_object::debt_type</ref> &gt; &gt; &gt;, ordered_unique&lt; tag&lt; by_collateral &gt;, composite_key&lt; <ref refid="classgraphene_1_1chain_1_1call__order__object" kindref="compound">call_order_object</ref>, const_mem_fun&lt; <ref refid="classgraphene_1_1chain_1_1call__order__object" kindref="compound">call_order_object</ref>, <ref refid="structgraphene_1_1chain_1_1price" kindref="compound">price</ref>, &amp;<ref refid="classgraphene_1_1chain_1_1call__order__object_1ae002873c5f4431e4c44a4ab05593f2d0" kindref="member">call_order_object::collateralization</ref> &gt;, member&lt; object, object_id_type, &amp;object::id &gt; &gt; &gt; &gt;&gt;</type>
        <definition>typedef multi_index_container&lt; call_order_object, indexed_by&lt; ordered_unique&lt; tag&lt;by_id&gt;, member&lt; object, object_id_type, &amp;object::id &gt; &gt;, ordered_unique&lt; tag&lt;by_price&gt;, composite_key&lt; call_order_object, member&lt; call_order_object, price, &amp;call_order_object::call_price&gt;, member&lt; object, object_id_type, &amp;object::id&gt; &gt;, composite_key_compare&lt; std::less&lt;price&gt;, std::less&lt;object_id_type&gt; &gt; &gt;, ordered_unique&lt; tag&lt;by_account&gt;, composite_key&lt; call_order_object, member&lt; call_order_object, account_id_type, &amp;call_order_object::borrower &gt;, const_mem_fun&lt; call_order_object, asset_id_type, &amp;call_order_object::debt_type&gt; &gt; &gt;, ordered_unique&lt; tag&lt;by_collateral&gt;, composite_key&lt; call_order_object, const_mem_fun&lt; call_order_object, price, &amp;call_order_object::collateralization &gt;, member&lt; object, object_id_type, &amp;object::id &gt; &gt; &gt; &gt;&gt; graphene::chain::call_order_multi_index_type</definition>
        <argsstring></argsstring>
        <name>call_order_multi_index_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/market_object.hpp" line="180" column="1" bodyfile="libraries/chain/include/graphene/chain/market_object.hpp" bodystart="154" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1chain_1ab8e407c0dd1b68c111f9c852e0b90a7d" prot="public" static="no">
        <type>multi_index_container&lt; <ref refid="classgraphene_1_1chain_1_1force__settlement__object" kindref="compound">force_settlement_object</ref>, indexed_by&lt; ordered_unique&lt; tag&lt; by_id &gt;, member&lt; object, object_id_type, &amp;object::id &gt; &gt;, ordered_unique&lt; tag&lt; by_account &gt;, composite_key&lt; <ref refid="classgraphene_1_1chain_1_1force__settlement__object" kindref="compound">force_settlement_object</ref>, member&lt; <ref refid="classgraphene_1_1chain_1_1force__settlement__object" kindref="compound">force_settlement_object</ref>, <ref refid="namespacegraphene_1_1chain_1a11927fb343f953514ab6235d6e7233ee" kindref="member">account_id_type</ref>, &amp;<ref refid="classgraphene_1_1chain_1_1force__settlement__object_1ac8de2416504f8e2f3425bb5ff459805f" kindref="member">force_settlement_object::owner</ref> &gt;, member&lt; object, object_id_type, &amp;object::id &gt; &gt; &gt;, ordered_unique&lt; tag&lt; <ref refid="structgraphene_1_1chain_1_1by__expiration" kindref="compound">by_expiration</ref> &gt;, composite_key&lt; <ref refid="classgraphene_1_1chain_1_1force__settlement__object" kindref="compound">force_settlement_object</ref>, const_mem_fun&lt; <ref refid="classgraphene_1_1chain_1_1force__settlement__object" kindref="compound">force_settlement_object</ref>, <ref refid="namespacegraphene_1_1chain_1a8719a403aa47e9d369890c01d60d0bb2" kindref="member">asset_id_type</ref>, &amp;<ref refid="classgraphene_1_1chain_1_1force__settlement__object_1a28b1ef9dc3f94196d579e093d7e569dd" kindref="member">force_settlement_object::settlement_asset_id</ref> &gt;, member&lt; <ref refid="classgraphene_1_1chain_1_1force__settlement__object" kindref="compound">force_settlement_object</ref>, time_point_sec, &amp;<ref refid="classgraphene_1_1chain_1_1force__settlement__object_1a0103c99d7da425720324c3173a24c27c" kindref="member">force_settlement_object::settlement_date</ref> &gt;, member&lt; object, object_id_type, &amp;object::id &gt; &gt; &gt; &gt;&gt;</type>
        <definition>typedef multi_index_container&lt; force_settlement_object, indexed_by&lt; ordered_unique&lt; tag&lt;by_id&gt;, member&lt; object, object_id_type, &amp;object::id &gt; &gt;, ordered_unique&lt; tag&lt;by_account&gt;, composite_key&lt; force_settlement_object, member&lt;force_settlement_object, account_id_type, &amp;force_settlement_object::owner&gt;, member&lt; object, object_id_type, &amp;object::id &gt; &gt; &gt;, ordered_unique&lt; tag&lt;by_expiration&gt;, composite_key&lt; force_settlement_object, const_mem_fun&lt;force_settlement_object, asset_id_type, &amp;force_settlement_object::settlement_asset_id&gt;, member&lt;force_settlement_object, time_point_sec, &amp;force_settlement_object::settlement_date&gt;, member&lt; object, object_id_type, &amp;object::id &gt; &gt; &gt; &gt;&gt; graphene::chain::force_settlement_object_multi_index_type</definition>
        <argsstring></argsstring>
        <name>force_settlement_object_multi_index_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/market_object.hpp" line="201" column="1" bodyfile="libraries/chain/include/graphene/chain/market_object.hpp" bodystart="182" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1chain_1a683f30af8f65dbb48389c656b53bca15" prot="public" static="no">
        <type>generic_index&lt; <ref refid="classgraphene_1_1chain_1_1call__order__object" kindref="compound">call_order_object</ref>, <ref refid="namespacegraphene_1_1chain_1a2e1685c221ee0974adf63bdb92ee0dd6" kindref="member">call_order_multi_index_type</ref> &gt;</type>
        <definition>typedef generic_index&lt;call_order_object, call_order_multi_index_type&gt; graphene::chain::call_order_index</definition>
        <argsstring></argsstring>
        <name>call_order_index</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/market_object.hpp" line="203" column="1" bodyfile="libraries/chain/include/graphene/chain/market_object.hpp" bodystart="203" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1chain_1a84985695f51d85932ea082806c7c11f3" prot="public" static="no">
        <type>generic_index&lt; <ref refid="classgraphene_1_1chain_1_1force__settlement__object" kindref="compound">force_settlement_object</ref>, <ref refid="namespacegraphene_1_1chain_1ab8e407c0dd1b68c111f9c852e0b90a7d" kindref="member">force_settlement_object_multi_index_type</ref> &gt;</type>
        <definition>typedef generic_index&lt;force_settlement_object, force_settlement_object_multi_index_type&gt; graphene::chain::force_settlement_index</definition>
        <argsstring></argsstring>
        <name>force_settlement_index</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/market_object.hpp" line="204" column="1" bodyfile="libraries/chain/include/graphene/chain/market_object.hpp" bodystart="204" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1chain_1a6514796cea872f6683913a27fe3173ed" prot="public" static="no">
        <type>multi_index_container&lt; <ref refid="classgraphene_1_1chain_1_1account__transaction__history__object" kindref="compound">account_transaction_history_object</ref>, indexed_by&lt; ordered_unique&lt; tag&lt; by_id &gt;, member&lt; object, object_id_type, &amp;object::id &gt; &gt;, ordered_unique&lt; tag&lt; by_seq &gt;, composite_key&lt; <ref refid="classgraphene_1_1chain_1_1account__transaction__history__object" kindref="compound">account_transaction_history_object</ref>, member&lt; <ref refid="classgraphene_1_1chain_1_1account__transaction__history__object" kindref="compound">account_transaction_history_object</ref>, <ref refid="namespacegraphene_1_1chain_1a11927fb343f953514ab6235d6e7233ee" kindref="member">account_id_type</ref>, &amp;<ref refid="classgraphene_1_1chain_1_1account__transaction__history__object_1a317129d86fba4a2f983367c6f11bfa06" kindref="member">account_transaction_history_object::account</ref> &gt;, member&lt; <ref refid="classgraphene_1_1chain_1_1account__transaction__history__object" kindref="compound">account_transaction_history_object</ref>, uint32_t, &amp;<ref refid="classgraphene_1_1chain_1_1account__transaction__history__object_1a34e438ab4c861a005dda9b4a8ca23216" kindref="member">account_transaction_history_object::sequence</ref> &gt; &gt; &gt;, ordered_unique&lt; tag&lt; by_op &gt;, composite_key&lt; <ref refid="classgraphene_1_1chain_1_1account__transaction__history__object" kindref="compound">account_transaction_history_object</ref>, member&lt; <ref refid="classgraphene_1_1chain_1_1account__transaction__history__object" kindref="compound">account_transaction_history_object</ref>, <ref refid="namespacegraphene_1_1chain_1a11927fb343f953514ab6235d6e7233ee" kindref="member">account_id_type</ref>, &amp;<ref refid="classgraphene_1_1chain_1_1account__transaction__history__object_1a317129d86fba4a2f983367c6f11bfa06" kindref="member">account_transaction_history_object::account</ref> &gt;, member&lt; <ref refid="classgraphene_1_1chain_1_1account__transaction__history__object" kindref="compound">account_transaction_history_object</ref>, <ref refid="namespacegraphene_1_1chain_1ac95699e79dcc01de0d506840c1b7feb4" kindref="member">operation_history_id_type</ref>, &amp;<ref refid="classgraphene_1_1chain_1_1account__transaction__history__object_1a1f7e9c887dc4348034d298cfa62e7210" kindref="member">account_transaction_history_object::operation_id</ref> &gt; &gt; &gt;, ordered_non_unique&lt; tag&lt; by_opid &gt;, member&lt; <ref refid="classgraphene_1_1chain_1_1account__transaction__history__object" kindref="compound">account_transaction_history_object</ref>, <ref refid="namespacegraphene_1_1chain_1ac95699e79dcc01de0d506840c1b7feb4" kindref="member">operation_history_id_type</ref>, &amp;<ref refid="classgraphene_1_1chain_1_1account__transaction__history__object_1a1f7e9c887dc4348034d298cfa62e7210" kindref="member">account_transaction_history_object::operation_id</ref> &gt; &gt; &gt;&gt;</type>
        <definition>typedef multi_index_container&lt; account_transaction_history_object, indexed_by&lt; ordered_unique&lt; tag&lt;by_id&gt;, member&lt; object, object_id_type, &amp;object::id &gt; &gt;, ordered_unique&lt; tag&lt;by_seq&gt;, composite_key&lt; account_transaction_history_object, member&lt; account_transaction_history_object, account_id_type, &amp;account_transaction_history_object::account&gt;, member&lt; account_transaction_history_object, uint32_t, &amp;account_transaction_history_object::sequence&gt; &gt; &gt;, ordered_unique&lt; tag&lt;by_op&gt;, composite_key&lt; account_transaction_history_object, member&lt; account_transaction_history_object, account_id_type, &amp;account_transaction_history_object::account&gt;, member&lt; account_transaction_history_object, operation_history_id_type, &amp;account_transaction_history_object::operation_id&gt; &gt; &gt;, ordered_non_unique&lt; tag&lt;by_opid&gt;, member&lt; account_transaction_history_object, operation_history_id_type, &amp;account_transaction_history_object::operation_id&gt; &gt; &gt;&gt; graphene::chain::account_transaction_history_multi_index_type</definition>
        <argsstring></argsstring>
        <name>account_transaction_history_multi_index_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/operation_history_object.hpp" line="126" column="1" bodyfile="libraries/chain/include/graphene/chain/operation_history_object.hpp" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1chain_1a2f5ae5a61a0c45744eebd38df81927fc" prot="public" static="no">
        <type>generic_index&lt; <ref refid="classgraphene_1_1chain_1_1account__transaction__history__object" kindref="compound">account_transaction_history_object</ref>, <ref refid="namespacegraphene_1_1chain_1a6514796cea872f6683913a27fe3173ed" kindref="member">account_transaction_history_multi_index_type</ref> &gt;</type>
        <definition>typedef generic_index&lt;account_transaction_history_object, account_transaction_history_multi_index_type&gt; graphene::chain::account_transaction_history_index</definition>
        <argsstring></argsstring>
        <name>account_transaction_history_index</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/operation_history_object.hpp" line="128" column="1" bodyfile="libraries/chain/include/graphene/chain/operation_history_object.hpp" bodystart="128" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1chain_1a42b2eae7bbb0e3a3d51fb6ecb427b10c" prot="public" static="no">
        <type>boost::multi_index_container&lt; <ref refid="classgraphene_1_1chain_1_1proposal__object" kindref="compound">proposal_object</ref>, indexed_by&lt; ordered_unique&lt; tag&lt; by_id &gt;, member&lt; object, object_id_type, &amp;object::id &gt; &gt;, ordered_non_unique&lt; tag&lt; <ref refid="structgraphene_1_1chain_1_1by__expiration" kindref="compound">by_expiration</ref> &gt;, member&lt; <ref refid="classgraphene_1_1chain_1_1proposal__object" kindref="compound">proposal_object</ref>, time_point_sec, &amp;<ref refid="classgraphene_1_1chain_1_1proposal__object_1aaa68f7f84d178e7141e6a66b2217bc7d" kindref="member">proposal_object::expiration_time</ref> &gt; &gt; &gt;&gt;</type>
        <definition>typedef boost::multi_index_container&lt; proposal_object, indexed_by&lt; ordered_unique&lt; tag&lt; by_id &gt;, member&lt; object, object_id_type, &amp;object::id &gt; &gt;, ordered_non_unique&lt; tag&lt; by_expiration &gt;, member&lt; proposal_object, time_point_sec, &amp;proposal_object::expiration_time &gt; &gt; &gt;&gt; graphene::chain::proposal_multi_index_container</definition>
        <argsstring></argsstring>
        <name>proposal_multi_index_container</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/proposal_object.hpp" line="88" column="1" bodyfile="libraries/chain/include/graphene/chain/proposal_object.hpp" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1chain_1a250f3b5333d70e37f1c421e87dfbaa3b" prot="public" static="no">
        <type>generic_index&lt; <ref refid="classgraphene_1_1chain_1_1proposal__object" kindref="compound">proposal_object</ref>, <ref refid="namespacegraphene_1_1chain_1a42b2eae7bbb0e3a3d51fb6ecb427b10c" kindref="member">proposal_multi_index_container</ref> &gt;</type>
        <definition>typedef generic_index&lt;proposal_object, proposal_multi_index_container&gt; graphene::chain::proposal_index</definition>
        <argsstring></argsstring>
        <name>proposal_index</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/proposal_object.hpp" line="89" column="1" bodyfile="libraries/chain/include/graphene/chain/proposal_object.hpp" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1chain_1a21d382f9713398018eaf0c67f61b9bc1" prot="public" static="no">
        <type>static_variant&lt; <ref refid="structgraphene_1_1chain_1_1account__name__eq__lit__predicate" kindref="compound">account_name_eq_lit_predicate</ref>, <ref refid="structgraphene_1_1chain_1_1asset__symbol__eq__lit__predicate" kindref="compound">asset_symbol_eq_lit_predicate</ref>, <ref refid="structgraphene_1_1chain_1_1block__id__predicate" kindref="compound">block_id_predicate</ref> &gt;</type>
        <definition>typedef static_variant&lt; account_name_eq_lit_predicate, asset_symbol_eq_lit_predicate, block_id_predicate &gt; graphene::chain::predicate</definition>
        <argsstring></argsstring>
        <name>predicate</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>When defining predicates do not make the protocol dependent upon implementation details. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/assert.hpp" line="81" column="1" bodyfile="libraries/chain/include/graphene/chain/protocol/assert.hpp" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__operations_1gaf121d5f218e142d53acffc833cae929a" prot="public" static="no">
        <type>fc::static_variant&lt; <ref refid="structgraphene_1_1chain_1_1void__result" kindref="compound">void_result</ref>, object_id_type, <ref refid="structgraphene_1_1chain_1_1asset" kindref="compound">asset</ref> &gt;</type>
        <definition>typedef fc::static_variant&lt;void_result,object_id_type,asset&gt; graphene::chain::operation_result</definition>
        <argsstring></argsstring>
        <name>operation_result</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/base.hpp" line="84" column="1" bodyfile="libraries/chain/include/graphene/chain/protocol/base.hpp" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__operations_1ga5821094f7885507dc340e54592ee7fb4" prot="public" static="no">
        <type>static_variant&lt; <ref refid="structgraphene_1_1chain_1_1void__t" kindref="compound">void_t</ref> &gt;</type>
        <definition>typedef static_variant&lt;void_t&gt; graphene::chain::future_extensions</definition>
        <argsstring></argsstring>
        <name>future_extensions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>For future expansion many structus include a single member of type extensions_type that can be changed when updating a protocol. You can always add new types to a static_variant without breaking backward compatibility. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/base.hpp" line="107" column="1" bodyfile="libraries/chain/include/graphene/chain/protocol/base.hpp" bodystart="107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__operations_1gae0096750377f6e9d61dba5765284de99" prot="public" static="no">
        <type>flat_set&lt; <ref refid="group__operations_1ga5821094f7885507dc340e54592ee7fb4" kindref="member">future_extensions</ref> &gt;</type>
        <definition>typedef flat_set&lt;future_extensions&gt; graphene::chain::extensions_type</definition>
        <argsstring></argsstring>
        <name>extensions_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A flat_set is used to make sure that only one extension of each type is added and that they are added in order.</para><para><simplesect kind="note"><para>static_variant compares only the type tag and not the content. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/base.hpp" line="116" column="1" bodyfile="libraries/chain/include/graphene/chain/protocol/base.hpp" bodystart="116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1chain_1ac8cbd4c3f6cc8b2e61218727f412cd7a" prot="public" static="no">
        <type>static_variant</type>
        <definition>typedef static_variant graphene::chain::parameter_extension</definition>
        <argsstring></argsstring>
        <name>parameter_extension</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/chain_parameters.hpp" line="39" column="1" bodyfile="libraries/chain/include/graphene/chain/protocol/chain_parameters.hpp" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1chain_1ac10c67fe9e5b7a0130762363d67b2774" prot="public" static="no">
        <type><ref refid="structgraphene_1_1chain_1_1transform__to__fee__parameters" kindref="compound">transform_to_fee_parameters</ref>&lt; <ref refid="group__operations_1ga8b0400e40715f7fd1608ab2dc3d6d401" kindref="member">operation</ref> &gt;::type</type>
        <definition>typedef transform_to_fee_parameters&lt;operation&gt;::type graphene::chain::fee_parameters</definition>
        <argsstring></argsstring>
        <name>fee_parameters</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/fee_schedule.hpp" line="35" column="1" bodyfile="libraries/chain/include/graphene/chain/protocol/fee_schedule.hpp" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1chain_1ad4c6dc36e64f041cc2a181f6eb77ba01" prot="public" static="no">
        <type><ref refid="structgraphene_1_1chain_1_1fee__schedule" kindref="compound">fee_schedule</ref></type>
        <definition>typedef fee_schedule graphene::chain::fee_schedule_type</definition>
        <argsstring></argsstring>
        <name>fee_schedule_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/fee_schedule.hpp" line="82" column="1" bodyfile="libraries/chain/include/graphene/chain/protocol/fee_schedule.hpp" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__operations_1ga8b0400e40715f7fd1608ab2dc3d6d401" prot="public" static="no">
        <type>fc::static_variant&lt; <ref refid="structgraphene_1_1chain_1_1transfer__operation" kindref="compound">transfer_operation</ref>, <ref refid="structgraphene_1_1chain_1_1limit__order__create__operation" kindref="compound">limit_order_create_operation</ref>, <ref refid="structgraphene_1_1chain_1_1limit__order__cancel__operation" kindref="compound">limit_order_cancel_operation</ref>, <ref refid="structgraphene_1_1chain_1_1call__order__update__operation" kindref="compound">call_order_update_operation</ref>, <ref refid="structgraphene_1_1chain_1_1fill__order__operation" kindref="compound">fill_order_operation</ref>, <ref refid="structgraphene_1_1chain_1_1account__create__operation" kindref="compound">account_create_operation</ref>, <ref refid="structgraphene_1_1chain_1_1account__update__operation" kindref="compound">account_update_operation</ref>, <ref refid="structgraphene_1_1chain_1_1account__whitelist__operation" kindref="compound">account_whitelist_operation</ref>, <ref refid="structgraphene_1_1chain_1_1account__upgrade__operation" kindref="compound">account_upgrade_operation</ref>, <ref refid="structgraphene_1_1chain_1_1account__transfer__operation" kindref="compound">account_transfer_operation</ref>, <ref refid="structgraphene_1_1chain_1_1asset__create__operation" kindref="compound">asset_create_operation</ref>, <ref refid="structgraphene_1_1chain_1_1asset__update__operation" kindref="compound">asset_update_operation</ref>, <ref refid="structgraphene_1_1chain_1_1asset__update__bitasset__operation" kindref="compound">asset_update_bitasset_operation</ref>, <ref refid="structgraphene_1_1chain_1_1asset__update__feed__producers__operation" kindref="compound">asset_update_feed_producers_operation</ref>, <ref refid="structgraphene_1_1chain_1_1asset__issue__operation" kindref="compound">asset_issue_operation</ref>, <ref refid="structgraphene_1_1chain_1_1asset__reserve__operation" kindref="compound">asset_reserve_operation</ref>, <ref refid="structgraphene_1_1chain_1_1asset__fund__fee__pool__operation" kindref="compound">asset_fund_fee_pool_operation</ref>, <ref refid="structgraphene_1_1chain_1_1asset__settle__operation" kindref="compound">asset_settle_operation</ref>, <ref refid="structgraphene_1_1chain_1_1asset__global__settle__operation" kindref="compound">asset_global_settle_operation</ref>, <ref refid="structgraphene_1_1chain_1_1asset__publish__feed__operation" kindref="compound">asset_publish_feed_operation</ref>, <ref refid="structgraphene_1_1chain_1_1witness__create__operation" kindref="compound">witness_create_operation</ref>, <ref refid="structgraphene_1_1chain_1_1witness__update__operation" kindref="compound">witness_update_operation</ref>, <ref refid="structgraphene_1_1chain_1_1proposal__create__operation" kindref="compound">proposal_create_operation</ref>, <ref refid="structgraphene_1_1chain_1_1proposal__update__operation" kindref="compound">proposal_update_operation</ref>, <ref refid="structgraphene_1_1chain_1_1proposal__delete__operation" kindref="compound">proposal_delete_operation</ref>, <ref refid="structgraphene_1_1chain_1_1withdraw__permission__create__operation" kindref="compound">withdraw_permission_create_operation</ref>, <ref refid="structgraphene_1_1chain_1_1withdraw__permission__update__operation" kindref="compound">withdraw_permission_update_operation</ref>, <ref refid="structgraphene_1_1chain_1_1withdraw__permission__claim__operation" kindref="compound">withdraw_permission_claim_operation</ref>, <ref refid="structgraphene_1_1chain_1_1withdraw__permission__delete__operation" kindref="compound">withdraw_permission_delete_operation</ref>, <ref refid="structgraphene_1_1chain_1_1committee__member__create__operation" kindref="compound">committee_member_create_operation</ref>, <ref refid="structgraphene_1_1chain_1_1committee__member__update__operation" kindref="compound">committee_member_update_operation</ref>, <ref refid="structgraphene_1_1chain_1_1committee__member__update__global__parameters__operation" kindref="compound">committee_member_update_global_parameters_operation</ref>, <ref refid="structgraphene_1_1chain_1_1vesting__balance__create__operation" kindref="compound">vesting_balance_create_operation</ref>, <ref refid="structgraphene_1_1chain_1_1vesting__balance__withdraw__operation" kindref="compound">vesting_balance_withdraw_operation</ref>, <ref refid="structgraphene_1_1chain_1_1worker__create__operation" kindref="compound">worker_create_operation</ref>, <ref refid="structgraphene_1_1chain_1_1custom__operation" kindref="compound">custom_operation</ref>, <ref refid="structgraphene_1_1chain_1_1assert__operation" kindref="compound">assert_operation</ref>, <ref refid="structgraphene_1_1chain_1_1balance__claim__operation" kindref="compound">balance_claim_operation</ref>, <ref refid="structgraphene_1_1chain_1_1override__transfer__operation" kindref="compound">override_transfer_operation</ref>, <ref refid="structgraphene_1_1chain_1_1transfer__to__blind__operation" kindref="compound">transfer_to_blind_operation</ref>, <ref refid="structgraphene_1_1chain_1_1blind__transfer__operation" kindref="compound">blind_transfer_operation</ref>, <ref refid="structgraphene_1_1chain_1_1transfer__from__blind__operation" kindref="compound">transfer_from_blind_operation</ref>, <ref refid="structgraphene_1_1chain_1_1asset__settle__cancel__operation" kindref="compound">asset_settle_cancel_operation</ref>, <ref refid="structgraphene_1_1chain_1_1asset__claim__fees__operation" kindref="compound">asset_claim_fees_operation</ref>, <ref refid="structgraphene_1_1chain_1_1fba__distribute__operation" kindref="compound">fba_distribute_operation</ref> &gt;</type>
        <definition>typedef fc::static_variant&lt; transfer_operation, limit_order_create_operation, limit_order_cancel_operation, call_order_update_operation, fill_order_operation, account_create_operation, account_update_operation, account_whitelist_operation, account_upgrade_operation, account_transfer_operation, asset_create_operation, asset_update_operation, asset_update_bitasset_operation, asset_update_feed_producers_operation, asset_issue_operation, asset_reserve_operation, asset_fund_fee_pool_operation, asset_settle_operation, asset_global_settle_operation, asset_publish_feed_operation, witness_create_operation, witness_update_operation, proposal_create_operation, proposal_update_operation, proposal_delete_operation, withdraw_permission_create_operation, withdraw_permission_update_operation, withdraw_permission_claim_operation, withdraw_permission_delete_operation, committee_member_create_operation, committee_member_update_operation, committee_member_update_global_parameters_operation, vesting_balance_create_operation, vesting_balance_withdraw_operation, worker_create_operation, custom_operation, assert_operation, balance_claim_operation, override_transfer_operation, transfer_to_blind_operation, blind_transfer_operation, transfer_from_blind_operation, asset_settle_cancel_operation, asset_claim_fees_operation, fba_distribute_operation &gt; graphene::chain::operation</definition>
        <argsstring></argsstring>
        <name>operation</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Defines the set of valid operations as a discriminated union type. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/operations.hpp" line="95" column="1" bodyfile="libraries/chain/include/graphene/chain/protocol/operations.hpp" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1chain_1acf64b783a57a0845a3d1882c98b6d345" prot="public" static="no">
        <type>static_variant&lt; <ref refid="structgraphene_1_1chain_1_1no__special__authority" kindref="compound">no_special_authority</ref>, <ref refid="structgraphene_1_1chain_1_1top__holders__special__authority" kindref="compound">top_holders_special_authority</ref> &gt;</type>
        <definition>typedef static_variant&lt; no_special_authority, top_holders_special_authority &gt; graphene::chain::special_authority</definition>
        <argsstring></argsstring>
        <name>special_authority</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/special_authority.hpp" line="42" column="1" bodyfile="libraries/chain/include/graphene/chain/protocol/special_authority.hpp" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1chain_1a9c45f50c97257b15a8793bba836c045a" prot="public" static="no">
        <type>fc::ecc::private_key</type>
        <definition>typedef fc::ecc::private_key graphene::chain::private_key_type</definition>
        <argsstring></argsstring>
        <name>private_key_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/types.hpp" line="84" column="1" bodyfile="libraries/chain/include/graphene/chain/protocol/types.hpp" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1chain_1a8182991954496b517776f06844cf2d93" prot="public" static="no">
        <type>fc::sha256</type>
        <definition>typedef fc::sha256 graphene::chain::chain_id_type</definition>
        <argsstring></argsstring>
        <name>chain_id_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/types.hpp" line="85" column="1" bodyfile="libraries/chain/include/graphene/chain/protocol/types.hpp" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1chain_1a11927fb343f953514ab6235d6e7233ee" prot="public" static="no">
        <type>object_id&lt; <ref refid="namespacegraphene_1_1chain_1a92e55d4242187696c5e2c5eaafbd9400a9dadbbe526b5096091138116c13d612d" kindref="member">protocol_ids</ref>, <ref refid="namespacegraphene_1_1chain_1aa6e32c79e2b22c998deddedcb696633da9a9e8ad687ba16618f0c4cd89fd3e3de" kindref="member">account_object_type</ref>, <ref refid="classgraphene_1_1chain_1_1account__object" kindref="compound">account_object</ref> &gt;</type>
        <definition>typedef object_id&lt; protocol_ids, account_object_type, account_object&gt; graphene::chain::account_id_type</definition>
        <argsstring></argsstring>
        <name>account_id_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/types.hpp" line="179" column="1" bodyfile="libraries/chain/include/graphene/chain/protocol/types.hpp" bodystart="177" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1chain_1a8719a403aa47e9d369890c01d60d0bb2" prot="public" static="no">
        <type>object_id&lt; <ref refid="namespacegraphene_1_1chain_1a92e55d4242187696c5e2c5eaafbd9400a9dadbbe526b5096091138116c13d612d" kindref="member">protocol_ids</ref>, <ref refid="namespacegraphene_1_1chain_1aa6e32c79e2b22c998deddedcb696633daa3ebbda158af342607bd72ee57e81788" kindref="member">asset_object_type</ref>, <ref refid="classgraphene_1_1chain_1_1asset__object" kindref="compound">asset_object</ref> &gt;</type>
        <definition>typedef object_id&lt; protocol_ids, asset_object_type, asset_object&gt; graphene::chain::asset_id_type</definition>
        <argsstring></argsstring>
        <name>asset_id_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/types.hpp" line="180" column="1" bodyfile="libraries/chain/include/graphene/chain/protocol/types.hpp" bodystart="180" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1chain_1adf18546469e67899bc31b5e258f7a6ff" prot="public" static="no">
        <type>object_id&lt; <ref refid="namespacegraphene_1_1chain_1a92e55d4242187696c5e2c5eaafbd9400a9dadbbe526b5096091138116c13d612d" kindref="member">protocol_ids</ref>, <ref refid="namespacegraphene_1_1chain_1aa6e32c79e2b22c998deddedcb696633da7a6833972e5e0e7ef4607a5d31b58c47" kindref="member">force_settlement_object_type</ref>, <ref refid="classgraphene_1_1chain_1_1force__settlement__object" kindref="compound">force_settlement_object</ref> &gt;</type>
        <definition>typedef object_id&lt; protocol_ids, force_settlement_object_type, force_settlement_object&gt; graphene::chain::force_settlement_id_type</definition>
        <argsstring></argsstring>
        <name>force_settlement_id_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/types.hpp" line="181" column="1" bodyfile="libraries/chain/include/graphene/chain/protocol/types.hpp" bodystart="181" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1chain_1ab79292a0eac35523c6e76cae4b6b6fa4" prot="public" static="no">
        <type>object_id&lt; <ref refid="namespacegraphene_1_1chain_1a92e55d4242187696c5e2c5eaafbd9400a9dadbbe526b5096091138116c13d612d" kindref="member">protocol_ids</ref>, <ref refid="namespacegraphene_1_1chain_1aa6e32c79e2b22c998deddedcb696633da98d1de42a5d75aecbbad0b4af247da0c" kindref="member">committee_member_object_type</ref>, <ref refid="classgraphene_1_1chain_1_1committee__member__object" kindref="compound">committee_member_object</ref> &gt;</type>
        <definition>typedef object_id&lt; protocol_ids, committee_member_object_type, committee_member_object&gt; graphene::chain::committee_member_id_type</definition>
        <argsstring></argsstring>
        <name>committee_member_id_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/types.hpp" line="182" column="1" bodyfile="libraries/chain/include/graphene/chain/protocol/types.hpp" bodystart="182" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1chain_1ab7749ab4e10e21734e81c82e229657c0" prot="public" static="no">
        <type>object_id&lt; <ref refid="namespacegraphene_1_1chain_1a92e55d4242187696c5e2c5eaafbd9400a9dadbbe526b5096091138116c13d612d" kindref="member">protocol_ids</ref>, <ref refid="namespacegraphene_1_1chain_1aa6e32c79e2b22c998deddedcb696633da890c9fa15df9768e291236294ade6862" kindref="member">witness_object_type</ref>, <ref refid="classgraphene_1_1chain_1_1witness__object" kindref="compound">witness_object</ref> &gt;</type>
        <definition>typedef object_id&lt; protocol_ids, witness_object_type, witness_object&gt; graphene::chain::witness_id_type</definition>
        <argsstring></argsstring>
        <name>witness_id_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/types.hpp" line="183" column="1" bodyfile="libraries/chain/include/graphene/chain/protocol/types.hpp" bodystart="183" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1chain_1a9a84db1c3acc33b2fd7c8de9969a8e06" prot="public" static="no">
        <type>object_id&lt; <ref refid="namespacegraphene_1_1chain_1a92e55d4242187696c5e2c5eaafbd9400a9dadbbe526b5096091138116c13d612d" kindref="member">protocol_ids</ref>, <ref refid="namespacegraphene_1_1chain_1aa6e32c79e2b22c998deddedcb696633da3e9e54544b9f7e7b5343f6a7d95ea593" kindref="member">limit_order_object_type</ref>, <ref refid="classgraphene_1_1chain_1_1limit__order__object" kindref="compound">limit_order_object</ref> &gt;</type>
        <definition>typedef object_id&lt; protocol_ids, limit_order_object_type, limit_order_object&gt; graphene::chain::limit_order_id_type</definition>
        <argsstring></argsstring>
        <name>limit_order_id_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/types.hpp" line="184" column="1" bodyfile="libraries/chain/include/graphene/chain/protocol/types.hpp" bodystart="184" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1chain_1ab2e7fd4f1b02a118e20f26ec2028e3f3" prot="public" static="no">
        <type>object_id&lt; <ref refid="namespacegraphene_1_1chain_1a92e55d4242187696c5e2c5eaafbd9400a9dadbbe526b5096091138116c13d612d" kindref="member">protocol_ids</ref>, <ref refid="namespacegraphene_1_1chain_1aa6e32c79e2b22c998deddedcb696633da57ab9805df6108570f8928ea9b366a28" kindref="member">call_order_object_type</ref>, <ref refid="classgraphene_1_1chain_1_1call__order__object" kindref="compound">call_order_object</ref> &gt;</type>
        <definition>typedef object_id&lt; protocol_ids, call_order_object_type, call_order_object&gt; graphene::chain::call_order_id_type</definition>
        <argsstring></argsstring>
        <name>call_order_id_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/types.hpp" line="185" column="1" bodyfile="libraries/chain/include/graphene/chain/protocol/types.hpp" bodystart="185" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1chain_1afad43d6c0f7cc77d16e7110280307c0e" prot="public" static="no">
        <type>object_id&lt; <ref refid="namespacegraphene_1_1chain_1a92e55d4242187696c5e2c5eaafbd9400a9dadbbe526b5096091138116c13d612d" kindref="member">protocol_ids</ref>, <ref refid="namespacegraphene_1_1chain_1aa6e32c79e2b22c998deddedcb696633da99446062de32f7157a2dddcac9bca654" kindref="member">custom_object_type</ref>, custom_object &gt;</type>
        <definition>typedef object_id&lt; protocol_ids, custom_object_type, custom_object&gt; graphene::chain::custom_id_type</definition>
        <argsstring></argsstring>
        <name>custom_id_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/types.hpp" line="186" column="1" bodyfile="libraries/chain/include/graphene/chain/protocol/types.hpp" bodystart="186" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1chain_1a2af50d1432f0f4faf76130e684982a0b" prot="public" static="no">
        <type>object_id&lt; <ref refid="namespacegraphene_1_1chain_1a92e55d4242187696c5e2c5eaafbd9400a9dadbbe526b5096091138116c13d612d" kindref="member">protocol_ids</ref>, <ref refid="namespacegraphene_1_1chain_1aa6e32c79e2b22c998deddedcb696633da73d5f9d5fe8289ffcf39020fe2eb60b1" kindref="member">proposal_object_type</ref>, <ref refid="classgraphene_1_1chain_1_1proposal__object" kindref="compound">proposal_object</ref> &gt;</type>
        <definition>typedef object_id&lt; protocol_ids, proposal_object_type, proposal_object&gt; graphene::chain::proposal_id_type</definition>
        <argsstring></argsstring>
        <name>proposal_id_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/types.hpp" line="187" column="1" bodyfile="libraries/chain/include/graphene/chain/protocol/types.hpp" bodystart="187" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1chain_1ac95699e79dcc01de0d506840c1b7feb4" prot="public" static="no">
        <type>object_id&lt; <ref refid="namespacegraphene_1_1chain_1a92e55d4242187696c5e2c5eaafbd9400a9dadbbe526b5096091138116c13d612d" kindref="member">protocol_ids</ref>, <ref refid="namespacegraphene_1_1chain_1aa6e32c79e2b22c998deddedcb696633da43893adce4b622dcc95bcd89485c5600" kindref="member">operation_history_object_type</ref>, <ref refid="classgraphene_1_1chain_1_1operation__history__object" kindref="compound">operation_history_object</ref> &gt;</type>
        <definition>typedef object_id&lt; protocol_ids, operation_history_object_type, operation_history_object&gt; graphene::chain::operation_history_id_type</definition>
        <argsstring></argsstring>
        <name>operation_history_id_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/types.hpp" line="188" column="1" bodyfile="libraries/chain/include/graphene/chain/protocol/types.hpp" bodystart="188" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1chain_1ae1e7d73b3ea0bcf44a14b2487911736a" prot="public" static="no">
        <type>object_id&lt; <ref refid="namespacegraphene_1_1chain_1a92e55d4242187696c5e2c5eaafbd9400a9dadbbe526b5096091138116c13d612d" kindref="member">protocol_ids</ref>, <ref refid="namespacegraphene_1_1chain_1aa6e32c79e2b22c998deddedcb696633da3016c2ee306ae07ba695f2ba94c23a1d" kindref="member">withdraw_permission_object_type</ref>, <ref refid="classgraphene_1_1chain_1_1withdraw__permission__object" kindref="compound">withdraw_permission_object</ref> &gt;</type>
        <definition>typedef object_id&lt; protocol_ids, withdraw_permission_object_type,withdraw_permission_object&gt; graphene::chain::withdraw_permission_id_type</definition>
        <argsstring></argsstring>
        <name>withdraw_permission_id_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/types.hpp" line="189" column="1" bodyfile="libraries/chain/include/graphene/chain/protocol/types.hpp" bodystart="189" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1chain_1a3c7832a7fb78912c0bd3b8b50a19c3f1" prot="public" static="no">
        <type>object_id&lt; <ref refid="namespacegraphene_1_1chain_1a92e55d4242187696c5e2c5eaafbd9400a9dadbbe526b5096091138116c13d612d" kindref="member">protocol_ids</ref>, <ref refid="namespacegraphene_1_1chain_1aa6e32c79e2b22c998deddedcb696633da910ef1b8a52e0047fb3692cdaee9f9ee" kindref="member">vesting_balance_object_type</ref>, <ref refid="classgraphene_1_1chain_1_1vesting__balance__object" kindref="compound">vesting_balance_object</ref> &gt;</type>
        <definition>typedef object_id&lt; protocol_ids, vesting_balance_object_type, vesting_balance_object&gt; graphene::chain::vesting_balance_id_type</definition>
        <argsstring></argsstring>
        <name>vesting_balance_id_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/types.hpp" line="190" column="1" bodyfile="libraries/chain/include/graphene/chain/protocol/types.hpp" bodystart="190" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1chain_1a788ebe77ccf4041784c23540420eee0f" prot="public" static="no">
        <type>object_id&lt; <ref refid="namespacegraphene_1_1chain_1a92e55d4242187696c5e2c5eaafbd9400a9dadbbe526b5096091138116c13d612d" kindref="member">protocol_ids</ref>, <ref refid="namespacegraphene_1_1chain_1aa6e32c79e2b22c998deddedcb696633da139435e4b7046de50fa6d55bc73676d6" kindref="member">worker_object_type</ref>, <ref refid="classgraphene_1_1chain_1_1worker__object" kindref="compound">worker_object</ref> &gt;</type>
        <definition>typedef object_id&lt; protocol_ids, worker_object_type, worker_object&gt; graphene::chain::worker_id_type</definition>
        <argsstring></argsstring>
        <name>worker_id_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/types.hpp" line="191" column="1" bodyfile="libraries/chain/include/graphene/chain/protocol/types.hpp" bodystart="191" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1chain_1acd20e3f4b4f9cb5d8112cf5d97b3e259" prot="public" static="no">
        <type>object_id&lt; <ref refid="namespacegraphene_1_1chain_1a92e55d4242187696c5e2c5eaafbd9400a9dadbbe526b5096091138116c13d612d" kindref="member">protocol_ids</ref>, <ref refid="namespacegraphene_1_1chain_1aa6e32c79e2b22c998deddedcb696633da87cfe643d795d2b468fbc0bbf7b5d4ec" kindref="member">balance_object_type</ref>, <ref refid="classgraphene_1_1chain_1_1balance__object" kindref="compound">balance_object</ref> &gt;</type>
        <definition>typedef object_id&lt; protocol_ids, balance_object_type, balance_object&gt; graphene::chain::balance_id_type</definition>
        <argsstring></argsstring>
        <name>balance_id_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/types.hpp" line="192" column="1" bodyfile="libraries/chain/include/graphene/chain/protocol/types.hpp" bodystart="192" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1chain_1aef6560c0d921f49a2908bb3d0777ba94" prot="public" static="no">
        <type>object_id&lt; <ref refid="namespacegraphene_1_1chain_1a92e55d4242187696c5e2c5eaafbd9400a81f35c04f1d3f3109dacaa6f2bef33c7" kindref="member">implementation_ids</ref>, <ref refid="namespacegraphene_1_1chain_1ad3bef2f100b722a6c30fada38f6dcd73aa45da32677590afcdc9bb25ba6d6e51b" kindref="member">impl_global_property_object_type</ref>, <ref refid="classgraphene_1_1chain_1_1global__property__object" kindref="compound">global_property_object</ref> &gt;</type>
        <definition>typedef object_id&lt; implementation_ids, impl_global_property_object_type, global_property_object&gt; graphene::chain::global_property_id_type</definition>
        <argsstring></argsstring>
        <name>global_property_id_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/types.hpp" line="211" column="1" bodyfile="libraries/chain/include/graphene/chain/protocol/types.hpp" bodystart="209" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1chain_1aeb9c564c3992569cb603c0a6de821d3e" prot="public" static="no">
        <type>object_id&lt; <ref refid="namespacegraphene_1_1chain_1a92e55d4242187696c5e2c5eaafbd9400a81f35c04f1d3f3109dacaa6f2bef33c7" kindref="member">implementation_ids</ref>, <ref refid="namespacegraphene_1_1chain_1ad3bef2f100b722a6c30fada38f6dcd73a837a7ebbc012e3b81e667171e7c9b5a8" kindref="member">impl_dynamic_global_property_object_type</ref>, <ref refid="classgraphene_1_1chain_1_1dynamic__global__property__object" kindref="compound">dynamic_global_property_object</ref> &gt;</type>
        <definition>typedef object_id&lt; implementation_ids, impl_dynamic_global_property_object_type, dynamic_global_property_object&gt; graphene::chain::dynamic_global_property_id_type</definition>
        <argsstring></argsstring>
        <name>dynamic_global_property_id_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/types.hpp" line="212" column="1" bodyfile="libraries/chain/include/graphene/chain/protocol/types.hpp" bodystart="212" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1chain_1a6f7a444a2b082fd600fb61dd773d128b" prot="public" static="no">
        <type>object_id&lt; <ref refid="namespacegraphene_1_1chain_1a92e55d4242187696c5e2c5eaafbd9400a81f35c04f1d3f3109dacaa6f2bef33c7" kindref="member">implementation_ids</ref>, <ref refid="namespacegraphene_1_1chain_1ad3bef2f100b722a6c30fada38f6dcd73aad5e8a5f2ecdd9e3efe626fa48c549fb" kindref="member">impl_asset_dynamic_data_type</ref>, <ref refid="classgraphene_1_1chain_1_1asset__dynamic__data__object" kindref="compound">asset_dynamic_data_object</ref> &gt;</type>
        <definition>typedef object_id&lt; implementation_ids, impl_asset_dynamic_data_type, asset_dynamic_data_object&gt; graphene::chain::asset_dynamic_data_id_type</definition>
        <argsstring></argsstring>
        <name>asset_dynamic_data_id_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/types.hpp" line="213" column="1" bodyfile="libraries/chain/include/graphene/chain/protocol/types.hpp" bodystart="213" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1chain_1abd48ba1ebfcc2fd007dbbe91f54407aa" prot="public" static="no">
        <type>object_id&lt; <ref refid="namespacegraphene_1_1chain_1a92e55d4242187696c5e2c5eaafbd9400a81f35c04f1d3f3109dacaa6f2bef33c7" kindref="member">implementation_ids</ref>, <ref refid="namespacegraphene_1_1chain_1ad3bef2f100b722a6c30fada38f6dcd73ac0f8ddafa1862266e201e2fb7e6759d1" kindref="member">impl_asset_bitasset_data_type</ref>, <ref refid="classgraphene_1_1chain_1_1asset__bitasset__data__object" kindref="compound">asset_bitasset_data_object</ref> &gt;</type>
        <definition>typedef object_id&lt; implementation_ids, impl_asset_bitasset_data_type, asset_bitasset_data_object&gt; graphene::chain::asset_bitasset_data_id_type</definition>
        <argsstring></argsstring>
        <name>asset_bitasset_data_id_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/types.hpp" line="214" column="1" bodyfile="libraries/chain/include/graphene/chain/protocol/types.hpp" bodystart="214" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1chain_1a1b76ad0aa6ebbfd3956fb923bf2e244f" prot="public" static="no">
        <type>object_id&lt; <ref refid="namespacegraphene_1_1chain_1a92e55d4242187696c5e2c5eaafbd9400a81f35c04f1d3f3109dacaa6f2bef33c7" kindref="member">implementation_ids</ref>, <ref refid="namespacegraphene_1_1chain_1ad3bef2f100b722a6c30fada38f6dcd73a2bc50158441fc95b231f9d1d2f9b6c89" kindref="member">impl_account_balance_object_type</ref>, <ref refid="classgraphene_1_1chain_1_1account__balance__object" kindref="compound">account_balance_object</ref> &gt;</type>
        <definition>typedef object_id&lt; implementation_ids, impl_account_balance_object_type, account_balance_object&gt; graphene::chain::account_balance_id_type</definition>
        <argsstring></argsstring>
        <name>account_balance_id_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/types.hpp" line="215" column="1" bodyfile="libraries/chain/include/graphene/chain/protocol/types.hpp" bodystart="215" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1chain_1ab7bfd382b5c45b5e2c00965eb6b67efa" prot="public" static="no">
        <type>object_id&lt; <ref refid="namespacegraphene_1_1chain_1a92e55d4242187696c5e2c5eaafbd9400a81f35c04f1d3f3109dacaa6f2bef33c7" kindref="member">implementation_ids</ref>, <ref refid="namespacegraphene_1_1chain_1ad3bef2f100b722a6c30fada38f6dcd73aac0cb1b1784f0ee58ae34a1c2b3f3df1" kindref="member">impl_account_statistics_object_type</ref>, <ref refid="classgraphene_1_1chain_1_1account__statistics__object" kindref="compound">account_statistics_object</ref> &gt;</type>
        <definition>typedef object_id&lt; implementation_ids, impl_account_statistics_object_type,account_statistics_object&gt; graphene::chain::account_statistics_id_type</definition>
        <argsstring></argsstring>
        <name>account_statistics_id_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/types.hpp" line="216" column="1" bodyfile="libraries/chain/include/graphene/chain/protocol/types.hpp" bodystart="216" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1chain_1adecc1df47c8c4b0f22c36a9b6517d681" prot="public" static="no">
        <type>object_id&lt; <ref refid="namespacegraphene_1_1chain_1a92e55d4242187696c5e2c5eaafbd9400a81f35c04f1d3f3109dacaa6f2bef33c7" kindref="member">implementation_ids</ref>, <ref refid="namespacegraphene_1_1chain_1ad3bef2f100b722a6c30fada38f6dcd73a368561f04146a9649902faa8b016b5aa" kindref="member">impl_transaction_object_type</ref>, <ref refid="classgraphene_1_1chain_1_1transaction__object" kindref="compound">transaction_object</ref> &gt;</type>
        <definition>typedef object_id&lt; implementation_ids, impl_transaction_object_type, transaction_object&gt; graphene::chain::transaction_obj_id_type</definition>
        <argsstring></argsstring>
        <name>transaction_obj_id_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/types.hpp" line="217" column="1" bodyfile="libraries/chain/include/graphene/chain/protocol/types.hpp" bodystart="217" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1chain_1aa525be941e400a08c8a24907a950bf40" prot="public" static="no">
        <type>object_id&lt; <ref refid="namespacegraphene_1_1chain_1a92e55d4242187696c5e2c5eaafbd9400a81f35c04f1d3f3109dacaa6f2bef33c7" kindref="member">implementation_ids</ref>, <ref refid="namespacegraphene_1_1chain_1ad3bef2f100b722a6c30fada38f6dcd73a650137ba77eb1c6a7bd45de1f8d34bc1" kindref="member">impl_block_summary_object_type</ref>, <ref refid="classgraphene_1_1chain_1_1block__summary__object" kindref="compound">block_summary_object</ref> &gt;</type>
        <definition>typedef object_id&lt; implementation_ids, impl_block_summary_object_type, block_summary_object&gt; graphene::chain::block_summary_id_type</definition>
        <argsstring></argsstring>
        <name>block_summary_id_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/types.hpp" line="218" column="1" bodyfile="libraries/chain/include/graphene/chain/protocol/types.hpp" bodystart="218" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1chain_1a55238260801231918a43259ed4e3e29f" prot="public" static="no">
        <type>object_id&lt; <ref refid="namespacegraphene_1_1chain_1a92e55d4242187696c5e2c5eaafbd9400a81f35c04f1d3f3109dacaa6f2bef33c7" kindref="member">implementation_ids</ref>, <ref refid="namespacegraphene_1_1chain_1ad3bef2f100b722a6c30fada38f6dcd73a273d6d1dd112904e2a6a24e4a8772b12" kindref="member">impl_account_transaction_history_object_type</ref>, <ref refid="classgraphene_1_1chain_1_1account__transaction__history__object" kindref="compound">account_transaction_history_object</ref> &gt;</type>
        <definition>typedef object_id&lt; implementation_ids, impl_account_transaction_history_object_type, account_transaction_history_object&gt; graphene::chain::account_transaction_history_id_type</definition>
        <argsstring></argsstring>
        <name>account_transaction_history_id_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/types.hpp" line="222" column="1" bodyfile="libraries/chain/include/graphene/chain/protocol/types.hpp" bodystart="222" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1chain_1a0c16f45fde84151d6801f2e5dd26be4f" prot="public" static="no">
        <type>object_id&lt; <ref refid="namespacegraphene_1_1chain_1a92e55d4242187696c5e2c5eaafbd9400a81f35c04f1d3f3109dacaa6f2bef33c7" kindref="member">implementation_ids</ref>, <ref refid="namespacegraphene_1_1chain_1ad3bef2f100b722a6c30fada38f6dcd73a06c5be035f391ce73d06d976c6881027" kindref="member">impl_chain_property_object_type</ref>, <ref refid="classgraphene_1_1chain_1_1chain__property__object" kindref="compound">chain_property_object</ref> &gt;</type>
        <definition>typedef object_id&lt; implementation_ids, impl_chain_property_object_type, chain_property_object&gt; graphene::chain::chain_property_id_type</definition>
        <argsstring></argsstring>
        <name>chain_property_id_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/types.hpp" line="223" column="1" bodyfile="libraries/chain/include/graphene/chain/protocol/types.hpp" bodystart="223" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1chain_1a0a1619b5658f5eac4f0d13df44f58659" prot="public" static="no">
        <type>object_id&lt; <ref refid="namespacegraphene_1_1chain_1a92e55d4242187696c5e2c5eaafbd9400a81f35c04f1d3f3109dacaa6f2bef33c7" kindref="member">implementation_ids</ref>, <ref refid="namespacegraphene_1_1chain_1ad3bef2f100b722a6c30fada38f6dcd73a344ace874a02d31a31651328e080e91a" kindref="member">impl_witness_schedule_object_type</ref>, <ref refid="classgraphene_1_1chain_1_1witness__schedule__object" kindref="compound">witness_schedule_object</ref> &gt;</type>
        <definition>typedef object_id&lt; implementation_ids, impl_witness_schedule_object_type, witness_schedule_object&gt; graphene::chain::witness_schedule_id_type</definition>
        <argsstring></argsstring>
        <name>witness_schedule_id_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/types.hpp" line="224" column="1" bodyfile="libraries/chain/include/graphene/chain/protocol/types.hpp" bodystart="224" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1chain_1a099a839fe65d5b1148f713db000f08db" prot="public" static="no">
        <type>object_id&lt; <ref refid="namespacegraphene_1_1chain_1a92e55d4242187696c5e2c5eaafbd9400a81f35c04f1d3f3109dacaa6f2bef33c7" kindref="member">implementation_ids</ref>, <ref refid="namespacegraphene_1_1chain_1ad3bef2f100b722a6c30fada38f6dcd73a8b4ffc45235b1f894dd7cb703cfde831" kindref="member">impl_budget_record_object_type</ref>, <ref refid="classgraphene_1_1chain_1_1budget__record__object" kindref="compound">budget_record_object</ref> &gt;</type>
        <definition>typedef object_id&lt; implementation_ids, impl_budget_record_object_type, budget_record_object &gt; graphene::chain::budget_record_id_type</definition>
        <argsstring></argsstring>
        <name>budget_record_id_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/types.hpp" line="225" column="1" bodyfile="libraries/chain/include/graphene/chain/protocol/types.hpp" bodystart="225" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1chain_1a2fedd4e326e2b143e0188eb79cd7183e" prot="public" static="no">
        <type>object_id&lt; <ref refid="namespacegraphene_1_1chain_1a92e55d4242187696c5e2c5eaafbd9400a81f35c04f1d3f3109dacaa6f2bef33c7" kindref="member">implementation_ids</ref>, <ref refid="namespacegraphene_1_1chain_1ad3bef2f100b722a6c30fada38f6dcd73a2277aa0cdb0fda1e3f2c7e6d1cafb7c0" kindref="member">impl_blinded_balance_object_type</ref>, <ref refid="classgraphene_1_1chain_1_1blinded__balance__object" kindref="compound">blinded_balance_object</ref> &gt;</type>
        <definition>typedef object_id&lt; implementation_ids, impl_blinded_balance_object_type, blinded_balance_object &gt; graphene::chain::blinded_balance_id_type</definition>
        <argsstring></argsstring>
        <name>blinded_balance_id_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/types.hpp" line="226" column="1" bodyfile="libraries/chain/include/graphene/chain/protocol/types.hpp" bodystart="226" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1chain_1a887b63c98193b3b654edfd6ef6bd4a77" prot="public" static="no">
        <type>object_id&lt; <ref refid="namespacegraphene_1_1chain_1a92e55d4242187696c5e2c5eaafbd9400a81f35c04f1d3f3109dacaa6f2bef33c7" kindref="member">implementation_ids</ref>, <ref refid="namespacegraphene_1_1chain_1ad3bef2f100b722a6c30fada38f6dcd73a9d63a3647a2db0610d19742509c51e32" kindref="member">impl_special_authority_object_type</ref>, <ref refid="classgraphene_1_1chain_1_1special__authority__object" kindref="compound">special_authority_object</ref> &gt;</type>
        <definition>typedef object_id&lt; implementation_ids, impl_special_authority_object_type, special_authority_object &gt; graphene::chain::special_authority_id_type</definition>
        <argsstring></argsstring>
        <name>special_authority_id_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/types.hpp" line="227" column="1" bodyfile="libraries/chain/include/graphene/chain/protocol/types.hpp" bodystart="227" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1chain_1ab810d1e3d1612634e0ae55ee1c2c2521" prot="public" static="no">
        <type>object_id&lt; <ref refid="namespacegraphene_1_1chain_1a92e55d4242187696c5e2c5eaafbd9400a81f35c04f1d3f3109dacaa6f2bef33c7" kindref="member">implementation_ids</ref>, <ref refid="namespacegraphene_1_1chain_1ad3bef2f100b722a6c30fada38f6dcd73a7a94b2d29fe39e6d30d5b3c5eb7ec42b" kindref="member">impl_buyback_object_type</ref>, <ref refid="classgraphene_1_1chain_1_1buyback__object" kindref="compound">buyback_object</ref> &gt;</type>
        <definition>typedef object_id&lt; implementation_ids, impl_buyback_object_type, buyback_object &gt; graphene::chain::buyback_id_type</definition>
        <argsstring></argsstring>
        <name>buyback_id_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/types.hpp" line="228" column="1" bodyfile="libraries/chain/include/graphene/chain/protocol/types.hpp" bodystart="228" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1chain_1ae028c4bc900cad37bb0ae88921582119" prot="public" static="no">
        <type>object_id&lt; <ref refid="namespacegraphene_1_1chain_1a92e55d4242187696c5e2c5eaafbd9400a81f35c04f1d3f3109dacaa6f2bef33c7" kindref="member">implementation_ids</ref>, <ref refid="namespacegraphene_1_1chain_1ad3bef2f100b722a6c30fada38f6dcd73a7734519967f0d47d3613ccfccb4ab0d7" kindref="member">impl_fba_accumulator_object_type</ref>, <ref refid="classgraphene_1_1chain_1_1fba__accumulator__object" kindref="compound">fba_accumulator_object</ref> &gt;</type>
        <definition>typedef object_id&lt; implementation_ids, impl_fba_accumulator_object_type, fba_accumulator_object &gt; graphene::chain::fba_accumulator_id_type</definition>
        <argsstring></argsstring>
        <name>fba_accumulator_id_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/types.hpp" line="229" column="1" bodyfile="libraries/chain/include/graphene/chain/protocol/types.hpp" bodystart="229" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1chain_1a986241e0a89e7b8b58d00179f7fb3c0a" prot="public" static="no">
        <type>fc::array&lt; char, <ref refid="config_8hpp_1a46a75a8e2355492632d5563e92126143" kindref="member">GRAPHENE_MAX_ASSET_SYMBOL_LENGTH</ref> &gt;</type>
        <definition>typedef fc::array&lt;char, GRAPHENE_MAX_ASSET_SYMBOL_LENGTH&gt; graphene::chain::symbol_type</definition>
        <argsstring></argsstring>
        <name>symbol_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/types.hpp" line="231" column="1" bodyfile="libraries/chain/include/graphene/chain/protocol/types.hpp" bodystart="231" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1chain_1a314b030d7a6107c5641fd9945da7f568" prot="public" static="no">
        <type>fc::ripemd160</type>
        <definition>typedef fc::ripemd160 graphene::chain::block_id_type</definition>
        <argsstring></argsstring>
        <name>block_id_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/types.hpp" line="232" column="1" bodyfile="libraries/chain/include/graphene/chain/protocol/types.hpp" bodystart="232" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1chain_1a5633796771f52472f32b7bff8d613797" prot="public" static="no">
        <type>fc::ripemd160</type>
        <definition>typedef fc::ripemd160 graphene::chain::checksum_type</definition>
        <argsstring></argsstring>
        <name>checksum_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/types.hpp" line="233" column="1" bodyfile="libraries/chain/include/graphene/chain/protocol/types.hpp" bodystart="233" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1chain_1adc38ef0a36d8b8dfcef2cbbcacb6d1e8" prot="public" static="no">
        <type>fc::ripemd160</type>
        <definition>typedef fc::ripemd160 graphene::chain::transaction_id_type</definition>
        <argsstring></argsstring>
        <name>transaction_id_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/types.hpp" line="234" column="1" bodyfile="libraries/chain/include/graphene/chain/protocol/types.hpp" bodystart="234" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1chain_1a575e2ea493a5e8f4d2888ee753084596" prot="public" static="no">
        <type>fc::sha256</type>
        <definition>typedef fc::sha256 graphene::chain::digest_type</definition>
        <argsstring></argsstring>
        <name>digest_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/types.hpp" line="235" column="1" bodyfile="libraries/chain/include/graphene/chain/protocol/types.hpp" bodystart="235" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1chain_1aed41249e2d1e1e56e91d68da30cbddad" prot="public" static="no">
        <type>fc::ecc::compact_signature</type>
        <definition>typedef fc::ecc::compact_signature graphene::chain::signature_type</definition>
        <argsstring></argsstring>
        <name>signature_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/types.hpp" line="236" column="1" bodyfile="libraries/chain/include/graphene/chain/protocol/types.hpp" bodystart="236" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1chain_1ab4bea4aef5fe40c66b42537da931bffe" prot="public" static="no">
        <type>safe&lt; int64_t &gt;</type>
        <definition>typedef safe&lt;int64_t&gt; graphene::chain::share_type</definition>
        <argsstring></argsstring>
        <name>share_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/types.hpp" line="237" column="1" bodyfile="libraries/chain/include/graphene/chain/protocol/types.hpp" bodystart="237" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1chain_1abfad0b3a88dd91b907bc0199ded6768c" prot="public" static="no">
        <type>uint16_t</type>
        <definition>typedef uint16_t graphene::chain::weight_type</definition>
        <argsstring></argsstring>
        <name>weight_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/types.hpp" line="238" column="1" bodyfile="libraries/chain/include/graphene/chain/protocol/types.hpp" bodystart="238" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1chain_1a194569e75a13cff8d7d1f97f24743b6e" prot="public" static="no">
        <type>fc::static_variant&lt; <ref refid="structgraphene_1_1chain_1_1linear__vesting__policy__initializer" kindref="compound">linear_vesting_policy_initializer</ref>, <ref refid="structgraphene_1_1chain_1_1cdd__vesting__policy__initializer" kindref="compound">cdd_vesting_policy_initializer</ref> &gt;</type>
        <definition>typedef fc::static_variant&lt;linear_vesting_policy_initializer, cdd_vesting_policy_initializer&gt; graphene::chain::vesting_policy_initializer</definition>
        <argsstring></argsstring>
        <name>vesting_policy_initializer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/vesting.hpp" line="45" column="1" bodyfile="libraries/chain/include/graphene/chain/protocol/vesting.hpp" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__workers_1ga13df48976822df52f83ec69a458e4d46" prot="public" static="no">
        <type>static_variant&lt; <ref refid="structgraphene_1_1chain_1_1refund__worker__initializer" kindref="compound">refund_worker_initializer</ref>, <ref refid="structgraphene_1_1chain_1_1vesting__balance__worker__initializer" kindref="compound">vesting_balance_worker_initializer</ref>, <ref refid="structgraphene_1_1chain_1_1burn__worker__initializer" kindref="compound">burn_worker_initializer</ref> &gt;</type>
        <definition>typedef static_variant&lt; refund_worker_initializer, vesting_balance_worker_initializer, burn_worker_initializer &gt; graphene::chain::worker_initializer</definition>
        <argsstring></argsstring>
        <name>worker_initializer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/worker.hpp" line="70" column="1" bodyfile="libraries/chain/include/graphene/chain/protocol/worker.hpp" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1chain_1a8ba4f8afbe95a825f0c3cf2992c209de" prot="public" static="no">
        <type>multi_index_container&lt; <ref refid="classgraphene_1_1chain_1_1special__authority__object" kindref="compound">special_authority_object</ref>, indexed_by&lt; ordered_unique&lt; tag&lt; by_id &gt;, member&lt; object, object_id_type, &amp;object::id &gt; &gt;, ordered_unique&lt; tag&lt; by_account &gt;, member&lt; <ref refid="classgraphene_1_1chain_1_1special__authority__object" kindref="compound">special_authority_object</ref>, <ref refid="namespacegraphene_1_1chain_1a11927fb343f953514ab6235d6e7233ee" kindref="member">account_id_type</ref>, &amp;<ref refid="classgraphene_1_1chain_1_1special__authority__object_1a4a81ab5af2a9da10b8093c1aea58d83c" kindref="member">special_authority_object::account</ref> &gt; &gt; &gt;&gt;</type>
        <definition>typedef multi_index_container&lt; special_authority_object, indexed_by&lt; ordered_unique&lt; tag&lt;by_id&gt;, member&lt; object, object_id_type, &amp;object::id &gt; &gt;, ordered_unique&lt; tag&lt;by_account&gt;, member&lt; special_authority_object, account_id_type, &amp;special_authority_object::account&gt; &gt; &gt;&gt; graphene::chain::special_authority_multi_index_type</definition>
        <argsstring></argsstring>
        <name>special_authority_multi_index_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/special_authority_object.hpp" line="60" column="1" bodyfile="libraries/chain/include/graphene/chain/special_authority_object.hpp" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1chain_1adb4a7278fc672d4e6dab3163222aa92b" prot="public" static="no">
        <type>generic_index&lt; <ref refid="classgraphene_1_1chain_1_1special__authority__object" kindref="compound">special_authority_object</ref>, <ref refid="namespacegraphene_1_1chain_1a8ba4f8afbe95a825f0c3cf2992c209de" kindref="member">special_authority_multi_index_type</ref> &gt;</type>
        <definition>typedef generic_index&lt; special_authority_object, special_authority_multi_index_type &gt; graphene::chain::special_authority_index</definition>
        <argsstring></argsstring>
        <name>special_authority_index</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/special_authority_object.hpp" line="62" column="1" bodyfile="libraries/chain/include/graphene/chain/special_authority_object.hpp" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1chain_1ad74248d2246b431ee1c28a3a4a36ef1f" prot="public" static="no">
        <type>multi_index_container&lt; <ref refid="classgraphene_1_1chain_1_1transaction__object" kindref="compound">transaction_object</ref>, indexed_by&lt; ordered_unique&lt; tag&lt; by_id &gt;, member&lt; object, object_id_type, &amp;object::id &gt; &gt;, hashed_unique&lt; tag&lt; by_trx_id &gt;, BOOST_MULTI_INDEX_MEMBER(<ref refid="classgraphene_1_1chain_1_1transaction__object" kindref="compound">transaction_object</ref>, <ref refid="namespacegraphene_1_1chain_1adc38ef0a36d8b8dfcef2cbbcacb6d1e8" kindref="member">transaction_id_type</ref>, trx_id), std::hash&lt; <ref refid="namespacegraphene_1_1chain_1adc38ef0a36d8b8dfcef2cbbcacb6d1e8" kindref="member">transaction_id_type</ref> &gt; &gt;, ordered_non_unique&lt; tag&lt; <ref refid="structgraphene_1_1chain_1_1by__expiration" kindref="compound">by_expiration</ref> &gt;, const_mem_fun&lt; <ref refid="classgraphene_1_1chain_1_1transaction__object" kindref="compound">transaction_object</ref>, time_point_sec, &amp;<ref refid="classgraphene_1_1chain_1_1transaction__object_1ab11da549204dd6cb23f5b40c0d402275" kindref="member">transaction_object::get_expiration</ref> &gt; &gt; &gt; &gt;</type>
        <definition>typedef multi_index_container&lt; transaction_object, indexed_by&lt; ordered_unique&lt; tag&lt;by_id&gt;, member&lt; object, object_id_type, &amp;object::id &gt; &gt;, hashed_unique&lt; tag&lt;by_trx_id&gt;, BOOST_MULTI_INDEX_MEMBER(transaction_object, transaction_id_type, trx_id), std::hash&lt;transaction_id_type&gt; &gt;, ordered_non_unique&lt; tag&lt;by_expiration&gt;, const_mem_fun&lt;transaction_object, time_point_sec, &amp;transaction_object::get_expiration &gt; &gt; &gt; &gt; graphene::chain::transaction_multi_index_type</definition>
        <argsstring></argsstring>
        <name>transaction_multi_index_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/transaction_object.hpp" line="69" column="1" bodyfile="libraries/chain/include/graphene/chain/transaction_object.hpp" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1chain_1ab3e5b06d71ab8f619e7141c2ffad1536" prot="public" static="no">
        <type>generic_index&lt; <ref refid="classgraphene_1_1chain_1_1transaction__object" kindref="compound">transaction_object</ref>, <ref refid="namespacegraphene_1_1chain_1ad74248d2246b431ee1c28a3a4a36ef1f" kindref="member">transaction_multi_index_type</ref> &gt;</type>
        <definition>typedef generic_index&lt;transaction_object, transaction_multi_index_type&gt; graphene::chain::transaction_index</definition>
        <argsstring></argsstring>
        <name>transaction_index</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/transaction_object.hpp" line="71" column="1" bodyfile="libraries/chain/include/graphene/chain/transaction_object.hpp" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1chain_1a53807c77a8d2a7efb30e13b772e99b3a" prot="public" static="no">
        <type>fc::static_variant&lt; <ref refid="structgraphene_1_1chain_1_1linear__vesting__policy" kindref="compound">linear_vesting_policy</ref>, <ref refid="structgraphene_1_1chain_1_1cdd__vesting__policy" kindref="compound">cdd_vesting_policy</ref> &gt;</type>
        <definition>typedef fc::static_variant&lt; linear_vesting_policy, cdd_vesting_policy &gt; graphene::chain::vesting_policy</definition>
        <argsstring></argsstring>
        <name>vesting_policy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/vesting_balance_object.hpp" line="125" column="1" bodyfile="libraries/chain/include/graphene/chain/vesting_balance_object.hpp" bodystart="125" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1chain_1af3ffe5ca8fd7dbe899aca8f78f36a2b7" prot="public" static="no">
        <type>multi_index_container&lt; <ref refid="classgraphene_1_1chain_1_1vesting__balance__object" kindref="compound">vesting_balance_object</ref>, indexed_by&lt; ordered_unique&lt; tag&lt; by_id &gt;, member&lt; object, object_id_type, &amp;object::id &gt; &gt;, ordered_non_unique&lt; tag&lt; by_account &gt;, member&lt; <ref refid="classgraphene_1_1chain_1_1vesting__balance__object" kindref="compound">vesting_balance_object</ref>, <ref refid="namespacegraphene_1_1chain_1a11927fb343f953514ab6235d6e7233ee" kindref="member">account_id_type</ref>, &amp;<ref refid="classgraphene_1_1chain_1_1vesting__balance__object_1a67fcfc288de5c0094d1d97ccf4c67108" kindref="member">vesting_balance_object::owner</ref> &gt; &gt; &gt; &gt;</type>
        <definition>typedef multi_index_container&lt; vesting_balance_object, indexed_by&lt; ordered_unique&lt; tag&lt;by_id&gt;, member&lt; object, object_id_type, &amp;object::id &gt; &gt;, ordered_non_unique&lt; tag&lt;by_account&gt;, member&lt;vesting_balance_object, account_id_type, &amp;vesting_balance_object::owner&gt; &gt; &gt; &gt; graphene::chain::vesting_balance_multi_index_type</definition>
        <argsstring></argsstring>
        <name>vesting_balance_multi_index_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/vesting_balance_object.hpp" line="182" column="1" bodyfile="libraries/chain/include/graphene/chain/vesting_balance_object.hpp" bodystart="173" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1chain_1ab04613b07ed5a248119544dce7824ea4" prot="public" static="no">
        <type>generic_index&lt; <ref refid="classgraphene_1_1chain_1_1vesting__balance__object" kindref="compound">vesting_balance_object</ref>, <ref refid="namespacegraphene_1_1chain_1af3ffe5ca8fd7dbe899aca8f78f36a2b7" kindref="member">vesting_balance_multi_index_type</ref> &gt;</type>
        <definition>typedef generic_index&lt;vesting_balance_object, vesting_balance_multi_index_type&gt; graphene::chain::vesting_balance_index</definition>
        <argsstring></argsstring>
        <name>vesting_balance_index</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/vesting_balance_object.hpp" line="186" column="1" bodyfile="libraries/chain/include/graphene/chain/vesting_balance_object.hpp" bodystart="186" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1chain_1a30912eb7ae8ddcbc58e6b62c5be237d0" prot="public" static="no">
        <type>multi_index_container&lt; <ref refid="classgraphene_1_1chain_1_1withdraw__permission__object" kindref="compound">withdraw_permission_object</ref>, indexed_by&lt; ordered_unique&lt; tag&lt; by_id &gt;, member&lt; object, object_id_type, &amp;object::id &gt; &gt;, ordered_unique&lt; tag&lt; by_from &gt;, composite_key&lt; <ref refid="classgraphene_1_1chain_1_1withdraw__permission__object" kindref="compound">withdraw_permission_object</ref>, member&lt; <ref refid="classgraphene_1_1chain_1_1withdraw__permission__object" kindref="compound">withdraw_permission_object</ref>, <ref refid="namespacegraphene_1_1chain_1a11927fb343f953514ab6235d6e7233ee" kindref="member">account_id_type</ref>, &amp;<ref refid="classgraphene_1_1chain_1_1withdraw__permission__object_1ad0625fbe1d350edecf66799080675dc6" kindref="member">withdraw_permission_object::withdraw_from_account</ref> &gt;, member&lt; object, object_id_type, &amp;object::id &gt; &gt; &gt;, ordered_unique&lt; tag&lt; by_authorized &gt;, composite_key&lt; <ref refid="classgraphene_1_1chain_1_1withdraw__permission__object" kindref="compound">withdraw_permission_object</ref>, member&lt; <ref refid="classgraphene_1_1chain_1_1withdraw__permission__object" kindref="compound">withdraw_permission_object</ref>, <ref refid="namespacegraphene_1_1chain_1a11927fb343f953514ab6235d6e7233ee" kindref="member">account_id_type</ref>, &amp;<ref refid="classgraphene_1_1chain_1_1withdraw__permission__object_1a08e2473a992ea8090180c8a9705abd95" kindref="member">withdraw_permission_object::authorized_account</ref> &gt;, member&lt; object, object_id_type, &amp;object::id &gt; &gt; &gt;, ordered_unique&lt; tag&lt; <ref refid="structgraphene_1_1chain_1_1by__expiration" kindref="compound">by_expiration</ref> &gt;, composite_key&lt; <ref refid="classgraphene_1_1chain_1_1withdraw__permission__object" kindref="compound">withdraw_permission_object</ref>, member&lt; <ref refid="classgraphene_1_1chain_1_1withdraw__permission__object" kindref="compound">withdraw_permission_object</ref>, time_point_sec, &amp;<ref refid="classgraphene_1_1chain_1_1withdraw__permission__object_1aee496512e5274d67e09bb0071c001a82" kindref="member">withdraw_permission_object::expiration</ref> &gt;, member&lt; object, object_id_type, &amp;object::id &gt; &gt; &gt; &gt; &gt;</type>
        <definition>typedef multi_index_container&lt; withdraw_permission_object, indexed_by&lt; ordered_unique&lt; tag&lt;by_id&gt;, member&lt; object, object_id_type, &amp;object::id &gt; &gt;, ordered_unique&lt; tag&lt;by_from&gt;, composite_key&lt; withdraw_permission_object, member&lt;withdraw_permission_object, account_id_type, &amp;withdraw_permission_object::withdraw_from_account&gt;, member&lt; object, object_id_type, &amp;object::id &gt; &gt; &gt;, ordered_unique&lt; tag&lt;by_authorized&gt;, composite_key&lt; withdraw_permission_object, member&lt;withdraw_permission_object, account_id_type, &amp;withdraw_permission_object::authorized_account&gt;, member&lt; object, object_id_type, &amp;object::id &gt; &gt; &gt;, ordered_unique&lt; tag&lt;by_expiration&gt;, composite_key&lt; withdraw_permission_object, member&lt;withdraw_permission_object, time_point_sec, &amp;withdraw_permission_object::expiration&gt;, member&lt; object, object_id_type, &amp;object::id &gt; &gt; &gt; &gt; &gt; graphene::chain::withdraw_permission_object_multi_index_type</definition>
        <argsstring></argsstring>
        <name>withdraw_permission_object_multi_index_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/withdraw_permission_object.hpp" line="101" column="1" bodyfile="libraries/chain/include/graphene/chain/withdraw_permission_object.hpp" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1chain_1a448e9811f840d88cab8b0dbb7057a4a4" prot="public" static="no">
        <type>generic_index&lt; <ref refid="classgraphene_1_1chain_1_1withdraw__permission__object" kindref="compound">withdraw_permission_object</ref>, <ref refid="namespacegraphene_1_1chain_1a30912eb7ae8ddcbc58e6b62c5be237d0" kindref="member">withdraw_permission_object_multi_index_type</ref> &gt;</type>
        <definition>typedef generic_index&lt;withdraw_permission_object, withdraw_permission_object_multi_index_type&gt; graphene::chain::withdraw_permission_index</definition>
        <argsstring></argsstring>
        <name>withdraw_permission_index</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/withdraw_permission_object.hpp" line="103" column="1" bodyfile="libraries/chain/include/graphene/chain/withdraw_permission_object.hpp" bodystart="103" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1chain_1aa0f051c3b803688473930d49a98ec8e2" prot="public" static="no">
        <type>multi_index_container&lt; <ref refid="classgraphene_1_1chain_1_1witness__object" kindref="compound">witness_object</ref>, indexed_by&lt; ordered_unique&lt; tag&lt; by_id &gt;, member&lt; object, object_id_type, &amp;object::id &gt; &gt;, ordered_unique&lt; tag&lt; by_account &gt;, member&lt; <ref refid="classgraphene_1_1chain_1_1witness__object" kindref="compound">witness_object</ref>, <ref refid="namespacegraphene_1_1chain_1a11927fb343f953514ab6235d6e7233ee" kindref="member">account_id_type</ref>, &amp;<ref refid="classgraphene_1_1chain_1_1witness__object_1a64388167dad5135a79764204baaffe6e" kindref="member">witness_object::witness_account</ref> &gt; &gt;, ordered_unique&lt; tag&lt; by_vote_id &gt;, member&lt; <ref refid="classgraphene_1_1chain_1_1witness__object" kindref="compound">witness_object</ref>, <ref refid="structgraphene_1_1chain_1_1vote__id__type" kindref="compound">vote_id_type</ref>, &amp;<ref refid="classgraphene_1_1chain_1_1witness__object_1aa9ae30d474319543424c6156b11e3a1e" kindref="member">witness_object::vote_id</ref> &gt; &gt; &gt; &gt;</type>
        <definition>using graphene::chain::witness_multi_index_type = typedef multi_index_container&lt; witness_object, indexed_by&lt; ordered_unique&lt; tag&lt;by_id&gt;, member&lt;object, object_id_type, &amp;object::id&gt; &gt;, ordered_unique&lt; tag&lt;by_account&gt;, member&lt;witness_object, account_id_type, &amp;witness_object::witness_account&gt; &gt;, ordered_unique&lt; tag&lt;by_vote_id&gt;, member&lt;witness_object, vote_id_type, &amp;witness_object::vote_id&gt; &gt; &gt; &gt;</definition>
        <argsstring></argsstring>
        <name>witness_multi_index_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/witness_object.hpp" line="56" column="1" bodyfile="libraries/chain/include/graphene/chain/witness_object.hpp" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1chain_1a98ada320d7732377d0913aa7efafd4ba" prot="public" static="no">
        <type>generic_index&lt; <ref refid="classgraphene_1_1chain_1_1witness__object" kindref="compound">witness_object</ref>, <ref refid="namespacegraphene_1_1chain_1aa0f051c3b803688473930d49a98ec8e2" kindref="member">witness_multi_index_type</ref> &gt;</type>
        <definition>using graphene::chain::witness_index = typedef generic_index&lt;witness_object, witness_multi_index_type&gt;</definition>
        <argsstring></argsstring>
        <name>witness_index</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/witness_object.hpp" line="70" column="1" bodyfile="libraries/chain/include/graphene/chain/witness_object.hpp" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1chain_1aff2faab1253f21209aaad5771fdda38c" prot="public" static="no">
        <type>static_variant&lt; <ref refid="structgraphene_1_1chain_1_1refund__worker__type" kindref="compound">refund_worker_type</ref>, <ref refid="structgraphene_1_1chain_1_1vesting__balance__worker__type" kindref="compound">vesting_balance_worker_type</ref>, <ref refid="structgraphene_1_1chain_1_1burn__worker__type" kindref="compound">burn_worker_type</ref> &gt;</type>
        <definition>typedef static_variant&lt; refund_worker_type, vesting_balance_worker_type, burn_worker_type&gt; graphene::chain::worker_type</definition>
        <argsstring></argsstring>
        <name>worker_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/worker_object.hpp" line="99" column="1" bodyfile="libraries/chain/include/graphene/chain/worker_object.hpp" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1chain_1ab64de8d6045f62c2e57025a092c9d153" prot="public" static="no">
        <type>multi_index_container&lt; <ref refid="classgraphene_1_1chain_1_1worker__object" kindref="compound">worker_object</ref>, indexed_by&lt; ordered_unique&lt; tag&lt; by_id &gt;, member&lt; object, object_id_type, &amp;object::id &gt; &gt;, ordered_non_unique&lt; tag&lt; by_account &gt;, member&lt; <ref refid="classgraphene_1_1chain_1_1worker__object" kindref="compound">worker_object</ref>, <ref refid="namespacegraphene_1_1chain_1a11927fb343f953514ab6235d6e7233ee" kindref="member">account_id_type</ref>, &amp;<ref refid="classgraphene_1_1chain_1_1worker__object_1a8f85a7277840f8966a8f93b634b7d08d" kindref="member">worker_object::worker_account</ref> &gt; &gt;, ordered_unique&lt; tag&lt; by_vote_for &gt;, member&lt; <ref refid="classgraphene_1_1chain_1_1worker__object" kindref="compound">worker_object</ref>, <ref refid="structgraphene_1_1chain_1_1vote__id__type" kindref="compound">vote_id_type</ref>, &amp;<ref refid="classgraphene_1_1chain_1_1worker__object_1a59fe30f86eb264a837de20f7060139fe" kindref="member">worker_object::vote_for</ref> &gt; &gt;, ordered_unique&lt; tag&lt; by_vote_against &gt;, member&lt; <ref refid="classgraphene_1_1chain_1_1worker__object" kindref="compound">worker_object</ref>, <ref refid="structgraphene_1_1chain_1_1vote__id__type" kindref="compound">vote_id_type</ref>, &amp;<ref refid="classgraphene_1_1chain_1_1worker__object_1a04502ac21107ce051c9d4eac2417061a" kindref="member">worker_object::vote_against</ref> &gt; &gt; &gt;&gt;</type>
        <definition>typedef multi_index_container&lt; worker_object, indexed_by&lt; ordered_unique&lt; tag&lt;by_id&gt;, member&lt; object, object_id_type, &amp;object::id &gt; &gt;, ordered_non_unique&lt; tag&lt;by_account&gt;, member&lt; worker_object, account_id_type, &amp;worker_object::worker_account &gt; &gt;, ordered_unique&lt; tag&lt;by_vote_for&gt;, member&lt; worker_object, vote_id_type, &amp;worker_object::vote_for &gt; &gt;, ordered_unique&lt; tag&lt;by_vote_against&gt;, member&lt; worker_object, vote_id_type, &amp;worker_object::vote_against &gt; &gt; &gt;&gt; graphene::chain::worker_object_multi_index_type</definition>
        <argsstring></argsstring>
        <name>worker_object_multi_index_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/worker_object.hpp" line="154" column="1" bodyfile="libraries/chain/include/graphene/chain/worker_object.hpp" bodystart="145" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1chain_1ad0445f69e4dc63af75eb5a699a04ec8b" prot="public" static="no">
        <type>generic_index&lt; <ref refid="classgraphene_1_1chain_1_1worker__object" kindref="compound">worker_object</ref>, <ref refid="namespacegraphene_1_1chain_1ab64de8d6045f62c2e57025a092c9d153" kindref="member">worker_object_multi_index_type</ref> &gt;</type>
        <definition>using graphene::chain::worker_index = typedef generic_index&lt;worker_object, worker_object_multi_index_type&gt;</definition>
        <argsstring></argsstring>
        <name>worker_index</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/worker_object.hpp" line="156" column="1" bodyfile="libraries/chain/include/graphene/chain/worker_object.hpp" bodystart="156" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1chain_1ab6499fee45a9563fe61a7a0b0d39dbde" prot="public" static="no">
        <type>boost::multiprecision::uint128_t</type>
        <definition>typedef boost::multiprecision::uint128_t graphene::chain::uint128_t</definition>
        <argsstring></argsstring>
        <name>uint128_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/protocol/asset.cpp" line="29" column="1" bodyfile="libraries/chain/protocol/asset.cpp" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1chain_1a01669f00e62a01a3ccd3760c803f30d0" prot="public" static="no">
        <type>boost::multiprecision::int128_t</type>
        <definition>typedef boost::multiprecision::int128_t graphene::chain::int128_t</definition>
        <argsstring></argsstring>
        <name>int128_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/protocol/asset.cpp" line="30" column="1" bodyfile="libraries/chain/protocol/asset.cpp" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1chain_1a3f54b9d7e4d252c4a30259fcf5edc987" prot="public" static="no">
        <type>fc::smart_ref&lt; <ref refid="structgraphene_1_1chain_1_1fee__schedule" kindref="compound">fee_schedule</ref> &gt;</type>
        <definition>typedef fc::smart_ref&lt;fee_schedule&gt; graphene::chain::smart_fee_schedule</definition>
        <argsstring></argsstring>
        <name>smart_fee_schedule</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/protocol/fee_schedule.cpp" line="42" column="1" bodyfile="libraries/chain/protocol/fee_schedule.cpp" bodystart="42" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespacegraphene_1_1chain_1af92e12d868c4337b7dea9e21014ba086" prot="public" static="no" mutable="no">
        <type>const int64_t</type>
        <definition>const int64_t graphene::chain::scaled_precision_lut</definition>
        <argsstring>[]</argsstring>
        <name>scaled_precision_lut</name>
        <initializer>=
{
   <ref refid="structgraphene_1_1chain_1_1p10" kindref="compound">p10</ref>&lt;  0 &gt;::v, <ref refid="structgraphene_1_1chain_1_1p10" kindref="compound">p10</ref>&lt;  1 &gt;::v, <ref refid="structgraphene_1_1chain_1_1p10" kindref="compound">p10</ref>&lt;  2 &gt;::v, <ref refid="structgraphene_1_1chain_1_1p10" kindref="compound">p10</ref>&lt;  3 &gt;::v,
   <ref refid="structgraphene_1_1chain_1_1p10" kindref="compound">p10</ref>&lt;  4 &gt;::v, <ref refid="structgraphene_1_1chain_1_1p10" kindref="compound">p10</ref>&lt;  5 &gt;::v, <ref refid="structgraphene_1_1chain_1_1p10" kindref="compound">p10</ref>&lt;  6 &gt;::v, <ref refid="structgraphene_1_1chain_1_1p10" kindref="compound">p10</ref>&lt;  7 &gt;::v,
   <ref refid="structgraphene_1_1chain_1_1p10" kindref="compound">p10</ref>&lt;  8 &gt;::v, <ref refid="structgraphene_1_1chain_1_1p10" kindref="compound">p10</ref>&lt;  9 &gt;::v, <ref refid="structgraphene_1_1chain_1_1p10" kindref="compound">p10</ref>&lt; 10 &gt;::v, <ref refid="structgraphene_1_1chain_1_1p10" kindref="compound">p10</ref>&lt; 11 &gt;::v,
   <ref refid="structgraphene_1_1chain_1_1p10" kindref="compound">p10</ref>&lt; 12 &gt;::v, <ref refid="structgraphene_1_1chain_1_1p10" kindref="compound">p10</ref>&lt; 13 &gt;::v, <ref refid="structgraphene_1_1chain_1_1p10" kindref="compound">p10</ref>&lt; 14 &gt;::v, <ref refid="structgraphene_1_1chain_1_1p10" kindref="compound">p10</ref>&lt; 15 &gt;::v,
   <ref refid="structgraphene_1_1chain_1_1p10" kindref="compound">p10</ref>&lt; 16 &gt;::v, <ref refid="structgraphene_1_1chain_1_1p10" kindref="compound">p10</ref>&lt; 17 &gt;::v, <ref refid="structgraphene_1_1chain_1_1p10" kindref="compound">p10</ref>&lt; 18 &gt;::v
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/asset.hpp" line="30" column="1" bodyfile="libraries/chain/protocol/asset.cpp" bodystart="195" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacegraphene_1_1chain_1a018bf7b5a7437cd376b1ba8ec354fbf3" prot="public" static="yes" mutable="no">
        <type>const uint32_t</type>
        <definition>const uint32_t graphene::chain::ASSET_ISSUER_PERMISSION_MASK</definition>
        <argsstring></argsstring>
        <name>ASSET_ISSUER_PERMISSION_MASK</name>
        <initializer>= <ref refid="namespacegraphene_1_1chain_1a6a12bfc3745c709e79e6bbcd1fa6c3d2ab08a02732dce7c06fc45c35683957909" kindref="member">charge_market_fee</ref>|<ref refid="namespacegraphene_1_1chain_1a6a12bfc3745c709e79e6bbcd1fa6c3d2a8cbbfe4de4c5ceb2b2274f92aa164209" kindref="member">white_list</ref>|<ref refid="namespacegraphene_1_1chain_1a6a12bfc3745c709e79e6bbcd1fa6c3d2af00fdf25c2ccc64f702d990d2c3d34b1" kindref="member">override_authority</ref>|<ref refid="namespacegraphene_1_1chain_1a6a12bfc3745c709e79e6bbcd1fa6c3d2a7f10195ef256169dc13d1bfd4dbca118" kindref="member">transfer_restricted</ref>|<ref refid="namespacegraphene_1_1chain_1a6a12bfc3745c709e79e6bbcd1fa6c3d2a58326f264a443528bb9c8a7dd05d9ef5" kindref="member">disable_force_settle</ref>|<ref refid="namespacegraphene_1_1chain_1a6a12bfc3745c709e79e6bbcd1fa6c3d2a58c0aa104472d6de38db9eb6ea4dd2d4" kindref="member">global_settle</ref>|<ref refid="namespacegraphene_1_1chain_1a6a12bfc3745c709e79e6bbcd1fa6c3d2a106133e99fff12fb46c8bd8248c83661" kindref="member">disable_confidential</ref>
      |<ref refid="namespacegraphene_1_1chain_1a6a12bfc3745c709e79e6bbcd1fa6c3d2a2568c32be39df623e59af33b2c9e696b" kindref="member">witness_fed_asset</ref>|<ref refid="namespacegraphene_1_1chain_1a6a12bfc3745c709e79e6bbcd1fa6c3d2af027c659d4b7da8672e8ed3e21c1f4db" kindref="member">committee_fed_asset</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/types.hpp" line="99" column="1" bodyfile="libraries/chain/include/graphene/chain/protocol/types.hpp" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacegraphene_1_1chain_1a89c7e6c15e86a1bceddc0b17b564fa61" prot="public" static="yes" mutable="no">
        <type>const uint32_t</type>
        <definition>const uint32_t graphene::chain::UIA_ASSET_ISSUER_PERMISSION_MASK</definition>
        <argsstring></argsstring>
        <name>UIA_ASSET_ISSUER_PERMISSION_MASK</name>
        <initializer>= <ref refid="namespacegraphene_1_1chain_1a6a12bfc3745c709e79e6bbcd1fa6c3d2ab08a02732dce7c06fc45c35683957909" kindref="member">charge_market_fee</ref>|<ref refid="namespacegraphene_1_1chain_1a6a12bfc3745c709e79e6bbcd1fa6c3d2a8cbbfe4de4c5ceb2b2274f92aa164209" kindref="member">white_list</ref>|<ref refid="namespacegraphene_1_1chain_1a6a12bfc3745c709e79e6bbcd1fa6c3d2af00fdf25c2ccc64f702d990d2c3d34b1" kindref="member">override_authority</ref>|<ref refid="namespacegraphene_1_1chain_1a6a12bfc3745c709e79e6bbcd1fa6c3d2a7f10195ef256169dc13d1bfd4dbca118" kindref="member">transfer_restricted</ref>|<ref refid="namespacegraphene_1_1chain_1a6a12bfc3745c709e79e6bbcd1fa6c3d2a106133e99fff12fb46c8bd8248c83661" kindref="member">disable_confidential</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/types.hpp" line="101" column="1" bodyfile="libraries/chain/include/graphene/chain/protocol/types.hpp" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacegraphene_1_1chain_1a33ce1c8f84a7499c51b84f63163e2dd3" prot="public" static="yes" mutable="no">
        <type><ref refid="namespacegraphene_1_1chain_1a3f54b9d7e4d252c4a30259fcf5edc987" kindref="member">smart_fee_schedule</ref></type>
        <definition>smart_fee_schedule graphene::chain::tmp</definition>
        <argsstring></argsstring>
        <name>tmp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/protocol/fee_schedule.cpp" line="44" column="1" bodyfile="libraries/chain/protocol/fee_schedule.cpp" bodystart="44" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacegraphene_1_1chain_1a23da19530067c8f079d293b5b5f948ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::chain::verify_authority_accounts</definition>
        <argsstring>(const database &amp;db, const authority &amp;a)</argsstring>
        <name>verify_authority_accounts</name>
        <param>
          <type>const <ref refid="classgraphene_1_1chain_1_1database" kindref="compound">database</ref> &amp;</type>
          <declname>db</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1chain_1_1authority" kindref="compound">authority</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/account_evaluator.cpp" line="42" column="1" bodyfile="libraries/chain/account_evaluator.cpp" bodystart="42" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1chain_1a0da8afb851e982b71efa49ae3f0371f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::chain::verify_account_votes</definition>
        <argsstring>(const database &amp;db, const account_options &amp;options)</argsstring>
        <name>verify_account_votes</name>
        <param>
          <type>const <ref refid="classgraphene_1_1chain_1_1database" kindref="compound">database</ref> &amp;</type>
          <declname>db</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1chain_1_1account__options" kindref="compound">account_options</ref> &amp;</type>
          <declname>options</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/account_evaluator.cpp" line="58" column="1" bodyfile="libraries/chain/account_evaluator.cpp" bodystart="58" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1chain_1a8239dba8aaa25b29bb29aa103223ec17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacegraphene_1_1chain_1ab4bea4aef5fe40c66b42537da931bffe" kindref="member">share_type</ref></type>
        <definition>share_type graphene::chain::cut_fee</definition>
        <argsstring>(share_type a, uint16_t p)</argsstring>
        <name>cut_fee</name>
        <param>
          <type><ref refid="namespacegraphene_1_1chain_1ab4bea4aef5fe40c66b42537da931bffe" kindref="member">share_type</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/account_object.cpp" line="32" column="1" bodyfile="libraries/chain/account_object.cpp" bodystart="32" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1chain_1af58d983afb0efae1eb384b67512499ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::chain::evaluate_buyback_account_options</definition>
        <argsstring>(const database &amp;db, const buyback_account_options &amp;bbo)</argsstring>
        <name>evaluate_buyback_account_options</name>
        <param>
          <type>const <ref refid="classgraphene_1_1chain_1_1database" kindref="compound">database</ref> &amp;</type>
          <declname>db</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1chain_1_1buyback__account__options" kindref="compound">buyback_account_options</ref> &amp;</type>
          <declname>bbo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/buyback.cpp" line="32" column="1" bodyfile="libraries/chain/buyback.cpp" bodystart="32" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1chain_1a181f5eec24db1e1c680de88752cf9c12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::chain::debug_apply_update</definition>
        <argsstring>(database &amp;db, const fc::variant_object &amp;vo)</argsstring>
        <name>debug_apply_update</name>
        <param>
          <type><ref refid="classgraphene_1_1chain_1_1database" kindref="compound">database</ref> &amp;</type>
          <declname>db</declname>
        </param>
        <param>
          <type>const fc::variant_object &amp;</type>
          <declname>vo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/db_debug.cpp" line="98" column="1" bodyfile="libraries/chain/db_debug.cpp" bodystart="98" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1chain_1a212ef9abe452c27e2b26f4d521c298f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Visitor</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void graphene::chain::visit_special_authorities</definition>
        <argsstring>(const database &amp;db, Visitor visit)</argsstring>
        <name>visit_special_authorities</name>
        <param>
          <type>const <ref refid="classgraphene_1_1chain_1_1database" kindref="compound">database</ref> &amp;</type>
          <declname>db</declname>
        </param>
        <param>
          <type>Visitor</type>
          <declname>visit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/db_maint.cpp" line="468" column="1" bodyfile="libraries/chain/db_maint.cpp" bodystart="468" bodyend="484"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1chain_1aafe078504bd9675a005078b468843223" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::chain::update_top_n_authorities</definition>
        <argsstring>(database &amp;db)</argsstring>
        <name>update_top_n_authorities</name>
        <param>
          <type><ref refid="classgraphene_1_1chain_1_1database" kindref="compound">database</ref> &amp;</type>
          <declname>db</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/db_maint.cpp" line="486" column="1" bodyfile="libraries/chain/db_maint.cpp" bodystart="486" bodyend="523"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1chain_1a1c463857736685f0a10fd056d2b4b85a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::chain::split_fba_balance</definition>
        <argsstring>(database &amp;db, uint64_t fba_id, uint16_t network_pct, uint16_t designated_asset_buyback_pct, uint16_t designated_asset_issuer_pct)</argsstring>
        <name>split_fba_balance</name>
        <param>
          <type><ref refid="classgraphene_1_1chain_1_1database" kindref="compound">database</ref> &amp;</type>
          <declname>db</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>fba_id</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>network_pct</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>designated_asset_buyback_pct</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>designated_asset_issuer_pct</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/db_maint.cpp" line="525" column="1" bodyfile="libraries/chain/db_maint.cpp" bodystart="525" bodyend="603"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1chain_1a86127c6c883fd8cee0b6c9bc9911da82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::chain::distribute_fba_balances</definition>
        <argsstring>(database &amp;db)</argsstring>
        <name>distribute_fba_balances</name>
        <param>
          <type><ref refid="classgraphene_1_1chain_1_1database" kindref="compound">database</ref> &amp;</type>
          <declname>db</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/db_maint.cpp" line="605" column="1" bodyfile="libraries/chain/db_maint.cpp" bodystart="605" bodyend="610"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1chain_1a8708850467d84b28bded18bba06d2bca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::chain::create_buyback_orders</definition>
        <argsstring>(database &amp;db)</argsstring>
        <name>create_buyback_orders</name>
        <param>
          <type><ref refid="classgraphene_1_1chain_1_1database" kindref="compound">database</ref> &amp;</type>
          <declname>db</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/db_maint.cpp" line="612" column="1" bodyfile="libraries/chain/db_maint.cpp" bodystart="612" bodyend="686"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1chain_1a519e1c11323acf5f5e2feb9b6b5f85eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::chain::deprecate_annual_members</definition>
        <argsstring>(database &amp;db)</argsstring>
        <name>deprecate_annual_members</name>
        <param>
          <type><ref refid="classgraphene_1_1chain_1_1database" kindref="compound">database</ref> &amp;</type>
          <declname>db</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/db_maint.cpp" line="688" column="1" bodyfile="libraries/chain/db_maint.cpp" bodystart="688" bodyend="717"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1chain_1a908cd1fa664baa7cdbf681f694342223" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::chain::maybe_cull_small_order</definition>
        <argsstring>(database &amp;db, const limit_order_object &amp;order)</argsstring>
        <name>maybe_cull_small_order</name>
        <param>
          <type><ref refid="classgraphene_1_1chain_1_1database" kindref="compound">database</ref> &amp;</type>
          <declname>db</declname>
        </param>
        <param>
          <type>const <ref refid="classgraphene_1_1chain_1_1limit__order__object" kindref="compound">limit_order_object</ref> &amp;</type>
          <declname>order</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>There are times when the AMOUNT_FOR_SALE * SALE_PRICE == 0 which means that we have hit the limit where the seller is asking for nothing in return. When this happens we must refund any balance back to the seller, it is too small to be sold at the sale price.</para><para>If the order is a taker order (as opposed to a maker order), so the price is set by the counterparty, this check is deferred until the order becomes unmatched (see #555) <ndash/> however, detecting this condition is the responsibility of the caller.</para>        </inbodydescription>
        <location file="libraries/chain/db_market.cpp" line="135" column="1" bodyfile="libraries/chain/db_market.cpp" bodystart="135" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1chain_1a1b635dbebd45f6902738662562f2234c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>fc::variant_object</type>
        <definition>fc::variant_object graphene::chain::get_config</definition>
        <argsstring>()</argsstring>
        <name>get_config</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/get_config.cpp" line="31" column="1" bodyfile="libraries/chain/get_config.cpp" bodystart="31" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1chain_1a5250c99fc9c4267d7d903e1631cdf8b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>graphene::chain::GRAPHENE_DECLARE_OP_BASE_EXCEPTIONS</definition>
        <argsstring>(transfer)</argsstring>
        <name>GRAPHENE_DECLARE_OP_BASE_EXCEPTIONS</name>
        <param>
          <type>transfer</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/exceptions.hpp" line="94" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1chain_1aac9dc11785503e07c8602f5c5f40b83a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>graphene::chain::GRAPHENE_DECLARE_OP_BASE_EXCEPTIONS</definition>
        <argsstring>(call_order_update)</argsstring>
        <name>GRAPHENE_DECLARE_OP_BASE_EXCEPTIONS</name>
        <param>
          <type>call_order_update</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/exceptions.hpp" line="101" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1chain_1ad2e2fa17c571395c69c6fe2b879cff77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>graphene::chain::GRAPHENE_DECLARE_OP_BASE_EXCEPTIONS</definition>
        <argsstring>(account_create)</argsstring>
        <name>GRAPHENE_DECLARE_OP_BASE_EXCEPTIONS</name>
        <param>
          <type>account_create</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/exceptions.hpp" line="104" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1chain_1ab8b45cfff2f8bc9813478a1730d5d0ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>graphene::chain::GRAPHENE_DECLARE_OP_BASE_EXCEPTIONS</definition>
        <argsstring>(account_update)</argsstring>
        <name>GRAPHENE_DECLARE_OP_BASE_EXCEPTIONS</name>
        <param>
          <type>account_update</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/exceptions.hpp" line="111" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1chain_1af1c2ed3b392841a0849f3dd15f387714" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>graphene::chain::GRAPHENE_DECLARE_OP_BASE_EXCEPTIONS</definition>
        <argsstring>(asset_reserve)</argsstring>
        <name>GRAPHENE_DECLARE_OP_BASE_EXCEPTIONS</name>
        <param>
          <type>asset_reserve</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/exceptions.hpp" line="124" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1chain_1ad04adc166d3af3cdd436b52fe9338f1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>graphene::chain::GRAPHENE_DECLARE_OP_BASE_EXCEPTIONS</definition>
        <argsstring>(proposal_create)</argsstring>
        <name>GRAPHENE_DECLARE_OP_BASE_EXCEPTIONS</name>
        <param>
          <type>proposal_create</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/exceptions.hpp" line="134" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1chain_1abda6bfd7c09f51b6fca96aa4725412cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>graphene::chain::GRAPHENE_DECLARE_OP_BASE_EXCEPTIONS</definition>
        <argsstring>(balance_claim)</argsstring>
        <name>GRAPHENE_DECLARE_OP_BASE_EXCEPTIONS</name>
        <param>
          <type>balance_claim</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/exceptions.hpp" line="152" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1chain_1add97030edf263ad043d9b27efeb9b9e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>graphene::chain::GRAPHENE_DECLARE_OP_BASE_EXCEPTIONS</definition>
        <argsstring>(override_transfer)</argsstring>
        <name>GRAPHENE_DECLARE_OP_BASE_EXCEPTIONS</name>
        <param>
          <type>override_transfer</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/exceptions.hpp" line="157" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1chain_1ae806792c1426bb377e0e3e5a7824da06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>graphene::chain::GRAPHENE_DECLARE_OP_BASE_EXCEPTIONS</definition>
        <argsstring>(blind_transfer)</argsstring>
        <name>GRAPHENE_DECLARE_OP_BASE_EXCEPTIONS</name>
        <param>
          <type>blind_transfer</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/exceptions.hpp" line="160" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1chain_1ac5b70c454163ad4446dcb6b4ec18f225" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>graphene::chain::GRAPHENE_DECLARE_OP_EVALUATE_EXCEPTION</definition>
        <argsstring>(unknown_commitment, blind_transfer, 1, &quot;Attempting to claim an unknown prior commitment&quot;)</argsstring>
        <name>GRAPHENE_DECLARE_OP_EVALUATE_EXCEPTION</name>
        <param>
          <type>unknown_commitment</type>
        </param>
        <param>
          <type>blind_transfer</type>
        </param>
        <param>
          <type>1</type>
        </param>
        <param>
          <type>&quot;Attempting to claim an unknown prior commitment&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/exceptions.hpp" line="161" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1chain_1a5329db165e64c97305196002b5030bb3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::chain::is_authorized_asset</definition>
        <argsstring>(const database &amp;d, const account_object &amp;acct, const asset_object &amp;asset_obj)</argsstring>
        <name>is_authorized_asset</name>
        <param>
          <type>const <ref refid="classgraphene_1_1chain_1_1database" kindref="compound">database</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const <ref refid="classgraphene_1_1chain_1_1account__object" kindref="compound">account_object</ref> &amp;</type>
          <declname>acct</declname>
        </param>
        <param>
          <type>const <ref refid="classgraphene_1_1chain_1_1asset__object" kindref="compound">asset_object</ref> &amp;</type>
          <declname>asset_obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if the account is whitelisted and not blacklisted to transact in the provided asset; false otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/is_authorized_asset.hpp" line="43" column="1" bodyfile="libraries/chain/include/graphene/chain/is_authorized_asset.hpp" bodystart="43" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1chain_1a00ae32d4bb46de1b559746804dc9d2ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::chain::is_valid_name</definition>
        <argsstring>(const string &amp;s)</argsstring>
        <name>is_valid_name</name>
        <param>
          <type>const string &amp;</type>
          <declname>s</declname>
          <defname>name</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Names must comply with the following grammar (RFC 1035): &lt;domain&gt; ::= &lt;subdomain&gt; | &quot; &quot; &lt;subdomain&gt; ::= &lt;label&gt; | &lt;subdomain&gt; &quot;.&quot; &lt;label&gt; &lt;label&gt; ::= &lt;letter&gt; [ [ &lt;ldh-str&gt; ] &lt;let-dig&gt; ] &lt;ldh-str&gt; ::= &lt;let-dig-hyp&gt; | &lt;let-dig-hyp&gt; &lt;ldh-str&gt; &lt;let-dig-hyp&gt; ::= &lt;let-dig&gt; | &quot;-&quot; &lt;let-dig&gt; ::= &lt;letter&gt; | &lt;digit&gt;</para><para>Which is equivalent to the following:</para><para>&lt;domain&gt; ::= &lt;subdomain&gt; | &quot; &quot; &lt;subdomain&gt; ::= &lt;label&gt; (&quot;.&quot; &lt;label&gt;)* &lt;label&gt; ::= &lt;letter&gt; [ [ &lt;let-dig-hyp&gt;+ ] &lt;let-dig&gt; ] &lt;let-dig-hyp&gt; ::= &lt;let-dig&gt; | &quot;-&quot; &lt;let-dig&gt; ::= &lt;letter&gt; | &lt;digit&gt;</para><para>I.e. a valid name consists of a dot-separated sequence of one or more labels consisting of the following rules:</para><para><itemizedlist>
<listitem><para>Each label is three characters or more</para></listitem><listitem><para>Each label begins with a letter</para></listitem><listitem><para>Each label ends with a letter or digit</para></listitem><listitem><para>Each label contains only letters, digits or hyphens</para></listitem></itemizedlist>
</para><para>In addition we require the following:</para><para><itemizedlist>
<listitem><para>All letters are lowercase</para></listitem><listitem><para>Length is between (inclusive) GRAPHENE_MIN_ACCOUNT_NAME_LENGTH and GRAPHENE_MAX_ACCOUNT_NAME_LENGTH </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
<para>this condition will prevent witnesses from including new names before this time, but allow them after this time. This check can be removed from the code after HARDFORK_385_TIME has passed.</para><para>this condition will prevent witnesses from including new names before this time, but allow them after this time. This check can be removed from the code after HARDFORK_385_TIME has passed.</para>        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/account.hpp" line="34" column="1" bodyfile="libraries/chain/protocol/account.cpp" bodystart="59" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1chain_1ae4c830054c1e9c8929d7ca0629e5fe1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::chain::is_cheap_name</definition>
        <argsstring>(const string &amp;n)</argsstring>
        <name>is_cheap_name</name>
        <param>
          <type>const string &amp;</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/account.hpp" line="35" column="1" bodyfile="libraries/chain/protocol/account.cpp" bodystart="141" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1chain_1aa59c47f20e58a321412bf367a17d8738" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::chain::operator==</definition>
        <argsstring>(const address &amp;a, const address &amp;b)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classgraphene_1_1chain_1_1address" kindref="compound">address</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classgraphene_1_1chain_1_1address" kindref="compound">address</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/address.hpp" line="73" column="1" bodyfile="libraries/chain/include/graphene/chain/protocol/address.hpp" bodystart="73" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1chain_1a36f1623c83b1c7bac3a8775eec88ab09" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::chain::operator!=</definition>
        <argsstring>(const address &amp;a, const address &amp;b)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classgraphene_1_1chain_1_1address" kindref="compound">address</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classgraphene_1_1chain_1_1address" kindref="compound">address</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/address.hpp" line="74" column="1" bodyfile="libraries/chain/include/graphene/chain/protocol/address.hpp" bodystart="74" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1chain_1aa1f31888c83911b43aad771c08cd1eb1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::chain::operator&lt;</definition>
        <argsstring>(const address &amp;a, const address &amp;b)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classgraphene_1_1chain_1_1address" kindref="compound">address</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classgraphene_1_1chain_1_1address" kindref="compound">address</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/address.hpp" line="75" column="1" bodyfile="libraries/chain/include/graphene/chain/protocol/address.hpp" bodystart="75" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1chain_1a4c4e2b098ed507b986825f0fb3aa92a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structgraphene_1_1chain_1_1price" kindref="compound">price</ref></type>
        <definition>price graphene::chain::operator/</definition>
        <argsstring>(const asset &amp;base, const asset &amp;quote)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="structgraphene_1_1chain_1_1asset" kindref="compound">asset</ref> &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1chain_1_1asset" kindref="compound">asset</ref> &amp;</type>
          <declname>quote</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/asset.hpp" line="136" column="1" bodyfile="libraries/chain/protocol/asset.cpp" bodystart="95" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1chain_1af40ec6a5724672b9e600d0968e695b6a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structgraphene_1_1chain_1_1price" kindref="compound">price</ref></type>
        <definition>price graphene::chain::operator~</definition>
        <argsstring>(const price &amp;p)</argsstring>
        <name>operator~</name>
        <param>
          <type>const <ref refid="structgraphene_1_1chain_1_1price" kindref="compound">price</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/asset.hpp" line="137" column="1" bodyfile="libraries/chain/include/graphene/chain/protocol/asset.hpp" bodystart="137" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1chain_1a2ad1901789340386d08593ae3b8c8232" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::chain::operator&lt;</definition>
        <argsstring>(const asset &amp;a, const asset &amp;b)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="structgraphene_1_1chain_1_1asset" kindref="compound">asset</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1chain_1_1asset" kindref="compound">asset</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/asset.hpp" line="139" column="1" bodyfile="libraries/chain/include/graphene/chain/protocol/asset.hpp" bodystart="58" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1chain_1a9818fdb8389f48321db10c36cb1d188b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::chain::operator&lt;=</definition>
        <argsstring>(const asset &amp;a, const asset &amp;b)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="structgraphene_1_1chain_1_1asset" kindref="compound">asset</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1chain_1_1asset" kindref="compound">asset</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/asset.hpp" line="140" column="1" bodyfile="libraries/chain/include/graphene/chain/protocol/asset.hpp" bodystart="63" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1chain_1a21accacefcb34f40de9b3a79f3fd848f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::chain::operator&lt;</definition>
        <argsstring>(const price &amp;a, const price &amp;b)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="structgraphene_1_1chain_1_1price" kindref="compound">price</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1chain_1_1price" kindref="compound">price</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/asset.hpp" line="141" column="1" bodyfile="libraries/chain/protocol/asset.cpp" bodystart="43" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1chain_1a195f5f20030e90fc9db7f9ae7fc223bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::chain::operator&lt;=</definition>
        <argsstring>(const price &amp;a, const price &amp;b)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="structgraphene_1_1chain_1_1price" kindref="compound">price</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1chain_1_1price" kindref="compound">price</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/asset.hpp" line="142" column="1" bodyfile="libraries/chain/protocol/asset.cpp" bodystart="56" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1chain_1a853f9897905ae457f2fba20c530d0524" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::chain::operator&gt;</definition>
        <argsstring>(const price &amp;a, const price &amp;b)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="structgraphene_1_1chain_1_1price" kindref="compound">price</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1chain_1_1price" kindref="compound">price</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/asset.hpp" line="143" column="1" bodyfile="libraries/chain/protocol/asset.cpp" bodystart="66" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1chain_1ad9f842dae1bbed8223a1af1800f89b33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::chain::operator&gt;=</definition>
        <argsstring>(const price &amp;a, const price &amp;b)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="structgraphene_1_1chain_1_1price" kindref="compound">price</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1chain_1_1price" kindref="compound">price</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/asset.hpp" line="144" column="1" bodyfile="libraries/chain/protocol/asset.cpp" bodystart="71" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1chain_1ab6c120cb1d44829e5f5a02cfcf0acc93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::chain::operator==</definition>
        <argsstring>(const price &amp;a, const price &amp;b)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structgraphene_1_1chain_1_1price" kindref="compound">price</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1chain_1_1price" kindref="compound">price</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/asset.hpp" line="145" column="1" bodyfile="libraries/chain/protocol/asset.cpp" bodystart="32" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1chain_1abc8a9f122707bb2ce6ffbbbb13027b38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::chain::operator!=</definition>
        <argsstring>(const price &amp;a, const price &amp;b)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="structgraphene_1_1chain_1_1price" kindref="compound">price</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1chain_1_1price" kindref="compound">price</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/asset.hpp" line="146" column="1" bodyfile="libraries/chain/protocol/asset.cpp" bodystart="61" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1chain_1a8062fe82dd155aeea22da62409075d01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structgraphene_1_1chain_1_1asset" kindref="compound">asset</ref></type>
        <definition>asset graphene::chain::operator*</definition>
        <argsstring>(const asset &amp;a, const price &amp;b)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="structgraphene_1_1chain_1_1asset" kindref="compound">asset</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1chain_1_1price" kindref="compound">price</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/asset.hpp" line="147" column="1" bodyfile="libraries/chain/protocol/asset.cpp" bodystart="76" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1chain_1a5717ec54e4190fad67de0b3639988ea5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::chain::is_valid_symbol</definition>
        <argsstring>(const string &amp;symbol)</argsstring>
        <name>is_valid_symbol</name>
        <param>
          <type>const string &amp;</type>
          <declname>symbol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Valid symbols can contain [A-Z0-9], and &apos;.&apos; They must start with [A, Z] They must end with [A, Z] They can contain a maximum of one &apos;.&apos; </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/asset_ops.hpp" line="30" column="1" bodyfile="libraries/chain/protocol/asset_ops.cpp" bodystart="34" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1chain_1a1a5a25b9f16a8736bf7dbbaa705fede7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::chain::add_authority_accounts</definition>
        <argsstring>(flat_set&lt; account_id_type &gt; &amp;result, const authority &amp;a)</argsstring>
        <name>add_authority_accounts</name>
        <param>
          <type>flat_set&lt; <ref refid="namespacegraphene_1_1chain_1a11927fb343f953514ab6235d6e7233ee" kindref="member">account_id_type</ref> &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1chain_1_1authority" kindref="compound">authority</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add all account members of the given authority to the given flat_set. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/authority.hpp" line="127" column="1" bodyfile="libraries/chain/protocol/authority.cpp" bodystart="29" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1chain_1a63c2fd9f8f5e36a4187f3699b4fada0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Stream</type>
          </param>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void graphene::chain::operator&lt;&lt;</definition>
        <argsstring>(Stream &amp;stream, const graphene::chain::extension&lt; T &gt; &amp;value)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>Stream &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1chain_1_1extension" kindref="compound">graphene::chain::extension</ref>&lt; T &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/ext.hpp" line="76" column="1" bodyfile="libraries/chain/include/graphene/chain/protocol/ext.hpp" bodystart="76" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1chain_1a54f5bc46b5c142e1b9fda16e4252b8f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Stream</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void graphene::chain::operator&gt;&gt;</definition>
        <argsstring>(Stream &amp;s, graphene::chain::extension&lt; T &gt; &amp;value)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>Stream &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="structgraphene_1_1chain_1_1extension" kindref="compound">graphene::chain::extension</ref>&lt; T &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/ext.hpp" line="133" column="1" bodyfile="libraries/chain/include/graphene/chain/protocol/ext.hpp" bodystart="133" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1chain_1ae94dc5207859246b0e3997094ee958fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::chain::operation_get_required_authorities</definition>
        <argsstring>(const operation &amp;op, flat_set&lt; account_id_type &gt; &amp;active, flat_set&lt; account_id_type &gt; &amp;owner, vector&lt; authority &gt; &amp;other)</argsstring>
        <name>operation_get_required_authorities</name>
        <param>
          <type>const <ref refid="group__operations_1ga8b0400e40715f7fd1608ab2dc3d6d401" kindref="member">operation</ref> &amp;</type>
          <declname>op</declname>
        </param>
        <param>
          <type>flat_set&lt; <ref refid="namespacegraphene_1_1chain_1a11927fb343f953514ab6235d6e7233ee" kindref="member">account_id_type</ref> &gt; &amp;</type>
          <declname>active</declname>
        </param>
        <param>
          <type>flat_set&lt; <ref refid="namespacegraphene_1_1chain_1a11927fb343f953514ab6235d6e7233ee" kindref="member">account_id_type</ref> &gt; &amp;</type>
          <declname>owner</declname>
        </param>
        <param>
          <type>vector&lt; <ref refid="structgraphene_1_1chain_1_1authority" kindref="compound">authority</ref> &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Appends required authorites to the result vector. The authorities appended are not the same as those returned by get_required_auth</para><para><simplesect kind="return"><para>a set of required authorities for op </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/operations.hpp" line="105" column="1" bodyfile="libraries/chain/protocol/operations.cpp" bodystart="79" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1chain_1a7268da360ce2fa9245a306d2499144f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::chain::operation_validate</definition>
        <argsstring>(const operation &amp;op)</argsstring>
        <name>operation_validate</name>
        <param>
          <type>const <ref refid="group__operations_1ga8b0400e40715f7fd1608ab2dc3d6d401" kindref="member">operation</ref> &amp;</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/operations.hpp" line="110" column="1" bodyfile="libraries/chain/protocol/operations.cpp" bodystart="74" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1chain_1a4dff6032cf9a664e25fdade9ad24f6b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::chain::validate_special_authority</definition>
        <argsstring>(const special_authority &amp;auth)</argsstring>
        <name>validate_special_authority</name>
        <param>
          <type>const <ref refid="namespacegraphene_1_1chain_1acf64b783a57a0845a3d1882c98b6d345" kindref="member">special_authority</ref> &amp;</type>
          <declname>auth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/special_authority.hpp" line="44" column="1" bodyfile="libraries/chain/special_authority.cpp" bodystart="42" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="group__transactions_1ga48bf3d11043fdbf6ce62604e448e3313" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::chain::verify_authority</definition>
        <argsstring>(const vector&lt; operation &gt; &amp;ops, const flat_set&lt; public_key_type &gt; &amp;sigs, const std::function&lt; const authority *(account_id_type)&gt; &amp;get_active, const std::function&lt; const authority *(account_id_type)&gt; &amp;get_owner, uint32_t max_recursion=GRAPHENE_MAX_SIG_CHECK_DEPTH, bool allow_committe=false, const flat_set&lt; account_id_type &gt; &amp;active_aprovals=flat_set&lt; account_id_type &gt;(), const flat_set&lt; account_id_type &gt; &amp;owner_approvals=flat_set&lt; account_id_type &gt;())</argsstring>
        <name>verify_authority</name>
        <param>
          <type>const vector&lt; <ref refid="group__operations_1ga8b0400e40715f7fd1608ab2dc3d6d401" kindref="member">operation</ref> &gt; &amp;</type>
          <declname>ops</declname>
        </param>
        <param>
          <type>const flat_set&lt; <ref refid="structgraphene_1_1chain_1_1public__key__type" kindref="compound">public_key_type</ref> &gt; &amp;</type>
          <declname>sigs</declname>
        </param>
        <param>
          <type>const std::function&lt; const <ref refid="structgraphene_1_1chain_1_1authority" kindref="compound">authority</ref> *(<ref refid="namespacegraphene_1_1chain_1a11927fb343f953514ab6235d6e7233ee" kindref="member">account_id_type</ref>)&gt; &amp;</type>
          <declname>get_active</declname>
        </param>
        <param>
          <type>const std::function&lt; const <ref refid="structgraphene_1_1chain_1_1authority" kindref="compound">authority</ref> *(<ref refid="namespacegraphene_1_1chain_1a11927fb343f953514ab6235d6e7233ee" kindref="member">account_id_type</ref>)&gt; &amp;</type>
          <declname>get_owner</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_recursion</declname>
          <defval><ref refid="config_8hpp_1aea0bc2216bc54371f7f54d6f6d6e4d9d" kindref="member">GRAPHENE_MAX_SIG_CHECK_DEPTH</ref></defval>
        </param>
        <param>
          <type>bool</type>
          <declname>allow_committe</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const flat_set&lt; <ref refid="namespacegraphene_1_1chain_1a11927fb343f953514ab6235d6e7233ee" kindref="member">account_id_type</ref> &gt; &amp;</type>
          <declname>active_aprovals</declname>
          <defval>flat_set&lt; <ref refid="namespacegraphene_1_1chain_1a11927fb343f953514ab6235d6e7233ee" kindref="member">account_id_type</ref> &gt;()</defval>
        </param>
        <param>
          <type>const flat_set&lt; <ref refid="namespacegraphene_1_1chain_1a11927fb343f953514ab6235d6e7233ee" kindref="member">account_id_type</ref> &gt; &amp;</type>
          <declname>owner_approvals</declname>
          <defval>flat_set&lt; <ref refid="namespacegraphene_1_1chain_1a11927fb343f953514ab6235d6e7233ee" kindref="member">account_id_type</ref> &gt;()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/transaction.hpp" line="176" column="1" bodyfile="libraries/chain/protocol/transaction.cpp" bodystart="246" bodyend="297"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1chain_1a20a336c400343b3cfe806c3007b42426" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::chain::is_relative</definition>
        <argsstring>(object_id_type o)</argsstring>
        <name>is_relative</name>
        <param>
          <type>object_id_type</type>
          <declname>o</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/types.hpp" line="110" column="1" bodyfile="libraries/chain/include/graphene/chain/protocol/types.hpp" bodystart="110" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1chain_1a358750c324f7a7eac08f102924103032" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structgraphene_1_1chain_1_1vote__id__type" kindref="compound">vote_id_type</ref></type>
        <definition>vote_id_type graphene::chain::get_next_vote_id</definition>
        <argsstring>(global_property_object &amp;gpo, vote_id_type::vote_type type)</argsstring>
        <name>get_next_vote_id</name>
        <param>
          <type><ref refid="classgraphene_1_1chain_1_1global__property__object" kindref="compound">global_property_object</ref> &amp;</type>
          <declname>gpo</declname>
        </param>
        <param>
          <type><ref refid="structgraphene_1_1chain_1_1vote__id__type_1aaacdf69f2981cece125da0526fa03959" kindref="member">vote_id_type::vote_type</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/vote.hpp" line="135" column="1" bodyfile="libraries/chain/protocol/vote.cpp" bodystart="31" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1chain_1a3b35a12752a6fd9ccf8164543099734f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::chain::operator==</definition>
        <argsstring>(const pts_address &amp;a, const pts_address &amp;b)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structgraphene_1_1chain_1_1pts__address" kindref="compound">pts_address</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1chain_1_1pts__address" kindref="compound">pts_address</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/pts_address.hpp" line="50" column="1" bodyfile="libraries/chain/include/graphene/chain/pts_address.hpp" bodystart="50" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1chain_1ac3a28ad46e559cf8467d80ae734b14c3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::chain::operator!=</definition>
        <argsstring>(const pts_address &amp;a, const pts_address &amp;b)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="structgraphene_1_1chain_1_1pts__address" kindref="compound">pts_address</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1chain_1_1pts__address" kindref="compound">pts_address</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/pts_address.hpp" line="51" column="1" bodyfile="libraries/chain/include/graphene/chain/pts_address.hpp" bodystart="51" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1chain_1a1e1e86fc14a35b9305a8bfb4a991ee47" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::chain::operator&lt;</definition>
        <argsstring>(const pts_address &amp;a, const pts_address &amp;b)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="structgraphene_1_1chain_1_1pts__address" kindref="compound">pts_address</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1chain_1_1pts__address" kindref="compound">pts_address</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/pts_address.hpp" line="52" column="1" bodyfile="libraries/chain/include/graphene/chain/pts_address.hpp" bodystart="52" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1chain_1ae4dddd10998604add389d854f6f1a31a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::chain::evaluate_special_authority</definition>
        <argsstring>(const database &amp;db, const special_authority &amp;auth)</argsstring>
        <name>evaluate_special_authority</name>
        <param>
          <type>const <ref refid="classgraphene_1_1chain_1_1database" kindref="compound">database</ref> &amp;</type>
          <declname>db</declname>
        </param>
        <param>
          <type>const <ref refid="namespacegraphene_1_1chain_1acf64b783a57a0845a3d1882c98b6d345" kindref="member">special_authority</ref> &amp;</type>
          <declname>auth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/special_authority.hpp" line="32" column="1" bodyfile="libraries/chain/special_authority.cpp" bodystart="64" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1chain_1af5f03cbb9c99826dad13583b3c266189" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::chain::operator==</definition>
        <argsstring>(const public_key_type &amp;p1, const fc::ecc::public_key &amp;p2)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structgraphene_1_1chain_1_1public__key__type" kindref="compound">public_key_type</ref> &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const fc::ecc::public_key &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/protocol/types.cpp" line="100" column="1" bodyfile="libraries/chain/protocol/types.cpp" bodystart="100" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1chain_1a0d392efb98bf64a890e94fdf7e7519da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::chain::operator==</definition>
        <argsstring>(const public_key_type &amp;p1, const public_key_type &amp;p2)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structgraphene_1_1chain_1_1public__key__type" kindref="compound">public_key_type</ref> &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1chain_1_1public__key__type" kindref="compound">public_key_type</ref> &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/protocol/types.cpp" line="105" column="1" bodyfile="libraries/chain/protocol/types.cpp" bodystart="105" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1chain_1ab6719598d5bf6498facad188e1d3a75e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::chain::operator!=</definition>
        <argsstring>(const public_key_type &amp;p1, const public_key_type &amp;p2)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="structgraphene_1_1chain_1_1public__key__type" kindref="compound">public_key_type</ref> &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1chain_1_1public__key__type" kindref="compound">public_key_type</ref> &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/protocol/types.cpp" line="110" column="1" bodyfile="libraries/chain/protocol/types.cpp" bodystart="110" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1chain_1a05df565b5af787f3771c949b48973e01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::chain::operator==</definition>
        <argsstring>(const extended_public_key_type &amp;p1, const fc::ecc::extended_public_key &amp;p2)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structgraphene_1_1chain_1_1extended__public__key__type" kindref="compound">extended_public_key_type</ref> &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const fc::ecc::extended_public_key &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/protocol/types.cpp" line="154" column="1" bodyfile="libraries/chain/protocol/types.cpp" bodystart="154" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1chain_1aec81d36ae21208be44ed0d00bdb8ff36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::chain::operator==</definition>
        <argsstring>(const extended_public_key_type &amp;p1, const extended_public_key_type &amp;p2)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structgraphene_1_1chain_1_1extended__public__key__type" kindref="compound">extended_public_key_type</ref> &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1chain_1_1extended__public__key__type" kindref="compound">extended_public_key_type</ref> &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/protocol/types.cpp" line="159" column="1" bodyfile="libraries/chain/protocol/types.cpp" bodystart="159" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1chain_1ac3f47c899fed4946553c91f509326ac9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::chain::operator!=</definition>
        <argsstring>(const extended_public_key_type &amp;p1, const extended_public_key_type &amp;p2)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="structgraphene_1_1chain_1_1extended__public__key__type" kindref="compound">extended_public_key_type</ref> &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1chain_1_1extended__public__key__type" kindref="compound">extended_public_key_type</ref> &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/protocol/types.cpp" line="164" column="1" bodyfile="libraries/chain/protocol/types.cpp" bodystart="164" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1chain_1a8c0f7d8895fc15234c6fdb3e4fce440c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::chain::operator==</definition>
        <argsstring>(const extended_private_key_type &amp;p1, const fc::ecc::extended_public_key &amp;p2)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structgraphene_1_1chain_1_1extended__private__key__type" kindref="compound">extended_private_key_type</ref> &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const fc::ecc::extended_public_key &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/protocol/types.cpp" line="208" column="1" bodyfile="libraries/chain/protocol/types.cpp" bodystart="208" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1chain_1a73a173337695630e6822823d79be872e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::chain::operator==</definition>
        <argsstring>(const extended_private_key_type &amp;p1, const extended_private_key_type &amp;p2)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structgraphene_1_1chain_1_1extended__private__key__type" kindref="compound">extended_private_key_type</ref> &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1chain_1_1extended__private__key__type" kindref="compound">extended_private_key_type</ref> &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/protocol/types.cpp" line="213" column="1" bodyfile="libraries/chain/protocol/types.cpp" bodystart="213" bodyend="216"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1chain_1a74618227987488f8f9289ee799676bf7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::chain::operator!=</definition>
        <argsstring>(const extended_private_key_type &amp;p1, const extended_private_key_type &amp;p2)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="structgraphene_1_1chain_1_1extended__private__key__type" kindref="compound">extended_private_key_type</ref> &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1chain_1_1extended__private__key__type" kindref="compound">extended_private_key_type</ref> &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/protocol/types.cpp" line="218" column="1" bodyfile="libraries/chain/protocol/types.cpp" bodystart="218" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1chain_1ac7e90d391ca2604c1c2451823a02f226" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::chain::sum_below_max_shares</definition>
        <argsstring>(const asset &amp;a, const asset &amp;b)</argsstring>
        <name>sum_below_max_shares</name>
        <param>
          <type>const <ref refid="structgraphene_1_1chain_1_1asset" kindref="compound">asset</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1chain_1_1asset" kindref="compound">asset</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/vesting_balance_object.cpp" line="29" column="1" bodyfile="libraries/chain/vesting_balance_object.cpp" bodystart="29" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1chain_1ad56e183c6c9ed1d460f01234978a93d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>graphene::chain::VESTING_VISITOR</definition>
        <argsstring>(on_deposit,)</argsstring>
        <name>VESTING_VISITOR</name>
        <param>
          <type>on_deposit</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/vesting_balance_object.cpp" line="185" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1chain_1a4d7940492779addd5c7bb392d0f73a09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>graphene::chain::VESTING_VISITOR</definition>
        <argsstring>(on_deposit_vested,)</argsstring>
        <name>VESTING_VISITOR</name>
        <param>
          <type>on_deposit_vested</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/vesting_balance_object.cpp" line="186" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1chain_1a2d9b9acaf45585a518fdd27e5497537c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>graphene::chain::VESTING_VISITOR</definition>
        <argsstring>(on_withdraw,)</argsstring>
        <name>VESTING_VISITOR</name>
        <param>
          <type>on_withdraw</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/vesting_balance_object.cpp" line="187" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1chain_1acee4274034b892102e2eef23bc0a683c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>graphene::chain::VESTING_VISITOR</definition>
        <argsstring>(is_deposit_allowed, const)</argsstring>
        <name>VESTING_VISITOR</name>
        <param>
          <type>is_deposit_allowed</type>
        </param>
        <param>
          <type>const</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/vesting_balance_object.cpp" line="188" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1chain_1a8da1dc86ef3a821a6a1ea9726a07f6ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>graphene::chain::VESTING_VISITOR</definition>
        <argsstring>(is_deposit_vested_allowed, const)</argsstring>
        <name>VESTING_VISITOR</name>
        <param>
          <type>is_deposit_vested_allowed</type>
        </param>
        <param>
          <type>const</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/vesting_balance_object.cpp" line="189" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1chain_1aa848546812def5efdc7028f4d0799a9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>graphene::chain::VESTING_VISITOR</definition>
        <argsstring>(is_withdraw_allowed, const)</argsstring>
        <name>VESTING_VISITOR</name>
        <param>
          <type>is_withdraw_allowed</type>
        </param>
        <param>
          <type>const</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/vesting_balance_object.cpp" line="190" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1chain_1ae871cc54243b70e72b47f1c7db4781ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>graphene::chain::VESTING_VISITOR</definition>
        <argsstring>(get_allowed_withdraw, const)</argsstring>
        <name>VESTING_VISITOR</name>
        <param>
          <type>get_allowed_withdraw</type>
        </param>
        <param>
          <type>const</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/vesting_balance_object.cpp" line="191" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="libraries/chain/account_evaluator.cpp" line="40" column="1"/>
  </compounddef>
</doxygen>
