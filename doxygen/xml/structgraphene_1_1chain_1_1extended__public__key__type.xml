<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structgraphene_1_1chain_1_1extended__public__key__type" kind="struct" language="C++" prot="public">
    <compoundname>graphene::chain::extended_public_key_type</compoundname>
    <includes refid="types_8hpp" local="no">types.hpp</includes>
    <innerclass refid="structgraphene_1_1chain_1_1extended__public__key__type_1_1binary__key" prot="public">graphene::chain::extended_public_key_type::binary_key</innerclass>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structgraphene_1_1chain_1_1extended__public__key__type_1a9e0f0b1f2ae00c1fd24b10bb7a7435d1" prot="public" static="no" mutable="no">
        <type>fc::ecc::extended_key_data</type>
        <definition>fc::ecc::extended_key_data graphene::chain::extended_public_key_type::key_data</definition>
        <argsstring></argsstring>
        <name>key_data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/types.hpp" line="272" column="1" bodyfile="libraries/chain/include/graphene/chain/protocol/types.hpp" bodystart="272" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structgraphene_1_1chain_1_1extended__public__key__type_1a50d167d7d0f0f5817b7392771395421a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>graphene::chain::extended_public_key_type::extended_public_key_type</definition>
        <argsstring>()</argsstring>
        <name>extended_public_key_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/types.hpp" line="274" column="1" bodyfile="libraries/chain/protocol/types.cpp" bodystart="117" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="structgraphene_1_1chain_1_1extended__public__key__type_1a32640da767e5bc27638be8d0037d5195" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>graphene::chain::extended_public_key_type::extended_public_key_type</definition>
        <argsstring>(const fc::ecc::extended_key_data &amp;data)</argsstring>
        <name>extended_public_key_type</name>
        <param>
          <type>const fc::ecc::extended_key_data &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/types.hpp" line="275" column="1" bodyfile="libraries/chain/protocol/types.cpp" bodystart="119" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="structgraphene_1_1chain_1_1extended__public__key__type_1a356b0c6f8d5ba4105994ec78284ce18b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>graphene::chain::extended_public_key_type::extended_public_key_type</definition>
        <argsstring>(const fc::ecc::extended_public_key &amp;extpubkey)</argsstring>
        <name>extended_public_key_type</name>
        <param>
          <type>const fc::ecc::extended_public_key &amp;</type>
          <declname>extpubkey</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/types.hpp" line="276" column="1" bodyfile="libraries/chain/protocol/types.cpp" bodystart="122" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="structgraphene_1_1chain_1_1extended__public__key__type_1a3aa00bdd4b1d200f1836ffa5cfd0c58b" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>graphene::chain::extended_public_key_type::extended_public_key_type</definition>
        <argsstring>(const std::string &amp;base58str)</argsstring>
        <name>extended_public_key_type</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>base58str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/types.hpp" line="277" column="1" bodyfile="libraries/chain/protocol/types.cpp" bodystart="127" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="structgraphene_1_1chain_1_1extended__public__key__type_1ab94b280a8bde4834b94855e4f664297e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>graphene::chain::extended_public_key_type::operator fc::ecc::extended_public_key</definition>
        <argsstring>() const</argsstring>
        <name>operator fc::ecc::extended_public_key</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/types.hpp" line="278" column="1" bodyfile="libraries/chain/protocol/types.cpp" bodystart="140" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="structgraphene_1_1chain_1_1extended__public__key__type_1aa93fdd0fdd3ad9eac43a7e649c41fba5" prot="public" static="no" const="yes" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>graphene::chain::extended_public_key_type::operator std::string</definition>
        <argsstring>() const</argsstring>
        <name>operator std::string</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/types.hpp" line="279" column="1" bodyfile="libraries/chain/protocol/types.cpp" bodystart="145" bodyend="152"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="structgraphene_1_1chain_1_1extended__public__key__type_1a2e9b2612466e53f18ef8996596662a9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const extended_public_key_type &amp;p1, const fc::ecc::extended_public_key &amp;p2)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structgraphene_1_1chain_1_1extended__public__key__type" kindref="compound">extended_public_key_type</ref> &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const fc::ecc::extended_public_key &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/types.hpp" line="280" column="1" bodyfile="libraries/chain/protocol/types.cpp" bodystart="154" bodyend="157"/>
      </memberdef>
      <memberdef kind="friend" id="structgraphene_1_1chain_1_1extended__public__key__type_1a12474c89b1f131f406ea4ae8556b3c59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const extended_public_key_type &amp;p1, const extended_public_key_type &amp;p2)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structgraphene_1_1chain_1_1extended__public__key__type" kindref="compound">extended_public_key_type</ref> &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1chain_1_1extended__public__key__type" kindref="compound">extended_public_key_type</ref> &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/types.hpp" line="281" column="1" bodyfile="libraries/chain/protocol/types.cpp" bodystart="159" bodyend="162"/>
      </memberdef>
      <memberdef kind="friend" id="structgraphene_1_1chain_1_1extended__public__key__type_1adbb21a808930f0a4b82b78d6cf497659" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const extended_public_key_type &amp;p1, const extended_public_key_type &amp;p2)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="structgraphene_1_1chain_1_1extended__public__key__type" kindref="compound">extended_public_key_type</ref> &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1chain_1_1extended__public__key__type" kindref="compound">extended_public_key_type</ref> &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/types.hpp" line="282" column="1" bodyfile="libraries/chain/protocol/types.cpp" bodystart="164" bodyend="167"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="libraries/chain/include/graphene/chain/protocol/types.hpp" line="264" column="1" bodyfile="libraries/chain/include/graphene/chain/protocol/types.hpp" bodystart="263" bodyend="283"/>
    <listofallmembers>
      <member refid="structgraphene_1_1chain_1_1extended__public__key__type_1a50d167d7d0f0f5817b7392771395421a" prot="public" virt="non-virtual"><scope>graphene::chain::extended_public_key_type</scope><name>extended_public_key_type</name></member>
      <member refid="structgraphene_1_1chain_1_1extended__public__key__type_1a32640da767e5bc27638be8d0037d5195" prot="public" virt="non-virtual"><scope>graphene::chain::extended_public_key_type</scope><name>extended_public_key_type</name></member>
      <member refid="structgraphene_1_1chain_1_1extended__public__key__type_1a356b0c6f8d5ba4105994ec78284ce18b" prot="public" virt="non-virtual"><scope>graphene::chain::extended_public_key_type</scope><name>extended_public_key_type</name></member>
      <member refid="structgraphene_1_1chain_1_1extended__public__key__type_1a3aa00bdd4b1d200f1836ffa5cfd0c58b" prot="public" virt="non-virtual"><scope>graphene::chain::extended_public_key_type</scope><name>extended_public_key_type</name></member>
      <member refid="structgraphene_1_1chain_1_1extended__public__key__type_1a9e0f0b1f2ae00c1fd24b10bb7a7435d1" prot="public" virt="non-virtual"><scope>graphene::chain::extended_public_key_type</scope><name>key_data</name></member>
      <member refid="structgraphene_1_1chain_1_1extended__public__key__type_1ab94b280a8bde4834b94855e4f664297e" prot="public" virt="non-virtual"><scope>graphene::chain::extended_public_key_type</scope><name>operator fc::ecc::extended_public_key</name></member>
      <member refid="structgraphene_1_1chain_1_1extended__public__key__type_1aa93fdd0fdd3ad9eac43a7e649c41fba5" prot="public" virt="non-virtual"><scope>graphene::chain::extended_public_key_type</scope><name>operator std::string</name></member>
      <member refid="structgraphene_1_1chain_1_1extended__public__key__type_1adbb21a808930f0a4b82b78d6cf497659" prot="public" virt="non-virtual"><scope>graphene::chain::extended_public_key_type</scope><name>operator!=</name></member>
      <member refid="structgraphene_1_1chain_1_1extended__public__key__type_1a2e9b2612466e53f18ef8996596662a9f" prot="public" virt="non-virtual"><scope>graphene::chain::extended_public_key_type</scope><name>operator==</name></member>
      <member refid="structgraphene_1_1chain_1_1extended__public__key__type_1a12474c89b1f131f406ea4ae8556b3c59" prot="public" virt="non-virtual"><scope>graphene::chain::extended_public_key_type</scope><name>operator==</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
