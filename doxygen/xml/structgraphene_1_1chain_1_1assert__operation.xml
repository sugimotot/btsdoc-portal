<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structgraphene_1_1chain_1_1assert__operation" kind="struct" language="C++" prot="public">
    <compoundname>graphene::chain::assert_operation</compoundname>
    <basecompoundref refid="structgraphene_1_1chain_1_1base__operation" prot="public" virt="non-virtual">graphene::chain::base_operation</basecompoundref>
    <includes refid="assert_8hpp" local="no">assert.hpp</includes>
    <innerclass refid="structgraphene_1_1chain_1_1assert__operation_1_1fee__parameters__type" prot="public">graphene::chain::assert_operation::fee_parameters_type</innerclass>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structgraphene_1_1chain_1_1assert__operation_1a986eda79f46cc52e8cadfdc8844b69c8" prot="public" static="no" mutable="no">
        <type><ref refid="structgraphene_1_1chain_1_1asset" kindref="compound">asset</ref></type>
        <definition>asset graphene::chain::assert_operation::fee</definition>
        <argsstring></argsstring>
        <name>fee</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/assert.hpp" line="95" column="1" bodyfile="libraries/chain/include/graphene/chain/protocol/assert.hpp" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structgraphene_1_1chain_1_1assert__operation_1a9e17007a4200b8c83e5b0f8068731603" prot="public" static="no" mutable="no">
        <type><ref refid="namespacegraphene_1_1chain_1a11927fb343f953514ab6235d6e7233ee" kindref="member">account_id_type</ref></type>
        <definition>account_id_type graphene::chain::assert_operation::fee_paying_account</definition>
        <argsstring></argsstring>
        <name>fee_paying_account</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/assert.hpp" line="96" column="1" bodyfile="libraries/chain/include/graphene/chain/protocol/assert.hpp" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structgraphene_1_1chain_1_1assert__operation_1a07ddba548b1d19ccb865deb2c02db54c" prot="public" static="no" mutable="no">
        <type>vector&lt; <ref refid="namespacegraphene_1_1chain_1a21d382f9713398018eaf0c67f61b9bc1" kindref="member">predicate</ref> &gt;</type>
        <definition>vector&lt;predicate&gt; graphene::chain::assert_operation::predicates</definition>
        <argsstring></argsstring>
        <name>predicates</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/assert.hpp" line="97" column="1" bodyfile="libraries/chain/include/graphene/chain/protocol/assert.hpp" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structgraphene_1_1chain_1_1assert__operation_1a9f9c41e0ee860173626bee72e6748f8a" prot="public" static="no" mutable="no">
        <type>flat_set&lt; <ref refid="namespacegraphene_1_1chain_1a11927fb343f953514ab6235d6e7233ee" kindref="member">account_id_type</ref> &gt;</type>
        <definition>flat_set&lt;account_id_type&gt; graphene::chain::assert_operation::required_auths</definition>
        <argsstring></argsstring>
        <name>required_auths</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/assert.hpp" line="98" column="1" bodyfile="libraries/chain/include/graphene/chain/protocol/assert.hpp" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structgraphene_1_1chain_1_1assert__operation_1a5b0be39dd72bac52454928cab9e168a9" prot="public" static="no" mutable="no">
        <type><ref refid="group__operations_1gae0096750377f6e9d61dba5765284de99" kindref="member">extensions_type</ref></type>
        <definition>extensions_type graphene::chain::assert_operation::extensions</definition>
        <argsstring></argsstring>
        <name>extensions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/assert.hpp" line="99" column="1" bodyfile="libraries/chain/include/graphene/chain/protocol/assert.hpp" bodystart="99" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structgraphene_1_1chain_1_1assert__operation_1ad0ac6c659d15ddfd44ebe7acfa81884d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacegraphene_1_1chain_1a11927fb343f953514ab6235d6e7233ee" kindref="member">account_id_type</ref></type>
        <definition>account_id_type graphene::chain::assert_operation::fee_payer</definition>
        <argsstring>() const</argsstring>
        <name>fee_payer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/assert.hpp" line="101" column="1" bodyfile="libraries/chain/include/graphene/chain/protocol/assert.hpp" bodystart="101" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="structgraphene_1_1chain_1_1assert__operation_1a6b861a5e6a2f32a7c5fc6b1cb2a1cc38" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::chain::assert_operation::validate</definition>
        <argsstring>() const</argsstring>
        <name>validate</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/assert.hpp" line="102" column="1" bodyfile="libraries/chain/protocol/assert.cpp" bodystart="49" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="structgraphene_1_1chain_1_1assert__operation_1a88fbc36f8f4c2283ff80565b0ac212b1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacegraphene_1_1chain_1ab4bea4aef5fe40c66b42537da931bffe" kindref="member">share_type</ref></type>
        <definition>share_type graphene::chain::assert_operation::calculate_fee</definition>
        <argsstring>(const fee_parameters_type &amp;k) const</argsstring>
        <name>calculate_fee</name>
        <param>
          <type>const <ref refid="structgraphene_1_1chain_1_1assert__operation_1_1fee__parameters__type" kindref="compound">fee_parameters_type</ref> &amp;</type>
          <declname>k</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The fee for assert operations is proportional to their size, but cheaper than a data fee because they require no storage </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/assert.hpp" line="103" column="1" bodyfile="libraries/chain/protocol/assert.cpp" bodystart="60" bodyend="63"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>assert that some conditions are true.</para><para>This operation performs no changes to the database state, but can but used to verify pre or post conditions for other operations. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="356">
        <label>graphene::chain::assert_operation</label>
        <link refid="structgraphene_1_1chain_1_1assert__operation"/>
        <childnode refid="357" relation="public-inheritance">
        </childnode>
      </node>
      <node id="357">
        <label>graphene::chain::base_operation</label>
        <link refid="structgraphene_1_1chain_1_1base__operation"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="360">
        <label>flat_set&lt; future_extensions &gt;</label>
      </node>
      <node id="364">
        <label>flat_set&lt; account_id_type &gt;</label>
      </node>
      <node id="358">
        <label>graphene::chain::assert_operation</label>
        <link refid="structgraphene_1_1chain_1_1assert__operation"/>
        <childnode refid="359" relation="public-inheritance">
        </childnode>
        <childnode refid="360" relation="usage">
          <edgelabel>extensions</edgelabel>
        </childnode>
        <childnode refid="361" relation="usage">
          <edgelabel>predicates</edgelabel>
        </childnode>
        <childnode refid="362" relation="usage">
          <edgelabel>fee</edgelabel>
        </childnode>
        <childnode refid="364" relation="usage">
          <edgelabel>required_auths</edgelabel>
        </childnode>
      </node>
      <node id="361">
        <label>vector&lt; predicate &gt;</label>
      </node>
      <node id="359">
        <label>graphene::chain::base_operation</label>
        <link refid="structgraphene_1_1chain_1_1base__operation"/>
      </node>
      <node id="362">
        <label>graphene::chain::asset</label>
        <link refid="structgraphene_1_1chain_1_1asset"/>
        <childnode refid="363" relation="usage">
          <edgelabel>amount</edgelabel>
        </childnode>
      </node>
      <node id="363">
        <label>safe&lt; int64_t &gt;</label>
      </node>
    </collaborationgraph>
    <location file="libraries/chain/include/graphene/chain/protocol/assert.hpp" line="92" column="1" bodyfile="libraries/chain/include/graphene/chain/protocol/assert.hpp" bodystart="91" bodyend="104"/>
    <listofallmembers>
      <member refid="structgraphene_1_1chain_1_1base__operation_1a8947f5ff3ea0458c7fe981b5bb9e82b7" prot="public" virt="non-virtual"><scope>graphene::chain::assert_operation</scope><name>calculate_data_fee</name></member>
      <member refid="structgraphene_1_1chain_1_1assert__operation_1a88fbc36f8f4c2283ff80565b0ac212b1" prot="public" virt="non-virtual"><scope>graphene::chain::assert_operation</scope><name>calculate_fee</name></member>
      <member refid="structgraphene_1_1chain_1_1base__operation_1a18b678eb05bc5b30d75f10b398c07a91" prot="public" virt="non-virtual" ambiguityscope="graphene::chain::base_operation::"><scope>graphene::chain::assert_operation</scope><name>calculate_fee</name></member>
      <member refid="structgraphene_1_1chain_1_1assert__operation_1a5b0be39dd72bac52454928cab9e168a9" prot="public" virt="non-virtual"><scope>graphene::chain::assert_operation</scope><name>extensions</name></member>
      <member refid="structgraphene_1_1chain_1_1assert__operation_1a986eda79f46cc52e8cadfdc8844b69c8" prot="public" virt="non-virtual"><scope>graphene::chain::assert_operation</scope><name>fee</name></member>
      <member refid="structgraphene_1_1chain_1_1assert__operation_1ad0ac6c659d15ddfd44ebe7acfa81884d" prot="public" virt="non-virtual"><scope>graphene::chain::assert_operation</scope><name>fee_payer</name></member>
      <member refid="structgraphene_1_1chain_1_1assert__operation_1a9e17007a4200b8c83e5b0f8068731603" prot="public" virt="non-virtual"><scope>graphene::chain::assert_operation</scope><name>fee_paying_account</name></member>
      <member refid="structgraphene_1_1chain_1_1base__operation_1a1d398b2f68e1dca5f453b86655a64c41" prot="public" virt="non-virtual"><scope>graphene::chain::assert_operation</scope><name>get_required_active_authorities</name></member>
      <member refid="structgraphene_1_1chain_1_1base__operation_1ac7e2861a01bbaef8fbe5c5dcf5e73b38" prot="public" virt="non-virtual"><scope>graphene::chain::assert_operation</scope><name>get_required_authorities</name></member>
      <member refid="structgraphene_1_1chain_1_1base__operation_1aff6e2d2b66117c8c87f6a6e7e7ddba1f" prot="public" virt="non-virtual"><scope>graphene::chain::assert_operation</scope><name>get_required_owner_authorities</name></member>
      <member refid="structgraphene_1_1chain_1_1assert__operation_1a07ddba548b1d19ccb865deb2c02db54c" prot="public" virt="non-virtual"><scope>graphene::chain::assert_operation</scope><name>predicates</name></member>
      <member refid="structgraphene_1_1chain_1_1assert__operation_1a9f9c41e0ee860173626bee72e6748f8a" prot="public" virt="non-virtual"><scope>graphene::chain::assert_operation</scope><name>required_auths</name></member>
      <member refid="structgraphene_1_1chain_1_1assert__operation_1a6b861a5e6a2f32a7c5fc6b1cb2a1cc38" prot="public" virt="non-virtual"><scope>graphene::chain::assert_operation</scope><name>validate</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
