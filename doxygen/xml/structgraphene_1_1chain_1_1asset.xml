<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structgraphene_1_1chain_1_1asset" kind="struct" language="C++" prot="public">
    <compoundname>graphene::chain::asset</compoundname>
    <includes refid="asset_8hpp" local="no">asset.hpp</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structgraphene_1_1chain_1_1asset_1a3b891d6269ae18c5eeabdc7f40d7f012" prot="public" static="no" mutable="no">
        <type><ref refid="namespacegraphene_1_1chain_1ab4bea4aef5fe40c66b42537da931bffe" kindref="member">share_type</ref></type>
        <definition>share_type graphene::chain::asset::amount</definition>
        <argsstring></argsstring>
        <name>amount</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/asset.hpp" line="37" column="1" bodyfile="libraries/chain/include/graphene/chain/protocol/asset.hpp" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structgraphene_1_1chain_1_1asset_1a872a9bc08169591423c31ec44ae97448" prot="public" static="no" mutable="no">
        <type><ref refid="namespacegraphene_1_1chain_1a8719a403aa47e9d369890c01d60d0bb2" kindref="member">asset_id_type</ref></type>
        <definition>asset_id_type graphene::chain::asset::asset_id</definition>
        <argsstring></argsstring>
        <name>asset_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/asset.hpp" line="38" column="1" bodyfile="libraries/chain/include/graphene/chain/protocol/asset.hpp" bodystart="38" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structgraphene_1_1chain_1_1asset_1aa1beae1ce665a59af5872e9154ad10f8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>graphene::chain::asset::asset</definition>
        <argsstring>(share_type a=0, asset_id_type id=asset_id_type())</argsstring>
        <name>asset</name>
        <param>
          <type><ref refid="namespacegraphene_1_1chain_1ab4bea4aef5fe40c66b42537da931bffe" kindref="member">share_type</ref></type>
          <declname>a</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="namespacegraphene_1_1chain_1a8719a403aa47e9d369890c01d60d0bb2" kindref="member">asset_id_type</ref></type>
          <declname>id</declname>
          <defval><ref refid="namespacegraphene_1_1chain_1a8719a403aa47e9d369890c01d60d0bb2" kindref="member">asset_id_type</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/asset.hpp" line="34" column="1" bodyfile="libraries/chain/include/graphene/chain/protocol/asset.hpp" bodystart="34" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="structgraphene_1_1chain_1_1asset_1a56bec1143f03f1de2efb62c38fdc77d4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structgraphene_1_1chain_1_1asset" kindref="compound">asset</ref> &amp;</type>
        <definition>asset&amp; graphene::chain::asset::operator+=</definition>
        <argsstring>(const asset &amp;o)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="structgraphene_1_1chain_1_1asset" kindref="compound">asset</ref> &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/asset.hpp" line="40" column="1" bodyfile="libraries/chain/include/graphene/chain/protocol/asset.hpp" bodystart="40" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="structgraphene_1_1chain_1_1asset_1a0569ace9fe43de77f748d5b3cf288fbd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structgraphene_1_1chain_1_1asset" kindref="compound">asset</ref> &amp;</type>
        <definition>asset&amp; graphene::chain::asset::operator-=</definition>
        <argsstring>(const asset &amp;o)</argsstring>
        <name>operator-=</name>
        <param>
          <type>const <ref refid="structgraphene_1_1chain_1_1asset" kindref="compound">asset</ref> &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/asset.hpp" line="46" column="1" bodyfile="libraries/chain/include/graphene/chain/protocol/asset.hpp" bodystart="46" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="structgraphene_1_1chain_1_1asset_1a35858072c29715def5a24db6af0095ca" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structgraphene_1_1chain_1_1asset" kindref="compound">asset</ref></type>
        <definition>asset graphene::chain::asset::operator-</definition>
        <argsstring>() const</argsstring>
        <name>operator-</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/asset.hpp" line="52" column="1" bodyfile="libraries/chain/include/graphene/chain/protocol/asset.hpp" bodystart="52" bodyend="52"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="structgraphene_1_1chain_1_1asset_1a8c79ce3d3e367c6345a8c5cb75bab48d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const asset &amp;a, const asset &amp;b)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structgraphene_1_1chain_1_1asset" kindref="compound">asset</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1chain_1_1asset" kindref="compound">asset</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/asset.hpp" line="54" column="1" bodyfile="libraries/chain/include/graphene/chain/protocol/asset.hpp" bodystart="54" bodyend="57"/>
      </memberdef>
      <memberdef kind="friend" id="structgraphene_1_1chain_1_1asset_1a4c5d8977b23e534426a070f568524d02" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator&lt;</definition>
        <argsstring>(const asset &amp;a, const asset &amp;b)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="structgraphene_1_1chain_1_1asset" kindref="compound">asset</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1chain_1_1asset" kindref="compound">asset</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/asset.hpp" line="58" column="1" bodyfile="libraries/chain/include/graphene/chain/protocol/asset.hpp" bodystart="58" bodyend="62"/>
      </memberdef>
      <memberdef kind="friend" id="structgraphene_1_1chain_1_1asset_1a9d586e9b54232432779a91e2d6d8b78e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator&lt;=</definition>
        <argsstring>(const asset &amp;a, const asset &amp;b)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="structgraphene_1_1chain_1_1asset" kindref="compound">asset</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1chain_1_1asset" kindref="compound">asset</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/asset.hpp" line="63" column="1" bodyfile="libraries/chain/include/graphene/chain/protocol/asset.hpp" bodystart="63" bodyend="66"/>
      </memberdef>
      <memberdef kind="friend" id="structgraphene_1_1chain_1_1asset_1adb0577649f2f48023169390b0b78e234" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const asset &amp;a, const asset &amp;b)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="structgraphene_1_1chain_1_1asset" kindref="compound">asset</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1chain_1_1asset" kindref="compound">asset</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/asset.hpp" line="68" column="1" bodyfile="libraries/chain/include/graphene/chain/protocol/asset.hpp" bodystart="68" bodyend="71"/>
      </memberdef>
      <memberdef kind="friend" id="structgraphene_1_1chain_1_1asset_1a88d1352c1cf2b7377292377449a4ced8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator&gt;</definition>
        <argsstring>(const asset &amp;a, const asset &amp;b)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="structgraphene_1_1chain_1_1asset" kindref="compound">asset</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1chain_1_1asset" kindref="compound">asset</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/asset.hpp" line="72" column="1" bodyfile="libraries/chain/include/graphene/chain/protocol/asset.hpp" bodystart="72" bodyend="75"/>
      </memberdef>
      <memberdef kind="friend" id="structgraphene_1_1chain_1_1asset_1aa5ae6feb2c7097211820fc31cf24b5f5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator&gt;=</definition>
        <argsstring>(const asset &amp;a, const asset &amp;b)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="structgraphene_1_1chain_1_1asset" kindref="compound">asset</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1chain_1_1asset" kindref="compound">asset</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/asset.hpp" line="76" column="1" bodyfile="libraries/chain/include/graphene/chain/protocol/asset.hpp" bodystart="76" bodyend="79"/>
      </memberdef>
      <memberdef kind="friend" id="structgraphene_1_1chain_1_1asset_1a101f03e631cf8c72d8094b91a5524207" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="structgraphene_1_1chain_1_1asset" kindref="compound">asset</ref></type>
        <definition>asset operator-</definition>
        <argsstring>(const asset &amp;a, const asset &amp;b)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="structgraphene_1_1chain_1_1asset" kindref="compound">asset</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1chain_1_1asset" kindref="compound">asset</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/asset.hpp" line="81" column="1" bodyfile="libraries/chain/include/graphene/chain/protocol/asset.hpp" bodystart="81" bodyend="85"/>
      </memberdef>
      <memberdef kind="friend" id="structgraphene_1_1chain_1_1asset_1a606c72fe4e28b359ba977a6043f56300" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="structgraphene_1_1chain_1_1asset" kindref="compound">asset</ref></type>
        <definition>asset operator+</definition>
        <argsstring>(const asset &amp;a, const asset &amp;b)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="structgraphene_1_1chain_1_1asset" kindref="compound">asset</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1chain_1_1asset" kindref="compound">asset</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/asset.hpp" line="86" column="1" bodyfile="libraries/chain/include/graphene/chain/protocol/asset.hpp" bodystart="86" bodyend="90"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structgraphene_1_1chain_1_1asset_1aa6b39c2e24de7bfbfebd82f4dd8459e3" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacegraphene_1_1chain_1ab4bea4aef5fe40c66b42537da931bffe" kindref="member">share_type</ref></type>
        <definition>static share_type graphene::chain::asset::scaled_precision</definition>
        <argsstring>(uint8_t precision)</argsstring>
        <name>scaled_precision</name>
        <param>
          <type>uint8_t</type>
          <declname>precision</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/asset.hpp" line="92" column="1" bodyfile="libraries/chain/include/graphene/chain/protocol/asset.hpp" bodystart="92" bodyend="96"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="366">
        <label>graphene::chain::asset</label>
        <link refid="structgraphene_1_1chain_1_1asset"/>
        <childnode refid="367" relation="usage">
          <edgelabel>amount</edgelabel>
        </childnode>
      </node>
      <node id="367">
        <label>safe&lt; int64_t &gt;</label>
      </node>
    </collaborationgraph>
    <location file="libraries/chain/include/graphene/chain/protocol/asset.hpp" line="33" column="1" bodyfile="libraries/chain/include/graphene/chain/protocol/asset.hpp" bodystart="32" bodyend="97"/>
    <listofallmembers>
      <member refid="structgraphene_1_1chain_1_1asset_1a3b891d6269ae18c5eeabdc7f40d7f012" prot="public" virt="non-virtual"><scope>graphene::chain::asset</scope><name>amount</name></member>
      <member refid="structgraphene_1_1chain_1_1asset_1aa1beae1ce665a59af5872e9154ad10f8" prot="public" virt="non-virtual"><scope>graphene::chain::asset</scope><name>asset</name></member>
      <member refid="structgraphene_1_1chain_1_1asset_1a872a9bc08169591423c31ec44ae97448" prot="public" virt="non-virtual"><scope>graphene::chain::asset</scope><name>asset_id</name></member>
      <member refid="structgraphene_1_1chain_1_1asset_1adb0577649f2f48023169390b0b78e234" prot="public" virt="non-virtual"><scope>graphene::chain::asset</scope><name>operator!=</name></member>
      <member refid="structgraphene_1_1chain_1_1asset_1a606c72fe4e28b359ba977a6043f56300" prot="public" virt="non-virtual"><scope>graphene::chain::asset</scope><name>operator+</name></member>
      <member refid="structgraphene_1_1chain_1_1asset_1a56bec1143f03f1de2efb62c38fdc77d4" prot="public" virt="non-virtual"><scope>graphene::chain::asset</scope><name>operator+=</name></member>
      <member refid="structgraphene_1_1chain_1_1asset_1a35858072c29715def5a24db6af0095ca" prot="public" virt="non-virtual"><scope>graphene::chain::asset</scope><name>operator-</name></member>
      <member refid="structgraphene_1_1chain_1_1asset_1a101f03e631cf8c72d8094b91a5524207" prot="public" virt="non-virtual"><scope>graphene::chain::asset</scope><name>operator-</name></member>
      <member refid="structgraphene_1_1chain_1_1asset_1a0569ace9fe43de77f748d5b3cf288fbd" prot="public" virt="non-virtual"><scope>graphene::chain::asset</scope><name>operator-=</name></member>
      <member refid="structgraphene_1_1chain_1_1asset_1a4c5d8977b23e534426a070f568524d02" prot="public" virt="non-virtual"><scope>graphene::chain::asset</scope><name>operator&lt;</name></member>
      <member refid="structgraphene_1_1chain_1_1asset_1a9d586e9b54232432779a91e2d6d8b78e" prot="public" virt="non-virtual"><scope>graphene::chain::asset</scope><name>operator&lt;=</name></member>
      <member refid="structgraphene_1_1chain_1_1asset_1a8c79ce3d3e367c6345a8c5cb75bab48d" prot="public" virt="non-virtual"><scope>graphene::chain::asset</scope><name>operator==</name></member>
      <member refid="structgraphene_1_1chain_1_1asset_1a88d1352c1cf2b7377292377449a4ced8" prot="public" virt="non-virtual"><scope>graphene::chain::asset</scope><name>operator&gt;</name></member>
      <member refid="structgraphene_1_1chain_1_1asset_1aa5ae6feb2c7097211820fc31cf24b5f5" prot="public" virt="non-virtual"><scope>graphene::chain::asset</scope><name>operator&gt;=</name></member>
      <member refid="structgraphene_1_1chain_1_1asset_1aa6b39c2e24de7bfbfebd82f4dd8459e3" prot="public" virt="non-virtual"><scope>graphene::chain::asset</scope><name>scaled_precision</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
