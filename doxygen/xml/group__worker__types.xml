<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="group__worker__types" kind="group">
    <compoundname>worker_types</compoundname>
    <title>Implementations of the various worker types in the system</title>
    <innerclass refid="structgraphene_1_1chain_1_1refund__worker__type" prot="public">graphene::chain::refund_worker_type</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1vesting__balance__worker__type" prot="public">graphene::chain::vesting_balance_worker_type</innerclass>
    <innerclass refid="structgraphene_1_1chain_1_1burn__worker__type" prot="public">graphene::chain::burn_worker_type</innerclass>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>The system has various worker types, which do different things with the money they are paid. These worker types and their semantics are specified here.</para><para>All worker types exist as a struct containing the data this worker needs to evaluate, as well as a method pay_worker, which takes a pay amount and a non-const database reference, and applies the worker&apos;s specific pay semantics to the worker_type struct and/or the database. Furthermore, all worker types have an initializer, which is a struct containing the data needed to create that kind of worker.</para><para>Each initializer type has a method, init, which takes a non-const database reference, a const reference to the worker object being created, and a non-const reference to the specific *_worker_type object to initialize. The init method creates any further objects, and initializes the worker_type object as necessary according to the semantics of that particular worker type.</para><para>To create a new worker type, define a my_new_worker_type struct with a pay_worker method which updates the my_new_worker_type object and/or the database. Create a my_new_worker_type::initializer struct with an init method and any data members necessary to create a new worker of this type. Reflect my_new_worker_type and my_new_worker_type::initializer into FC&apos;s type system, and add them to <ref refid="namespacegraphene_1_1chain_1aff2faab1253f21209aaad5771fdda38c" kindref="member">worker_type</ref> and <ref refid="group__workers_1ga13df48976822df52f83ec69a458e4d46" kindref="member">worker_initializer</ref> respectively. Make sure the order of types in <ref refid="namespacegraphene_1_1chain_1aff2faab1253f21209aaad5771fdda38c" kindref="member">worker_type</ref> and <ref refid="group__workers_1ga13df48976822df52f83ec69a458e4d46" kindref="member">worker_initializer</ref> remains the same. </para>    </detaileddescription>
  </compounddef>
</doxygen>
