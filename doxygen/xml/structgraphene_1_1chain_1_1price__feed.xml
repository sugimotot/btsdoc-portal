<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structgraphene_1_1chain_1_1price__feed" kind="class" language="C++" prot="public">
    <compoundname>graphene::chain::price_feed</compoundname>
    <includes refid="asset_8hpp" local="no">asset.hpp</includes>
      <sectiondef kind="user-defined">
      <memberdef kind="variable" id="structgraphene_1_1chain_1_1price__feed_1aa3c189341dddad4392f98820b860a07a" prot="public" static="no" mutable="no">
        <type><ref refid="structgraphene_1_1chain_1_1price" kindref="compound">price</ref></type>
        <definition>price graphene::chain::price_feed::settlement_price</definition>
        <argsstring></argsstring>
        <name>settlement_price</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Required maintenance collateral is defined as a fixed point number with a maximum value of 10.000 and a minimum value of 1.000. (denominated in GRAPHENE_COLLATERAL_RATIO_DENOM)</para><para>A black swan event occurs when value_of_collateral equals value_of_debt, to avoid a black swan a margin call is executed when value_of_debt * required_maintenance_collateral equals value_of_collateral using rate.</para><para>Default requirement is $1.75 of collateral per $1 of debt</para><para>BlackSwan <mdash/>&gt; SQR <mdash/>&gt; MCR -<mdash/>&gt; SP Forced settlements will evaluate using this price, defined as BITASSET / COLLATERAL </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/asset.hpp" line="173" column="1" bodyfile="libraries/chain/include/graphene/chain/protocol/asset.hpp" bodystart="173" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structgraphene_1_1chain_1_1price__feed_1ae908c41b403d61d3cce55007da6c6cf8" prot="public" static="no" mutable="no">
        <type><ref refid="structgraphene_1_1chain_1_1price" kindref="compound">price</ref></type>
        <definition>price graphene::chain::price_feed::core_exchange_rate</definition>
        <argsstring></argsstring>
        <name>core_exchange_rate</name>
        <briefdescription>
<para>Price at which automatically exchanging this asset for CORE from fee pool occurs (used for paying fees) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/asset.hpp" line="176" column="1" bodyfile="libraries/chain/include/graphene/chain/protocol/asset.hpp" bodystart="176" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structgraphene_1_1chain_1_1price__feed_1a439532e13d2b6aef443aeb3d00b40281" prot="public" static="no" mutable="no">
        <type>uint16_t</type>
        <definition>uint16_t graphene::chain::price_feed::maintenance_collateral_ratio</definition>
        <argsstring></argsstring>
        <name>maintenance_collateral_ratio</name>
        <initializer>= <ref refid="config_8hpp_1a088a6500f643fafb7334b33bbea0231a" kindref="member">GRAPHENE_DEFAULT_MAINTENANCE_COLLATERAL_RATIO</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Fixed point between 1.000 and 10.000, implied fixed point denominator is GRAPHENE_COLLATERAL_RATIO_DENOM </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/asset.hpp" line="179" column="1" bodyfile="libraries/chain/include/graphene/chain/protocol/asset.hpp" bodystart="179" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structgraphene_1_1chain_1_1price__feed_1ade63ae5128fdb1373fdf67d769eb2951" prot="public" static="no" mutable="no">
        <type>uint16_t</type>
        <definition>uint16_t graphene::chain::price_feed::maximum_short_squeeze_ratio</definition>
        <argsstring></argsstring>
        <name>maximum_short_squeeze_ratio</name>
        <initializer>= <ref refid="config_8hpp_1ac958a0ef18d1ca306502634fc8946d96" kindref="member">GRAPHENE_DEFAULT_MAX_SHORT_SQUEEZE_RATIO</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Fixed point between 1.000 and 10.000, implied fixed point denominator is GRAPHENE_COLLATERAL_RATIO_DENOM </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/asset.hpp" line="182" column="1" bodyfile="libraries/chain/include/graphene/chain/protocol/asset.hpp" bodystart="182" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="structgraphene_1_1chain_1_1price__feed_1a2c303acae96e84c266f2ac33c848e63e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structgraphene_1_1chain_1_1price" kindref="compound">price</ref></type>
        <definition>price graphene::chain::price_feed::max_short_squeeze_price</definition>
        <argsstring>() const</argsstring>
        <name>max_short_squeeze_price</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>When updating a call order the following condition must be maintained:</para><para>debt * maintenance_price() &lt; collateral debt * settlement_price &lt; debt * maintenance debt * maintenance_price() &lt; debt * <ref refid="structgraphene_1_1chain_1_1price__feed_1a2c303acae96e84c266f2ac33c848e63e" kindref="member">max_short_squeeze_price()</ref> price maintenance_price()const;When selling collateral to pay off debt, the least amount of debt to receive should be min_usd = <ref refid="structgraphene_1_1chain_1_1price__feed_1a2c303acae96e84c266f2ac33c848e63e" kindref="member">max_short_squeeze_price()</ref> * collateral</para><para>This is provided to ensure that a black swan cannot be trigged due to poor liquidity alone, it must be confirmed by having the <ref refid="structgraphene_1_1chain_1_1price__feed_1a2c303acae96e84c266f2ac33c848e63e" kindref="member">max_short_squeeze_price()</ref> move below the black swan price. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/asset.hpp" line="199" column="1" bodyfile="libraries/chain/protocol/asset.cpp" bodystart="169" bodyend="179"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structgraphene_1_1chain_1_1price__feed_1a38f9229b87f5cadd554ac3eae27ed1a3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::chain::price_feed::validate</definition>
        <argsstring>() const</argsstring>
        <name>validate</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/asset.hpp" line="208" column="1" bodyfile="libraries/chain/protocol/asset.cpp" bodystart="142" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="structgraphene_1_1chain_1_1price__feed_1a7feee2abe4ec7f173d5fdf49fd464497" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::chain::price_feed::is_for</definition>
        <argsstring>(asset_id_type asset_id) const</argsstring>
        <name>is_for</name>
        <param>
          <type><ref refid="namespacegraphene_1_1chain_1a8719a403aa47e9d369890c01d60d0bb2" kindref="member">asset_id_type</ref></type>
          <declname>asset_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/asset.hpp" line="209" column="1" bodyfile="libraries/chain/protocol/asset.cpp" bodystart="155" bodyend="167"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="structgraphene_1_1chain_1_1price__feed_1a74702de56c3c544fad20152a6d709194" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const price_feed &amp;a, const price_feed &amp;b)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structgraphene_1_1chain_1_1price__feed" kindref="compound">price_feed</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1chain_1_1price__feed" kindref="compound">price_feed</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/asset.hpp" line="202" column="1" bodyfile="libraries/chain/include/graphene/chain/protocol/asset.hpp" bodystart="202" bodyend="206"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>defines market parameters for margin positions </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="2388">
        <label>graphene::chain::price</label>
        <link refid="structgraphene_1_1chain_1_1price"/>
        <childnode refid="2389" relation="usage">
          <edgelabel>base</edgelabel>
          <edgelabel>quote</edgelabel>
        </childnode>
      </node>
      <node id="2387">
        <label>graphene::chain::price_feed</label>
        <link refid="structgraphene_1_1chain_1_1price__feed"/>
        <childnode refid="2388" relation="usage">
          <edgelabel>core_exchange_rate</edgelabel>
          <edgelabel>settlement_price</edgelabel>
        </childnode>
      </node>
      <node id="2389">
        <label>graphene::chain::asset</label>
        <link refid="structgraphene_1_1chain_1_1asset"/>
        <childnode refid="2390" relation="usage">
          <edgelabel>amount</edgelabel>
        </childnode>
      </node>
      <node id="2390">
        <label>safe&lt; int64_t &gt;</label>
      </node>
    </collaborationgraph>
    <location file="libraries/chain/include/graphene/chain/protocol/asset.hpp" line="154" column="1" bodyfile="libraries/chain/include/graphene/chain/protocol/asset.hpp" bodystart="153" bodyend="210"/>
    <listofallmembers>
      <member refid="structgraphene_1_1chain_1_1price__feed_1ae908c41b403d61d3cce55007da6c6cf8" prot="public" virt="non-virtual"><scope>graphene::chain::price_feed</scope><name>core_exchange_rate</name></member>
      <member refid="structgraphene_1_1chain_1_1price__feed_1a7feee2abe4ec7f173d5fdf49fd464497" prot="public" virt="non-virtual"><scope>graphene::chain::price_feed</scope><name>is_for</name></member>
      <member refid="structgraphene_1_1chain_1_1price__feed_1a439532e13d2b6aef443aeb3d00b40281" prot="public" virt="non-virtual"><scope>graphene::chain::price_feed</scope><name>maintenance_collateral_ratio</name></member>
      <member refid="structgraphene_1_1chain_1_1price__feed_1a2c303acae96e84c266f2ac33c848e63e" prot="public" virt="non-virtual"><scope>graphene::chain::price_feed</scope><name>max_short_squeeze_price</name></member>
      <member refid="structgraphene_1_1chain_1_1price__feed_1ade63ae5128fdb1373fdf67d769eb2951" prot="public" virt="non-virtual"><scope>graphene::chain::price_feed</scope><name>maximum_short_squeeze_ratio</name></member>
      <member refid="structgraphene_1_1chain_1_1price__feed_1a74702de56c3c544fad20152a6d709194" prot="public" virt="non-virtual"><scope>graphene::chain::price_feed</scope><name>operator==</name></member>
      <member refid="structgraphene_1_1chain_1_1price__feed_1aa3c189341dddad4392f98820b860a07a" prot="public" virt="non-virtual"><scope>graphene::chain::price_feed</scope><name>settlement_price</name></member>
      <member refid="structgraphene_1_1chain_1_1price__feed_1a38f9229b87f5cadd554ac3eae27ed1a3" prot="public" virt="non-virtual"><scope>graphene::chain::price_feed</scope><name>validate</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
