<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structgraphene_1_1chain_1_1asset__publish__feed__operation" kind="struct" language="C++" prot="public">
    <compoundname>graphene::chain::asset_publish_feed_operation</compoundname>
    <basecompoundref refid="structgraphene_1_1chain_1_1base__operation" prot="public" virt="non-virtual">graphene::chain::base_operation</basecompoundref>
    <includes refid="asset__ops_8hpp" local="no">asset_ops.hpp</includes>
    <innerclass refid="structgraphene_1_1chain_1_1asset__publish__feed__operation_1_1fee__parameters__type" prot="public">graphene::chain::asset_publish_feed_operation::fee_parameters_type</innerclass>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structgraphene_1_1chain_1_1asset__publish__feed__operation_1aa9f9b165311e53b57dc7908d6a7f4508" prot="public" static="no" mutable="no">
        <type><ref refid="structgraphene_1_1chain_1_1asset" kindref="compound">asset</ref></type>
        <definition>asset graphene::chain::asset_publish_feed_operation::fee</definition>
        <argsstring></argsstring>
        <name>fee</name>
        <briefdescription>
<para>paid for by publisher </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/asset_ops.hpp" line="373" column="1" bodyfile="libraries/chain/include/graphene/chain/protocol/asset_ops.hpp" bodystart="373" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structgraphene_1_1chain_1_1asset__publish__feed__operation_1a620fae33c63581869bdec733e41d3b31" prot="public" static="no" mutable="no">
        <type><ref refid="namespacegraphene_1_1chain_1a11927fb343f953514ab6235d6e7233ee" kindref="member">account_id_type</ref></type>
        <definition>account_id_type graphene::chain::asset_publish_feed_operation::publisher</definition>
        <argsstring></argsstring>
        <name>publisher</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/asset_ops.hpp" line="374" column="1" bodyfile="libraries/chain/include/graphene/chain/protocol/asset_ops.hpp" bodystart="374" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structgraphene_1_1chain_1_1asset__publish__feed__operation_1ab2f81f712ae704c2243636442043c7b3" prot="public" static="no" mutable="no">
        <type><ref refid="namespacegraphene_1_1chain_1a8719a403aa47e9d369890c01d60d0bb2" kindref="member">asset_id_type</ref></type>
        <definition>asset_id_type graphene::chain::asset_publish_feed_operation::asset_id</definition>
        <argsstring></argsstring>
        <name>asset_id</name>
        <briefdescription>
<para>asset for which the feed is published </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/asset_ops.hpp" line="375" column="1" bodyfile="libraries/chain/include/graphene/chain/protocol/asset_ops.hpp" bodystart="375" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structgraphene_1_1chain_1_1asset__publish__feed__operation_1a87ae35eb8c75ca98ed70ddad9c606b06" prot="public" static="no" mutable="no">
        <type><ref refid="structgraphene_1_1chain_1_1price__feed" kindref="compound">price_feed</ref></type>
        <definition>price_feed graphene::chain::asset_publish_feed_operation::feed</definition>
        <argsstring></argsstring>
        <name>feed</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/asset_ops.hpp" line="376" column="1" bodyfile="libraries/chain/include/graphene/chain/protocol/asset_ops.hpp" bodystart="376" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structgraphene_1_1chain_1_1asset__publish__feed__operation_1a88dd0e60d25a95536b44bd44a04f56ff" prot="public" static="no" mutable="no">
        <type><ref refid="group__operations_1gae0096750377f6e9d61dba5765284de99" kindref="member">extensions_type</ref></type>
        <definition>extensions_type graphene::chain::asset_publish_feed_operation::extensions</definition>
        <argsstring></argsstring>
        <name>extensions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/asset_ops.hpp" line="377" column="1" bodyfile="libraries/chain/include/graphene/chain/protocol/asset_ops.hpp" bodystart="377" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structgraphene_1_1chain_1_1asset__publish__feed__operation_1a572b1ac0c4a74fb5eeff95ba22f55424" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacegraphene_1_1chain_1a11927fb343f953514ab6235d6e7233ee" kindref="member">account_id_type</ref></type>
        <definition>account_id_type graphene::chain::asset_publish_feed_operation::fee_payer</definition>
        <argsstring>() const</argsstring>
        <name>fee_payer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/asset_ops.hpp" line="379" column="1" bodyfile="libraries/chain/include/graphene/chain/protocol/asset_ops.hpp" bodystart="379" bodyend="379"/>
      </memberdef>
      <memberdef kind="function" id="structgraphene_1_1chain_1_1asset__publish__feed__operation_1a934e973270a71502005076c4bde3531c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::chain::asset_publish_feed_operation::validate</definition>
        <argsstring>() const</argsstring>
        <name>validate</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/graphene/chain/protocol/asset_ops.hpp" line="380" column="1" bodyfile="libraries/chain/protocol/asset_ops.cpp" bodystart="132" bodyend="150"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Publish price feeds for market-issued assets</para><para>Price feed providers use this operation to publish their price feeds for market-issued assets. A price feed is used to tune the market for a particular market-issued asset. For each value in the feed, the median across all committee_member feeds for that asset is calculated and the market for the asset is configured with the median of that value. </para>    </briefdescription>
    <detaileddescription>
<para>The feed in the operation contains three prices: a call price limit, a short price limit, and a settlement price. The call limit price is structured as (collateral asset) / (debt asset) and the short limit price is structured as (asset for sale) / (collateral asset). Note that the asset IDs are opposite to eachother, so if we&apos;re publishing a feed for USD, the call limit price will be CORE/USD and the short limit price will be USD/CORE. The settlement price may be flipped either direction, as long as it is a ratio between the market-issued asset and its collateral. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="675">
        <label>graphene::chain::asset_publish_feed_operation</label>
        <link refid="structgraphene_1_1chain_1_1asset__publish__feed__operation"/>
        <childnode refid="676" relation="public-inheritance">
        </childnode>
      </node>
      <node id="676">
        <label>graphene::chain::base_operation</label>
        <link refid="structgraphene_1_1chain_1_1base__operation"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="677">
        <label>graphene::chain::asset_publish_feed_operation</label>
        <link refid="structgraphene_1_1chain_1_1asset__publish__feed__operation"/>
        <childnode refid="678" relation="public-inheritance">
        </childnode>
        <childnode refid="679" relation="usage">
          <edgelabel>extensions</edgelabel>
        </childnode>
        <childnode refid="680" relation="usage">
          <edgelabel>fee</edgelabel>
        </childnode>
        <childnode refid="682" relation="usage">
          <edgelabel>feed</edgelabel>
        </childnode>
      </node>
      <node id="683">
        <label>graphene::chain::price</label>
        <link refid="structgraphene_1_1chain_1_1price"/>
        <childnode refid="680" relation="usage">
          <edgelabel>base</edgelabel>
          <edgelabel>quote</edgelabel>
        </childnode>
      </node>
      <node id="679">
        <label>flat_set&lt; future_extensions &gt;</label>
      </node>
      <node id="682">
        <label>graphene::chain::price_feed</label>
        <link refid="structgraphene_1_1chain_1_1price__feed"/>
        <childnode refid="683" relation="usage">
          <edgelabel>core_exchange_rate</edgelabel>
          <edgelabel>settlement_price</edgelabel>
        </childnode>
      </node>
      <node id="678">
        <label>graphene::chain::base_operation</label>
        <link refid="structgraphene_1_1chain_1_1base__operation"/>
      </node>
      <node id="680">
        <label>graphene::chain::asset</label>
        <link refid="structgraphene_1_1chain_1_1asset"/>
        <childnode refid="681" relation="usage">
          <edgelabel>amount</edgelabel>
        </childnode>
      </node>
      <node id="681">
        <label>safe&lt; int64_t &gt;</label>
      </node>
    </collaborationgraph>
    <location file="libraries/chain/include/graphene/chain/protocol/asset_ops.hpp" line="370" column="1" bodyfile="libraries/chain/include/graphene/chain/protocol/asset_ops.hpp" bodystart="369" bodyend="381"/>
    <listofallmembers>
      <member refid="structgraphene_1_1chain_1_1asset__publish__feed__operation_1ab2f81f712ae704c2243636442043c7b3" prot="public" virt="non-virtual"><scope>graphene::chain::asset_publish_feed_operation</scope><name>asset_id</name></member>
      <member refid="structgraphene_1_1chain_1_1base__operation_1a8947f5ff3ea0458c7fe981b5bb9e82b7" prot="public" virt="non-virtual"><scope>graphene::chain::asset_publish_feed_operation</scope><name>calculate_data_fee</name></member>
      <member refid="structgraphene_1_1chain_1_1base__operation_1a18b678eb05bc5b30d75f10b398c07a91" prot="public" virt="non-virtual"><scope>graphene::chain::asset_publish_feed_operation</scope><name>calculate_fee</name></member>
      <member refid="structgraphene_1_1chain_1_1asset__publish__feed__operation_1a88dd0e60d25a95536b44bd44a04f56ff" prot="public" virt="non-virtual"><scope>graphene::chain::asset_publish_feed_operation</scope><name>extensions</name></member>
      <member refid="structgraphene_1_1chain_1_1asset__publish__feed__operation_1aa9f9b165311e53b57dc7908d6a7f4508" prot="public" virt="non-virtual"><scope>graphene::chain::asset_publish_feed_operation</scope><name>fee</name></member>
      <member refid="structgraphene_1_1chain_1_1asset__publish__feed__operation_1a572b1ac0c4a74fb5eeff95ba22f55424" prot="public" virt="non-virtual"><scope>graphene::chain::asset_publish_feed_operation</scope><name>fee_payer</name></member>
      <member refid="structgraphene_1_1chain_1_1asset__publish__feed__operation_1a87ae35eb8c75ca98ed70ddad9c606b06" prot="public" virt="non-virtual"><scope>graphene::chain::asset_publish_feed_operation</scope><name>feed</name></member>
      <member refid="structgraphene_1_1chain_1_1base__operation_1a1d398b2f68e1dca5f453b86655a64c41" prot="public" virt="non-virtual"><scope>graphene::chain::asset_publish_feed_operation</scope><name>get_required_active_authorities</name></member>
      <member refid="structgraphene_1_1chain_1_1base__operation_1ac7e2861a01bbaef8fbe5c5dcf5e73b38" prot="public" virt="non-virtual"><scope>graphene::chain::asset_publish_feed_operation</scope><name>get_required_authorities</name></member>
      <member refid="structgraphene_1_1chain_1_1base__operation_1aff6e2d2b66117c8c87f6a6e7e7ddba1f" prot="public" virt="non-virtual"><scope>graphene::chain::asset_publish_feed_operation</scope><name>get_required_owner_authorities</name></member>
      <member refid="structgraphene_1_1chain_1_1asset__publish__feed__operation_1a620fae33c63581869bdec733e41d3b31" prot="public" virt="non-virtual"><scope>graphene::chain::asset_publish_feed_operation</scope><name>publisher</name></member>
      <member refid="structgraphene_1_1chain_1_1asset__publish__feed__operation_1a934e973270a71502005076c4bde3531c" prot="public" virt="non-virtual"><scope>graphene::chain::asset_publish_feed_operation</scope><name>validate</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
